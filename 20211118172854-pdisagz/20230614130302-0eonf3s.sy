{
	"ID": "20230614130302-0eonf3s",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230614130302-0eonf3s",
		"title": "jsonpath",
		"updated": "20230619162856"
	},
	"Children": [
		{
			"ID": "20230614130536-vitzfwk",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230614130536-vitzfwk",
				"updated": "20230614130539"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.简介"
				}
			]
		},
		{
			"ID": "20230614130303-x3kefbl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614130303-x3kefbl",
				"updated": "20230614130318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JSONPath 模板由 {} 包起来的 JSONPath 表达式组成。Kubectl 使用 JSONPath 表达式来过滤 JSON 对象中的特定字段并格式化输出。 除了原始的 JSONPath 模板语法，以下函数和语法也是有效的:"
				}
			]
		},
		{
			"ID": "20230614130336-0d2e5tk",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230614130336-0d2e5tk",
				"updated": "20230614130336"
			},
			"Children": [
				{
					"ID": "20230614130336-l53ezfg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230614130336-l53ezfg",
						"updated": "20230614130336"
					},
					"Children": [
						{
							"ID": "20230614130336-tcexbwm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230614130336-tcexbwm",
								"updated": "20230614130336"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用双引号将 JSONPath 表达式内的文本引起来。"
								}
							]
						}
					]
				},
				{
					"ID": "20230614130336-u4yvfs3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230614130336-u4yvfs3",
						"updated": "20230614130336"
					},
					"Children": [
						{
							"ID": "20230614130336-ltaptt1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230614130336-ltaptt1",
								"updated": "20230614130336"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "range"
								},
								{
									"Type": "NodeText",
									"Data": "​，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "end"
								},
								{
									"Type": "NodeText",
									"Data": "​ 运算符来迭代列表。"
								}
							]
						}
					]
				},
				{
					"ID": "20230614130336-26p5oid",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230614130336-26p5oid",
						"updated": "20230614130336"
					},
					"Children": [
						{
							"ID": "20230614130336-b1cuxax",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230614130336-b1cuxax",
								"updated": "20230614130336"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用负片索引后退列表。负索引不会“环绕”列表，并且只要 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "-index + listLength\u0026gt; = 0"
								},
								{
									"Type": "NodeText",
									"Data": "​ 就有效。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230614130336-274j00y",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230614130336-274j00y",
				"updated": "20230614130412"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230614130353-ul8521q",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230614130353-ul8521q",
						"updated": "20230614130359"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "说明："
						}
					]
				},
				{
					"ID": "20230614130359-b0hyj1v",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230614130359-b0hyj1v",
						"updated": "20230614130412"
					},
					"Children": [
						{
							"ID": "20230614130412-g2bau9y",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230614130412-g2bau9y",
								"updated": "20230614130412"
							},
							"Children": [
								{
									"ID": "20230614130412-snf5x35",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230614130412-snf5x35",
										"updated": "20230614130412"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "$"
										},
										{
											"Type": "NodeText",
											"Data": "​ 运算符是可选的，因为默认情况下表达式总是从根对象开始。"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230614130406-6ky01rr",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230614130406-6ky01rr",
						"updated": "20230614130409"
					},
					"Children": [
						{
							"ID": "20230614130409-3ehe5sh",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230614130409-3ehe5sh",
								"updated": "20230614130409"
							},
							"Children": [
								{
									"ID": "20230614130409-4can71x",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230614130409-4can71x",
										"updated": "20230614130409"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "结果对象将作为其 String() 函数输出。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230614130353-t59l881",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230614130353-t59l881",
				"updated": "20230614130547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. 常用函数"
				}
			]
		},
		{
			"ID": "20230614130452-w2rqqf8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614130452-w2rqqf8",
				"updated": "20230614130452"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230614130452-r339dar.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230614130454-fraqwcd",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230614130454-fraqwcd",
				"updated": "20230614130556"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. 常用示例"
				}
			]
		},
		{
			"ID": "20230614130557-m31v8mz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614130557-m31v8mz",
				"updated": "20230614130603"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl get pods -o json\nkubectl get pods -o=jsonpath='{@}'\nkubectl get pods -o=jsonpath='{.items[0]}'\nkubectl get pods -o=jsonpath='{.items[0].metadata.name}'\nkubectl get pods -o=jsonpath=\"{.items[*]['metadata.name', 'status.capacity']}\"\nkubectl get pods -o=jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.status.startTime}{\"\\n\"}{end}'\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614130631-jaa3k4o",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230614130631-jaa3k4o",
				"updated": "20230614130645"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230614130636-qcmprek",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230614130636-qcmprek",
						"updated": "20230614130636"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "不支持 JSONPath 正则表达式。如需使用正则表达式进行匹配操作，你可以使用如 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "jq"
						},
						{
							"Type": "NodeText",
							"Data": "​ 之类的工具。"
						}
					]
				},
				{
					"ID": "20230614130636-6wtdn91",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20230614130636-6wtdn91",
						"updated": "20230614130645"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "c2hlbGw="
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "# kubectl 的 JSONpath 输出不支持正则表达式\n# 下面的命令不会生效\nkubectl get pods -o jsonpath='{.items[?(@.metadata.name=~/^test$/)].metadata.name}'\n\n# 下面的命令可以获得所需的结果\nkubectl get pods -o json | jq -r '.items[] | select(.metadata.name | test(\"test-\")).spec.containers[].image'\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				}
			]
		},
		{
			"ID": "20230619162856-e1stt81",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230619162856-e1stt81"
			}
		}
	]
}