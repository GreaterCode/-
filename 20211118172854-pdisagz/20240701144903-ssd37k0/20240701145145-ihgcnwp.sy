{
	"ID": "20240701145145-ihgcnwp",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240701145145-ihgcnwp",
		"title": "GDB调试指南高级篇：成为调试专家，掌控程序的命运",
		"updated": "20240701145145"
	},
	"Children": [
		{
			"ID": "20240701145145-cq0cj0e",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20240701145145-cq0cj0e",
				"updated": "20240701145145"
			}
		},
		{
			"ID": "20240701145145-wwv8ipw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240701145145-wwv8ipw",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"ID": "20240701145145-aj45eb2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-aj45eb2",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-zgwufar",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-zgwufar",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://mp.weixin.qq.com/s/dMkOde2OrsqgMtJ3_dTCAw",
									"TextMarkTextContent": "https://mp.weixin.qq.com/s/dMkOde2OrsqgMtJ3_dTCAw - 微信公众平台"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-mbxe7s4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-mbxe7s4",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-v045of8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-v045of8",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在这篇文章中，你可以学习到以下内容：多线程和多进程程序的调试。核心转储（core dumps）的分析。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-120ki6r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-120ki6r",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-fhq5dq6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-fhq5dq6",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2024-07-01 14:51:45"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240701145145-cveas24",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20240701145145-cveas24",
				"updated": "20240701145145"
			}
		},
		{
			"ID": "20240701145145-t7rissw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-t7rissw",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这篇文章中，你可以学习到以下内容："
				}
			]
		},
		{
			"ID": "20240701145145-4f8xlum",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240701145145-4f8xlum",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"ID": "20240701145145-8pzbbeh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-8pzbbeh",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-9ljgclg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-9ljgclg",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "多线程和多进程程序的调试。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-i5swblc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-i5swblc",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-31hk9df",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-31hk9df",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "核心转储（core dumps）的分析。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-d5xh18y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-d5xh18y",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-2txmnos",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-2txmnos",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "GDB 的高级断点技术，如条件断点和监视点。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-yfqiofs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-yfqiofs",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-j3bfgq2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-j3bfgq2",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 GDB 自定义命令和扩展。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240701145145-97iidtn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-97iidtn",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这两篇文章应当为读者提供清晰的GDB调试流程和策略，让他们不仅能够在面对常见的问题时迅速解决，而且能够在更复杂的调试场景中也能游刃有余。"
				}
			]
		},
		{
			"ID": "20240701145145-q78c2ov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-q78c2ov",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20240701145145-i90rb3f"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240701145145-0793yr8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-0793yr8",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1"
				}
			]
		},
		{
			"ID": "20240701145145-q8r0rpp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-q8r0rpp",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "前言"
				}
			]
		},
		{
			"ID": "20240701145145-3ndsm9a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-3ndsm9a",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在我们的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MzI3NDczNDM4MQ==\u0026mid=2247484869\u0026idx=1\u0026sn=368b8c497c15cd96ab7fb362188fa90b\u0026chksm=eb0ec987dc794091902d22f41b986993000d4d0cfe8e30b82ce0b65bf6a38b2c158ef9aa64f7\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "GDB调试指南入门篇：揭开程序运行世界的神秘面纱"
				},
				{
					"Type": "NodeText",
					"Data": "，你已经学会了如何使用GDB这把锋利的“调试匕首”，去割除程序中显而易见的bug。随着你进一步踏入程序世界的深渊，你会发现一些更为狡猾的故障，它们隐藏在程序的阴影中，等待你用更高阶的技巧去捕捉它们。在这篇高级篇中，让我们装备上更先进的“探险工具”，深入程序的核心，掌控其运行的命运。"
				}
			]
		},
		{
			"ID": "20240701145145-iseajni",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-iseajni",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2"
				}
			]
		},
		{
			"ID": "20240701145145-bkmn4q6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-bkmn4q6",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "gdb命令"
				}
			]
		},
		{
			"ID": "20240701145145-qam9mi3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-qam9mi3",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "GDB 的 info命令是一个功能丰富的命令集，用于获取各种运行时调试信息。 info 命令后必须跟上一个子命令来指定要检索的信息类型。使用 info 命令，调试者可以查询程序及其执行环境的详细信息，例如当前的栈帧、变量、寄存器值、内存布局、线程状态等等。"
				}
			]
		},
		{
			"ID": "20240701145145-ehj2ek7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-ehj2ek7",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下是一些常用的 info  子命令和它们的用途的总结："
				}
			]
		},
		{
			"ID": "20240701145145-qry0yl7",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240701145145-qry0yl7",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"ID": "20240701145145-3l8ecgh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-3l8ecgh",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-81hxai0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-81hxai0",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info address : 显示特定符号的存储位置。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-65r8e5b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-65r8e5b",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-nmfmftk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-nmfmftk",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info all-registers : 列出当前栈帧中所有寄存器的内容。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-m9lnswp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-m9lnswp",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-bma60fl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-bma60fl",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info args : 显示当前栈帧的函数参数。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-xefcub9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-xefcub9",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-qzs2wmz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-qzs2wmz",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info breakpoints : 列出所有断点的状态信息。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-46eruq8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-46eruq8",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-pe1cpo1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-pe1cpo1",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info functions : 显示程序中所有匹配特定模式的函数。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-9utbj1g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-9utbj1g",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-3jlgn4s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-3jlgn4s",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info locals : 列出当前栈帧的所有局部变量。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-94gkvtn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-94gkvtn",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-rqqv5j0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-rqqv5j0",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info registers : 列出当前栈帧中的特定类型寄存器内容。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-7pxkkzm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-7pxkkzm",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-7xx5sv8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-7xx5sv8",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info threads : 显示当前已知的所有线程。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-110jytu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-110jytu",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-q79y3et",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-q79y3et",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info variables : 列出所有全局和静态变量。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-jo7colr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-jo7colr",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-affno84",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-affno84",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info sharedlibrary : 显示已加载的共享库的信息。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240701145145-avnd88q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-avnd88q",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "info详细命令"
				}
			]
		},
		{
			"ID": "20240701145145-d3lhlkv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-d3lhlkv",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "info  命令还包括许多其他子命令，使调试者能够访问与程序的运行和调试设置有关的各种信息。"
				}
			]
		},
		{
			"ID": "20240701145145-5fjoldk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-5fjoldk",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "info  子命令非常适合用于对程序的内部状态进行深入探查，了解程序运行时的具体情况，以及在调试和优化程序过程中进行具体问题分析的需要。总而言之， info  命令集是 GDB 中用于获取关于正在调试程序各个方面详尽信息的重要工具。"
				}
			]
		},
		{
			"ID": "20240701145145-y6guuhh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-y6guuhh",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "(gdb) info\n\"info\" must be followed by the name of an info command.\nList of info subcommands:\n\n\ninfo address -- Describe where symbol SYM is stored.\ninfo all-registers -- List of all registers and their contents, for selected stack frame.\ninfo args -- All argument variables of current stack frame or those matching REGEXPs.\ninfo auto-load -- Print current status of auto-loaded files.\ninfo auxv -- Display the inferior's auxiliary vector.\ninfo bookmarks -- Status of user-settable bookmarks.\ninfo breakpoints -- Status of specified breakpoints (all user-settable breakpoints if no argument).\ninfo checkpoints -- IDs of currently known checkpoints.\ninfo classes -- All Objective-C classes, or those matching REGEXP.\ninfo common -- Print out the values contained in a Fortran COMMON block.\ninfo copying -- Conditions for redistributing copies of GDB.\ninfo dcache -- Print information on the dcache performance.\ninfo display -- Expressions to display when program stops, with code numbers.\ninfo exceptions -- List all Ada exception names.\ninfo extensions -- All filename extensions associated with a source language.\ninfo files -- Names of targets and files being debugged.\ninfo float -- Print the status of the floating point unit.\ninfo frame -- All about the selected stack frame.\ninfo frame-filter -- List all registered Python frame-filters.\ninfo functions -- All function names or those matching REGEXPs.\ninfo guile -- Prefix command for Guile info displays.\ninfo handle -- What debugger does when program gets various signals.\ninfo inferiors -- Print a list of inferiors being managed.\ninfo line -- Core addresses of the code for a source line.\ninfo locals -- All local variables of current stack frame or those matching REGEXPs.\ninfo macro -- Show the definition of MACRO, and it's source location.\ninfo macros -- Show the definitions of all macros at LINESPEC, or the current source location.\ninfo mem -- Memory region attributes.\ninfo module -- Print information about modules.\ninfo modules -- All module names, or those matching REGEXP.\ninfo os -- Show OS data ARG.\ninfo pretty-printer -- GDB command to list all registered pretty-printers.\ninfo probes -- Show available static probes.\ninfo proc -- Show additional information about a process.\ninfo program -- Execution status of the program.\ninfo record -- Info record options.\ninfo registers -- List of integer registers and their contents, for selected stack frame.\ninfo scope -- List the variables local to a scope.\ninfo selectors -- All Objective-C selectors, or those matching REGEXP.\ninfo set -- Show all GDB settings.\ninfo sharedlibrary -- Status of loaded shared object libraries.\ninfo signals -- What debugger does when program gets various signals.\ninfo skip -- Display the status of skips.\ninfo source -- Information about the current source file.\ninfo sources -- All source files in the program or those matching REGEXP.\ninfo stack -- Backtrace of the stack, or innermost COUNT frames.\n--Type \u003cRET\u003e for more, q to quit, c to continue without paging--\ninfo static-tracepoint-markers -- List target static tracepoints markers.\ninfo symbol -- Describe what symbol is at location ADDR.\ninfo target -- Names of targets and files being debugged.\ninfo tasks -- Provide information about all known Ada tasks.\ninfo terminal -- Print inferior's saved terminal status.\ninfo threads -- Display currently known threads.\ninfo tracepoints -- Status of specified tracepoints (all tracepoints if no argument).\ninfo tvariables -- Status of trace state variables and their values.\ninfo type-printers -- GDB command to list all registered type-printers.\ninfo types -- All type names, or those matching REGEXP.\ninfo unwinder -- GDB command to list unwinders.\ninfo variables -- All global and static variable names or those matching REGEXPs.\ninfo vector -- Print the status of the vector unit.\ninfo vtbl -- Show the virtual function table for a C++ object.\ninfo warranty -- Various kinds of warranty you do not have.\ninfo watchpoints -- Status of specified watchpoints (all watchpoints if no argument).\ninfo win -- List of all displayed windows.\ninfo xmethod -- GDB command to list registered xmethod matchers.\n\n\nType \"help info\" followed by info subcommand name for full documentation.\nType \"apropos word\" to search for commands related to \"word\".\nType \"apropos -v word\" for full documentation of commands related to \"word\".\nCommand name abbreviations are allowed if unambiguous.\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-xeqn4ob",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-xeqn4ob",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "命令 \"info\" 必须跟随一个具体的 info 子命令。\ninfo 子命令列表：\ninfo address -- 描述符号 SYM 存储的位置。\ninfo all-registers -- 列出选定栈帧的所有寄存器及其内容。\ninfo args -- 当前栈帧的所有参数变量或匹配 REGEXPs 的参数变量。\ninfo auto-load -- 打印自动加载文件的当前状态。\ninfo auxv -- 显示下层系统的辅助向量。\ninfo bookmarks -- 用户设置的书签状态。\ninfo breakpoints -- 指定断点的状态（如果没有参数，则为所有用户设置的断点）。\ninfo checkpoints -- 当前已知检查点的 ID。\ninfo classes -- 所有 Objective-C 类，或匹配 REGEXP 的类。\ninfo common -- 打印 Fortran COMMON 块中的值。\ninfo copying -- 关于分发 GDB 副本的条件。\ninfo dcache -- 打印 dcache（数据缓存）性能信息。\ninfo display -- 程序停止时要展示的表达式，包括代码编号。\ninfo exceptions -- 列出所有 Ada 异常名。\ninfo extensions -- 与源代码语言关联的所有文件扩展名。\ninfo files -- 正在调试的目标和文件的名称。\ninfo float -- 打印浮点单元的状态。\ninfo frame -- 有关选定栈帧的所有信息。\ninfo frame-filter -- 列出所有注册的 Python 栈帧过滤器。\ninfo functions -- 所有函数名或匹配 REGEXPs 的函数名。\ninfo guile -- Guile 信息显示的前缀命令。\ninfo handle -- 调试器在程序接收到各种信号时的操作。\ninfo inferiors -- 打印正被管理的下层系统列表。\ninfo line -- 源代码行对应的核心地址。\ninfo locals -- 当前栈帧的所有局部变量或匹配 REGEXPs 的局部变量。\ninfo macro -- 显示宏 MACRO 的定义及其来源位置。\ninfo macros -- 在 LINESPEC 显示所有宏的定义，或者当前源代码位置。\ninfo mem -- 内存区域属性。\ninfo module -- 打印有关模块的信息。\ninfo modules -- 所有模块名，或匹配 REGEXP 的模块。\ninfo os -- 显示操作系统数据 ARG。\ninfo pretty-printer -- GDB 命令，列出所有注册的美化输出器。\ninfo probes -- 显示可用的静态探测点。\ninfo proc -- 显示有关进程的附加信息。\ninfo program -- 程序的执行状态。\ninfo record -- 信息记录选项。\ninfo registers -- 列出选定栈帧的整数寄存器及其内容。\ninfo scope -- 列出与作用域局部相关的变量。\ninfo selectors -- 所有 Objective-C 选择器，或匹配 REGEXP 的选择器。\ninfo set -- 显示所有 GDB 设置。\ninfo sharedlibrary -- 已加载的共享对象库的状态。\ninfo signals -- 调试器在程序接收到各种信号时的操作。\ninfo skip -- 显示跳过的状态。\ninfo source -- 有关当前源文件的信息。\ninfo sources -- 程序中的所有源文件或匹配 REGEXP 的源文件。\ninfo stack -- 栈的回溯，或最内层 COUNT 帧。\n-- 输入 \u003cRET\u003e 查看更多，输入 q 退出，输入 c 继续查看不分页 --\ninfo static-tracepoint-markers -- 列出目标静态跟踪点标记。\ninfo symbol -- 描述地址 ADDR 处的符号。\ninfo target -- 正在调试的目标和文件的名称。\ninfo tasks -- 提供有关所有已知 Ada 任务的信息。\ninfo terminal -- 打印下层系统保存的终端状态。\ninfo threads -- 显示当前已知线程。\ninfo tracepoints -- 指定跟踪点的状态（如果没有参数，则为所有跟踪点）。\ninfo tvariables -- 跟踪状态变量及其值的状态。\ninfo type-printers -- GDB 命令，列出所有注册的类型输出器。\ninfo types -- 所有类型名，或匹配 REGEXP 的类型名。\ninfo unwinder -- GDB 命令，列出反卷积器。\ninfo variables -- 所有全局和静态变量名或匹配 REGEXPs 的变量名。\ninfo vector -- 打印向量单元的状态。\ninfo vtbl -- 显示 C++ 对象的虚函数表。\ninfo warranty -- 您没有的各种类型的保证。\ninfo watchpoints -- 指定监视点的状态（如果没有参数，则为所有监视点）。\ninfo win -- 所有显示窗口的列表。\ninfo xmethod -- GDB 命令，列出注册的 xmethod 匹配器。\n输入 \"help info\" 后跟 info 子命令名称以获取完整文档。\n输入 \"apropos word\" 来搜索与 \"word\" 相关的命令。\n输入 \"apropos -v word\" 获取与 \"word\" 相关命令的完整文档。\n如果不会引起混淆，允许使用命令名缩写。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-bwutfbi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-bwutfbi",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3"
				}
			]
		},
		{
			"ID": "20240701145145-1fiymr7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-1fiymr7",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "多线程调试"
				}
			]
		},
		{
			"ID": "20240701145145-qrirpkg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-qrirpkg",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代的应用程序常常使用到多线程技术来提升效率，但多线程调试也相应地带来了不少挑战。在GDB中，你可以用一些高级功能来探索多线程程序："
				}
			]
		},
		{
			"ID": "20240701145145-5xgscuq",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240701145145-5xgscuq",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"ID": "20240701145145-cbln1a5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-cbln1a5",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-kzjss2g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-kzjss2g",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "info threads：列出所有线程，查看程序的多线程结构。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-zqhxo8m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-zqhxo8m",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-t1xhcq2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-t1xhcq2",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "thread：切换到具体的线程，进行更细致的观察和调试。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-q49r7ad",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-q49r7ad",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-p7iuhkj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-p7iuhkj",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "set follow-fork-mode：设置 GDB 如何跟踪 fork() 系统调用产生的进程。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240701145145-aktm5uv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-aktm5uv",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "示例代码"
				}
			]
		},
		{
			"ID": "20240701145145-4024ixb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-4024ixb",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下是一个多线程的C语言 demo 用例，该用例创建两个线程来更新相同的资源。这个示例利用 POSIX 线程库（pthread），在编译的时候需要链接-lpthread库。"
				}
			]
		},
		{
			"ID": "20240701145145-1ev9ekx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-1ev9ekx",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该例子中包含一个简单的资源共享问题，因此可以用来练习 GDB 的多线程调试功能。"
				}
			]
		},
		{
			"ID": "20240701145145-hj0zkoo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-hj0zkoo",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cpthread.h\u003e\n\n\n#define NUM_THREADS 2\n\n\n// 共享的数据\ntypedef struct SharedData {\n    int count;\n    pthread_mutex_t lock;\n} SharedData;\n\n\nSharedData shared = {0, PTHREAD_MUTEX_INITIALIZER};\n\n\n// 线程的工作是增加共享计数器\nvoid* increment_count(void* data) {\n    SharedData *shared_data = (SharedData*)data;\n\n\n    for (int i = 0; i \u003c 100000; i++) {\n        // 尝试获取互斥锁\n        pthread_mutex_lock(\u0026shared_data-\u003elock);\n        shared_data-\u003ecount += 1;\n        pthread_mutex_unlock(\u0026shared_data-\u003elock);\n    }\n\n\n    pthread_exit(NULL);\n}\n\n\nint main() {\n    pthread_t threads[NUM_THREADS];\n\n\n    // 创建两个线程\n    for (int i = 0; i \u003c NUM_THREADS; i++) {\n        int rc = pthread_create(\u0026threads[i], NULL, increment_count, (void*)\u0026shared);\n        if (rc) {\n            printf(\"ERROR; return code from pthread_create() is %d\\n\", rc);\n            exit(-1);\n        }\n    }\n\n\n    // 等待所有线程完成\n    for (int i = 0; i \u003c NUM_THREADS; i++) {\n        pthread_join(threads[i], NULL);\n    }\n\n\n    printf(\"最终计数器的值: %d\\n\", shared.count);\n\n\n    // 销毁互斥锁\n    pthread_mutex_destroy(\u0026shared.lock);\n\n\n    pthread_exit(NULL);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-84eb0q0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-84eb0q0",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "保存上面的代码为mt_demo.c。然后使用以下命令用 GCC 编译此代码，同时确保添加-g 以便生成调试信息和-l来链接 pthread 库："
				}
			]
		},
		{
			"ID": "20240701145145-jjuhq0x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-jjuhq0x",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gcc -g -o mt_demo mt_demo.c -lpthread\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-qdvuzpr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-qdvuzpr",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "编译成功后可以使用 GDB 来调试这个程序"
				}
			]
		},
		{
			"ID": "20240701145145-ky3ahe4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-ky3ahe4",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gdb ./mt_demo\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-tv3hzkf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-tv3hzkf",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 GDB 中，你可以尝试以下几个任务来练习多线程的调试："
				}
			]
		},
		{
			"ID": "20240701145145-mrbftxj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-mrbftxj",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "列出存在的程序"
				}
			]
		},
		{
			"ID": "20240701145145-856obvp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-856obvp",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "掌握info threads、thread命令，有效管理并调试多线程程序，理解并发环境下程序的行为。"
				}
			]
		},
		{
			"ID": "20240701145145-batvcin",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-batvcin",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 info threads 来查看所有的线程。"
				}
			]
		},
		{
			"ID": "20240701145145-20llk81",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-20llk81",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20240701145145-0dobsja"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240701145145-mpraj3m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-mpraj3m",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "切换线程"
				}
			]
		},
		{
			"ID": "20240701145145-r4ho8up",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-r4ho8up",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 thread切换到一个指定的线程。"
				}
			]
		},
		{
			"ID": "20240701145145-9c4q7zv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-9c4q7zv",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20240701145145-trm21hv"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240701145145-vf7ofa6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-vf7ofa6",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4"
				}
			]
		},
		{
			"ID": "20240701145145-amxaxiq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-amxaxiq",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "核心转存分析"
				}
			]
		},
		{
			"ID": "20240701145145-0fwhxek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-0fwhxek",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当程序崩溃（例如，由于段错误）时，操作系统可以生成核心转储文件。这个文件包含了崩溃时刻程序的内存映像、寄存器状态、栈信息等。默认情况下，核心转储可能没有被启用或其大小限制可能设置得很低。我们可以通过命令在shell中启用它或增加核心转储文件大小的限制。"
				}
			]
		},
		{
			"ID": "20240701145145-mhzeb5s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-mhzeb5s",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，确保允许生成核心转储文件，可以在终端中运行："
				}
			]
		},
		{
			"ID": "20240701145145-i1k24q0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-i1k24q0",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ulimit -c unlimited\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-3cacxco",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-3cacxco",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这将会允许操作系统生成不受大小限制的核心转储文件。"
				}
			]
		},
		{
			"ID": "20240701145145-te3b7je",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-te3b7je",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在，假设我们有一个C程序，它意外地试图解引用一个空指针，导致程序崩溃："
				}
			]
		},
		{
			"ID": "20240701145145-oujdtyd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-oujdtyd",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n\n\nint main() {\n    int *ptr = NULL;\n    printf(\"%d\\n\", *ptr); // 故意的空指针解引用产生段错误\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-7oc5hhj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-7oc5hhj",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们将这个代码保存到文件 crash.c 中，使用如下命令编译并启用调试信息："
				}
			]
		},
		{
			"ID": "20240701145145-ffk4is5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-ffk4is5",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gcc -g -o crash crash.c\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-w0ry79l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-w0ry79l",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在运行这个程序./crash之后，它会因为试图解引用NULL指针而崩溃，并且操作系统会在当前目录生成一个名为core或core.的核心转储文件（是进程ID）。"
				}
			]
		},
		{
			"ID": "20240701145145-la7gthm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-la7gthm",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来，你可以使用GDB载入执行文件和核心转储文件进行调试："
				}
			]
		},
		{
			"ID": "20240701145145-c4ztzad",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-c4ztzad",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gdb ./crash core\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-25do453",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-25do453",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行这个命令后，GDB会用核心转储文件初始化调试会话，这允许你检查程序崩溃时的状态。例如，你可以执行以下命令来查看程序崩溃时的栈跟踪："
				}
			]
		},
		{
			"ID": "20240701145145-67ijlcq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-67ijlcq",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "(gdb) bt\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-r17d8lr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-r17d8lr",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "bt命令（backtrace的缩写）会显示导致程序崩溃的函数调用栈。你还可以使用各种GDB命令来查看程序崩溃时的变量值、寄存器状态以及其他各种有用的信息。这些信息对于理解崩溃的原因和确定出现错误的代码位置非常有帮助。"
				}
			]
		},
		{
			"ID": "20240701145145-swur2vx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-swur2vx",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5"
				}
			]
		},
		{
			"ID": "20240701145145-x1wtq14",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-x1wtq14",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "采用条件断点和观测点"
				}
			]
		},
		{
			"ID": "20240701145145-gh7ok6b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-gh7ok6b",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在基础篇中,我们介绍了如何设置断点和观察点。在高级篇中，你将了解到如何更智能地使用它们："
				}
			]
		},
		{
			"ID": "20240701145145-jfzmh2a",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240701145145-jfzmh2a",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"ID": "20240701145145-3qwke34",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-3qwke34",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-wnuxmq1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-wnuxmq1",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "条件断点（conditional breakpoints）：只有当满足特定条件时，程序才会在断点处暂停。"
								}
							]
						}
					]
				},
				{
					"ID": "20240701145145-9pwgyoc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240701145145-9pwgyoc",
						"updated": "20240701145145"
					},
					"Children": [
						{
							"ID": "20240701145145-stb538j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240701145145-stb538j",
								"updated": "20240701145145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "观察点（watchpoints）：当某个变量的值发生变化时，程序会暂停。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240701145145-msinbzi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-msinbzi",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面将举例说明如何在 GDB 中使用条件断点和观察点。"
				}
			]
		},
		{
			"ID": "20240701145145-l9d6db4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-l9d6db4",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "条件断点"
				}
			]
		},
		{
			"ID": "20240701145145-zbm5qqd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-zbm5qqd",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如下 C 代码，存储在名为 example.c 的文件中"
				}
			]
		},
		{
			"ID": "20240701145145-pys8ob6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-pys8ob6",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n\n\nint main() {\n    for (int i = 0; i \u003c 10; i++) {\n        printf(\"i 的值是: %d\\n\", i);\n        // 其他操作...\n    }\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-ouobi74",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-ouobi74",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这个例子中，如果你只关心变量 i 的值为 5 时刻的情况，可以设置一个条件断点来只在这个条件满足时停止运行。首先，编译该程序并启用调试信息："
				}
			]
		},
		{
			"ID": "20240701145145-f7425sn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-f7425sn",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gcc -g -o example example.c\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-4yicc53",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-4yicc53",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后，在 GDB 中运行这个程序，并设置条件断点："
				}
			]
		},
		{
			"ID": "20240701145145-sy0awbi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-sy0awbi",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gdb ./example\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-uaywf0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-uaywf0c",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 GDB 中输入下列命令："
				}
			]
		},
		{
			"ID": "20240701145145-9qmdvmh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-9qmdvmh",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "(gdb) break example.c:6 if i == 5\n(gdb) run\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-7sao3gw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-7sao3gw",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的 break 命令在 example.c 文件的第 6 行设置了一个断点，并且指定了条件 i == 5。当循环迭代到 i 的值为 5 时，程序将会停止执行，允许你观察那时的程序状态。"
				}
			]
		},
		{
			"ID": "20240701145145-6uo7eqb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-6uo7eqb",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "观察点 watchpoints"
				}
			]
		},
		{
			"ID": "20240701145145-9e4woiz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-9e4woiz",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在假定我们想要监视一个变量何时被修改。以 example.c 的循环为例，如果你想要在变量 i 的值改变时暂停程序，你可以设置一个观察点："
				}
			]
		},
		{
			"ID": "20240701145145-smow7hs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-smow7hs",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 GDB 中输入下列命令："
				}
			]
		},
		{
			"ID": "20240701145145-ug7d5w6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-ug7d5w6",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "(gdb) watch i\n(gdb) run\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-vxu37ki",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-vxu37ki",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时，每当变量 i 的值改变时，GDB 会中断程序的执行。这允许你检查变量的当前值及其在内存中的状态，以及调用栈中的其他信息。"
				}
			]
		},
		{
			"ID": "20240701145145-bhbm0f8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-bhbm0f8",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6"
				}
			]
		},
		{
			"ID": "20240701145145-kobot63",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-kobot63",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "性能分析和内存检查"
				}
			]
		},
		{
			"ID": "20240701145145-pop5z94",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-pop5z94",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "GDB可以配合其他工具使用，如性能分析器和内存检查工具，来帮你诊断性能瓶颈和内存泄漏等问题。"
				}
			]
		},
		{
			"ID": "20240701145145-f81zwui",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-f81zwui",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用gprof进行性能分析"
				}
			]
		},
		{
			"ID": "20240701145145-4nx9rz5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-4nx9rz5",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gprof 是一个性能分析工具，可以帮助你找到程序中的性能瓶颈。要使用它，需要在编译时加上 -pg 选项。这将会在程序运行后生成一个名为 gmon.out 的性能分析文件。"
				}
			]
		},
		{
			"ID": "20240701145145-mzdh5ez",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-mzdh5ez",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们有一个简单的 C 程序 performance_test.c，它包含了几个可以优化的函数："
				}
			]
		},
		{
			"ID": "20240701145145-7dk6mdz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-7dk6mdz",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n\n\nvoid function1() {\n    sleep(1);\n}\n\n\nvoid function2() {\n    sleep(2);\n}\n\n\nint main() {\n    function1();\n    function2();\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-67xr40f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-67xr40f",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们使用如下命令编译程序并启用 gprof："
				}
			]
		},
		{
			"ID": "20240701145145-habl2i0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-habl2i0",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gcc -pg -o performance_test performance_test.c\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-hgwwee1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-hgwwee1",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行编译好的程序 ："
				}
			]
		},
		{
			"ID": "20240701145145-k6ovg7x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-k6ovg7x",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "./performance_test\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-j4sndnx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-j4sndnx",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时会生成 gmon.out 文件。我们使用 gprof 来分析这个文件："
				}
			]
		},
		{
			"ID": "20240701145145-q2s0kzz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-q2s0kzz",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gprof ./performance_test gmon.out\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-cgpfar2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-cgpfar2",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gprof 将输出一个分析报告，其中包含时间消耗最多的函数和其他有用的性能信息。"
				}
			]
		},
		{
			"ID": "20240701145145-kxfha08",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-kxfha08",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20240701145145-gne9svj"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240701145145-xqddc5z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-xqddc5z",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用Valgrind检查内存泄露"
				}
			]
		},
		{
			"ID": "20240701145145-2o0o7jn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-2o0o7jn",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "valgrind 是一个强大的内存检查工具，它可以帮助开发者检测运行时内存管理问题，例如内存泄漏、未初始化的内存访问和不正确的内存释放。"
				}
			]
		},
		{
			"ID": "20240701145145-9ip1s81",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-9ip1s81",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们有以下 C 代码 memory_test.c："
				}
			]
		},
		{
			"ID": "20240701145145-ldee4ii",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-ldee4ii",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdlib.h\u003e\n\n\nvoid alloc_memory() {\n    char *ptr = malloc(10);  // 分配内存而未释放\n    ptr[0] = 'a';           // 使用已分配的内存\n}  // 内存泄漏发生在这里，因为我们没有调用 free()\n\n\nint main() {\n    alloc_memory();\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-g5g9j7w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-g5g9j7w",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以使用以下命令编译（不需要特殊的编译标志）："
				}
			]
		},
		{
			"ID": "20240701145145-58d0cjw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-58d0cjw",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gcc -o memory_test memory_test.c\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-pr8b2ta",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-pr8b2ta",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后使用  运行这个程序帮助诊断内存问题："
				}
			]
		},
		{
			"ID": "20240701145145-j0nvp44",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240701145145-j0nvp44",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "valgrind --leak-check=yes ./memory_test\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240701145145-vm9q23u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-vm9q23u",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "--leak-check=yes 选项告诉 valgrind 输出有关内存泄漏的信息。valgrind 将会执行程序并报告发现的任何内存问题，包括哪些内存未被释放和可能的泄漏源。"
				}
			]
		},
		{
			"ID": "20240701145145-s9edly9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-s9edly9",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20240701145145-xy732gw"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240701145145-gohzss0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-gohzss0",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7"
				}
			]
		},
		{
			"ID": "20240701145145-9yyadjb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-9yyadjb",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "小结"
				}
			]
		},
		{
			"ID": "20240701145145-xz19v4m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-xz19v4m",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作为一个志向成为调试专家的程序员，弄清楚一个错综复杂的bug所在，正是展现你技术深度和广度的时候。"
				}
			]
		},
		{
			"ID": "20240701145145-n5zssna",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-n5zssna",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "了解并掌握GDB这位可靠的伙伴的深层技能，就如同让你拥有了一把锁喉刃，无论故障多么隐秘或问题多么棘手，你都能直击要害。"
				}
			]
		},
		{
			"ID": "20240701145145-bhlw9w9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-bhlw9w9",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过本文，你已经更加了解了GDB的高级调试技巧，它们将作为你解决复杂问题的利器。不要害怕深入代码的内部世界，使用这些高阶调试技巧，相信你很快就可以从调试新手成为真正的调试专家。掌控程序的命运，让那些潜伏的bug无处隐藏！"
				}
			]
		},
		{
			"ID": "20240701145145-iwijiuq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240701145145-iwijiuq",
				"updated": "20240701145145"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "更多高级功能待您实践"
				}
			]
		}
	]
}