{
	"ID": "20221227022910-phb1tkz",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221227022910-phb1tkz",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20221227023918-1d911gi\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230613111839-1fnp79f\u0026quot;,\u0026quot;scrollTop\u0026quot;:3800,\u0026quot;focusId\u0026quot;:\u0026quot;20221227025248-48s809z\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "containerd",
		"updated": "20230613111839"
	},
	"Children": [
		{
			"ID": "20221227023918-1d911gi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221227023918-1d911gi",
				"updated": "20221227023920"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=github\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "github"
				},
				{
					"Type": "NodeText",
					"Data": ": ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/containerd/containerd",
					"TextMarkTextContent": "https://github.com/containerd/containerd"
				}
			]
		},
		{
			"ID": "20221227022910-xlzle4j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221227022910-xlzle4j",
				"updated": "20221227023859"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkText",
							"Data": "image",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221227023859-xo28izv.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				}
			]
		},
		{
			"ID": "20221227023913-j8wwqch",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221227023913-j8wwqch",
				"updated": "20221227023954"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "1. 前言",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024001-3eyb7sa",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20221227024001-3eyb7sa",
				"updated": "20221227024108"
			},
			"Children": [
				{
					"ID": "20221227024008-2pbfqkz",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20221227024008-2pbfqkz",
						"updated": "20221227024016"
					},
					"Children": [
						{
							"ID": "20221227024016-upadgbn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221227024016-upadgbn",
								"updated": "20221227024016"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "dockerd 是 docker engine 守护进程，dockerd 启动时会启动 containerd 子进程，dockerd 与 containerd 通过 rpc 进行通信",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221227024016-e6btriz",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20221227024016-e6btriz",
						"updated": "20221227024016"
					},
					"Children": [
						{
							"ID": "20221227024033-qg99es5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221227024033-qg99es5",
								"updated": "20221227024033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ctr 是 containerd 的 cli",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221227024057-dqjr34u",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20221227024057-dqjr34u",
						"updated": "20221227024057"
					},
					"Children": [
						{
							"ID": "20221227024057-xkci8ru",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221227024057-xkci8ru",
								"updated": "20221227024101"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "containerd 通过 shim 操作 runc，runc 真正控制容器生命周期，启动一个容器就会启动一个 shim 进程",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221227024102-av0p5x1",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20221227024102-av0p5x1",
						"updated": "20221227024108"
					},
					"Children": [
						{
							"ID": "20221227024102-y7q0d5i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221227024102-y7q0d5i",
								"updated": "20221227024108"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "shim 直接调用 runc 的包函数,shim 与 containerd 之前通过 rpc 通信"
								}
							]
						}
					]
				},
				{
					"ID": "20221227024109-fwq6kpw",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20221227024109-fwq6kpw",
						"updated": "20221227024109"
					},
					"Children": [
						{
							"ID": "20221227024109-ivz0ad4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221227024109-ivz0ad4",
								"updated": "20221227024109"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "真正用户想启动的进程由 runc 的 init 进程启动，即 runc init [args ...]",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221227023938-fzpm0da",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221227023938-fzpm0da",
				"updated": "20221227024150"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker     ctr\n  |         |\n  V         V\ndockerd -\u003e containerd ---\u003e shim -\u003e runc -\u003e runc init -\u003e process\n                      |-- \u003e shim -\u003e runc -\u003e runc init -\u003e process\n                      +-- \u003e shim -\u003e runc -\u003e runc init -\u003e process\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024350-lh6twr5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221227024350-lh6twr5",
				"updated": "20221227024351"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "containerd 只是一个守护进程，容器的实际运行时由 runC 控制。",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "em strong",
					"TextMarkTextContent": "containerd 主要职责是镜像管理（镜像、元信息等）、容器执行"
				},
				{
					"Type": "NodeText",
					"Data": "（调用最终运行时组件执行）",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024423-yth4miu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221227024423-yth4miu",
				"updated": "20221227024423"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkText",
							"Data": "image",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221227024423-1aw2ge0.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024318-fw7pkdr",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221227024318-fw7pkdr",
				"updated": "20221227024325"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "2. 源码编译",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024326-yk0p96u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221227024326-yk0p96u",
				"updated": "20221227024334"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要安装依赖包：btrfs-tools，直接 make 即可生成 ctr containerd containerd-shim binaries 可执行文件",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024456-iyte9bj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221227024456-iyte9bj",
				"updated": "20221227024508"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "2.1 containerd main 函数",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024544-yawgxni",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221227024544-yawgxni",
				"updated": "20221227024544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "入口目录为 cmd/containerd/main.go 中 main 函数，默认配置文件 /etc/containerd/config.toml，包含三个子命令，configCommand，publishCommand，ociHook",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024532-uts2jjf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221227024532-uts2jjf",
				"updated": "20221227024629"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func main() {\n\tapp := command.App()\n\tif err := app.Run(os.Args); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"containerd: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227024631-1ztw1qv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221227024631-1ztw1qv",
				"updated": "20221227025234"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "2.1.1 command App 函数",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221227025248-48s809z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"fold": "0",
				"id": "20221227025248-48s809z",
				"updated": "20221227083959"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//  App 函数返回 *cli.App 实例\nfunc App() *cli.App {\n\tapp := cli.NewApp()\n\tapp.Name = \"containerd\"\n\tapp.Version = version.Version\n\tapp.Usage = usage\n\tapp.Description = `\ncontainerd is a high performance container runtime whose daemon can be started\nby using this command. If none of the *config*, *publish*, or *help* commands\nare specified, the default action of the **containerd** command is to start the\ncontainerd daemon in the foreground.\n\n\nA default configuration is used if no TOML configuration is specified or located\nat the default file location. The *containerd config* command can be used to\ngenerate the default configuration for containerd. The output of that command\ncan be used and modified as necessary as a custom configuration.`\n// 如果未指定 TOML 配置或位于默认文件位置，则使用默认配置。容器配置命令可用于生成容器的默认配置。该命令的输出可以根据需要作为自定义配置使用和修改\n\tapp.Flags = []cli.Flag{\n\t\tcli.StringFlag{\n\t\t\tName:  \"config,c\",\n\t\t\tUsage: \"path to the configuration file\",\n\t\t\tValue: filepath.Join(defaults.DefaultConfigDir, \"config.toml\"),\n\t\t},\n\t\tcli.StringFlag{\n\t\t\tName:  \"log-level,l\",\n\t\t\tUsage: \"set the logging level [trace, debug, info, warn, error, fatal, panic]\",\n\t\t},\n\t\tcli.StringFlag{\n\t\t\tName:  \"address,a\",\n\t\t\tUsage: \"address for containerd's GRPC server\",\n\t\t},\n\t\tcli.StringFlag{\n\t\t\tName:  \"root\",\n\t\t\tUsage: \"containerd root directory\",\n\t\t},\n\t\tcli.StringFlag{\n\t\t\tName:  \"state\",\n\t\t\tUsage: \"containerd state directory\",\n\t\t},\n\t}\n\tapp.Flags = append(app.Flags, serviceFlags()...)\n\t// configCommand 用于生成配置文件 containerd config default \u003e /etc/containerd/config.toml，publishCommand，ociHook  \n\t// publishCommand 二进制方式推送数据到containerd\n\t// ociHook 为 OCI 运行时钩子提供基础，以允许注入参数\n       \tapp.Commands = []cli.Command{\n\t\tconfigCommand,\n\t\tpublishCommand,\n\t\tociHook,\n\t}\n\t//未指定子命令时要执行的操作 \n        // 需要“cli.ActionFunc”，但可以接受“func（cli.Context） {}” \n\t// 注意：对已弃用的“Action”的支持将在将来的版本中删除\n\tapp.Action = func(context *cli.Context) error {\n\t\tvar (\n\t\t\tstart       = time.Now()\n\t\t\tsignals     = make(chan os.Signal, 2048)\n\t\t\tserverC     = make(chan *server.Server, 1)\n\t\t\tctx, cancel = gocontext.WithCancel(gocontext.Background())\n\t\t\tconfig      = defaultConfig()\n\t\t)\n\n\t\tdefer cancel()\n\n \t\t// 仅当配置存在或用户明确告诉我们加载此路径时，才尝试加载配置。\n\t\tconfigPath := context.GlobalString(\"config\")\n\t\t_, err := os.Stat(configPath)\n\t\tif !os.IsNotExist(err) || context.GlobalIsSet(\"config\") {\n\t\t\tif err := srvconfig.LoadConfig(configPath, config); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\t// 将传入参数应用于配置\n\t\tif err := applyFlags(context, config); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t//  确定根目录被创建\n\t\tif err := server.CreateTopLevelDirectories(config); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Stop if we are registering or unregistering against Windows SCM.\n\t\tstop, err := registerUnregisterService(config.Root)\n\t\tif err != nil {\n\t\t\tlogrus.Fatal(err)\n\t\t}\n\t\tif stop {\n\t\t\treturn nil\n\t\t}\n\n\t\tdone := handleSignals(ctx, signals, serverC, cancel)\n\t\t// start the signal handler as soon as we can to make sure that\n\t\t// we don't miss any signals during boot\n\t\tsignal.Notify(signals, handledSignals...)\n\n\t\t// 清理挂载点\n\t\tif err := mount.SetTempMountLocation(filepath.Join(config.Root, \"tmpmounts\")); err != nil {\n\t\t\treturn fmt.Errorf(\"creating temp mount location: %w\", err)\n\t\t}\n\t\t// unmount all temp mounts on boot for the server\n\t\twarnings, err := mount.CleanupTempMounts(0)\n\t\tif err != nil {\n\t\t\tlog.G(ctx).WithError(err).Error(\"unmounting temp mounts\")\n\t\t}\n\t\tfor _, w := range warnings {\n\t\t\tlog.G(ctx).WithError(w).Warn(\"cleanup temp mount\")\n\t\t}\n\t\t// 配置文件中grpc address 不能为空\n\t\tif config.GRPC.Address == \"\" {\n\t\t\treturn fmt.Errorf(\"grpc address cannot be empty: %w\", errdefs.ErrInvalidArgument)\n\t\t}\n\t\tif config.TTRPC.Address == \"\" {\n\t\t\t// If TTRPC was not explicitly configured, use defaults based on GRPC.\n\t\t\tconfig.TTRPC.Address = fmt.Sprintf(\"%s.ttrpc\", config.GRPC.Address)\n\t\t\tconfig.TTRPC.UID = config.GRPC.UID\n\t\t\tconfig.TTRPC.GID = config.GRPC.GID\n\t\t}\n\t\tlog.G(ctx).WithFields(logrus.Fields{\n\t\t\t\"version\":  version.Version,\n\t\t\t\"revision\": version.Revision,\n\t\t}).Info(\"starting containerd\")\n\n\t\ttype srvResp struct {\n\t\t\ts   *server.Server\n\t\t\terr error\n\t\t}\n\n\t\t// run server initialization in a goroutine so we don't end up blocking important things like SIGTERM handling\n\t\t// while the server is initializing.\n\t\t// As an example opening the bolt database will block forever if another containerd is already running and containerd\n\t\t// will have to be be `kill -9`'ed to recover.\n\t\t// 在 goroutine 中运行服务器初始化，这样我们就不会在服务器初始化时阻止重要的事情，例如 SIGTERM 处理。\n                // 例如，如果另一个 containerd 已经在运行，则打开 bolt 数据库将永远阻塞，并且 containerd 必须被“kill -9”才能恢复。\n\t\tchsrv := make(chan srvResp)\n\t\tgo func() {\n\t\t\tdefer close(chsrv)\n\n\t\t\tserver, err := server.New(ctx, config)\n\t\t\tif err != nil {\n\t\t\t\tselect {\n\t\t\t\tcase chsrv \u003c- srvResp{err: err}:\n\t\t\t\tcase \u003c-ctx.Done():\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Launch as a Windows Service if necessary\n\t\t\tif err := launchService(server, done); err != nil {\n\t\t\t\tlogrus.Fatal(err)\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase \u003c-ctx.Done():\n\t\t\t\tserver.Stop()\n\t\t\tcase chsrv \u003c- srvResp{s: server}:\n\t\t\t}\n\t\t}()\n\n\t\tvar server *server.Server\n\t\tselect {\n\t\tcase \u003c-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase r := \u003c-chsrv:\n\t\t\tif r.err != nil {\n\t\t\t\treturn r.err\n\t\t\t}\n\t\t\tserver = r.s\n\t\t}\n\n\t\t// We don't send the server down serverC directly in the goroutine above because we need it lower down.\n\t\tselect {\n\t\tcase \u003c-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase serverC \u003c- server:\n\t\t}\n\n\t\tif config.Debug.Address != \"\" {\n\t\t\tvar l net.Listener\n\t\t\tif isLocalAddress(config.Debug.Address) {\n\t\t\t\tif l, err = sys.GetLocalListener(config.Debug.Address, config.Debug.UID, config.Debug.GID); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"failed to get listener for debug endpoint: %w\", err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif l, err = net.Listen(\"tcp\", config.Debug.Address); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"failed to get listener for debug endpoint: %w\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tserve(ctx, l, server.ServeDebug)\n\t\t}\n\t\tif config.Metrics.Address != \"\" {\n\t\t\tl, err := net.Listen(\"tcp\", config.Metrics.Address)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to get listener for metrics endpoint: %w\", err)\n\t\t\t}\n\t\t\tserve(ctx, l, server.ServeMetrics)\n\t\t}\n\t\t// setup the ttrpc endpoint\n\t\ttl, err := sys.GetLocalListener(config.TTRPC.Address, config.TTRPC.UID, config.TTRPC.GID)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to get listener for main ttrpc endpoint: %w\", err)\n\t\t}\n\t\tserve(ctx, tl, server.ServeTTRPC)\n\n\t\tif config.GRPC.TCPAddress != \"\" {\n\t\t\tl, err := net.Listen(\"tcp\", config.GRPC.TCPAddress)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to get listener for TCP grpc endpoint: %w\", err)\n\t\t\t}\n\t\t\tserve(ctx, l, server.ServeTCP)\n\t\t}\n\t\t// setup the main grpc endpoint\n\t\tl, err := sys.GetLocalListener(config.GRPC.Address, config.GRPC.UID, config.GRPC.GID)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to get listener for main endpoint: %w\", err)\n\t\t}\n\t\tserve(ctx, l, server.ServeGRPC)\n\n\t\tif err := notifyReady(ctx); err != nil {\n\t\t\tlog.G(ctx).WithError(err).Warn(\"notify ready failed\")\n\t\t}\n\n\t\tlog.G(ctx).Infof(\"containerd successfully booted in %fs\", time.Since(start).Seconds())\n\t\t\u003c-done\n\t\treturn nil\n\t}\n\treturn app\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221227084001-q9hrbvf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221227084001-q9hrbvf",
				"updated": "20221227084029"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 server.New 函数创建以及初始化 containerd server"
				}
			]
		},
		{
			"ID": "20221227084713-56upxkk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221227084713-56upxkk",
				"updated": "20221227084729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.1 初始化 contaienrd server，加载 timeout 配置"
				}
			]
		},
		{
			"ID": "20221227084122-3ohv6n1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221227084122-3ohv6n1",
				"updated": "20221227084617"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func New(ctx context.Context, config *srvconfig.Config) (*Server, error) {\n\tif err := apply(ctx, config); err != nil {\n\t\treturn nil, err\n\t}\n\tfor key, sec := range config.Timeouts {\n\t\td, err := time.ParseDuration(sec)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to parse %s into a time duration\", sec)\n\t\t}\n\t\ttimeout.Set(key, d)\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221227084422-siujjmj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221227084422-siujjmj",
				"updated": "20221227084519"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[timeouts]\n  \"io.containerd.timeout.shim.cleanup\" = \"5s\"\n  \"io.containerd.timeout.shim.load\" = \"5s\"\n  \"io.containerd.timeout.shim.shutdown\" = \"3s\"\n  \"io.containerd.timeout.task.state\" = \"2s\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221227084733-jekwatx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221227084733-jekwatx",
				"updated": "20221227084754"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.2 LoadPlugins 加载插件"
				}
			]
		},
		{
			"ID": "20221227084846-ljj3t0u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221227084846-ljj3t0u",
				"updated": "20221227085151"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n// LoadPlugins loads all plugins into containerd and generates an ordered graph\n// of all plugins.\nfunc LoadPlugins(ctx context.Context, config *srvconfig.Config) ([]*plugin.Registration, error) {\n\t// load all plugins into containerd\n\tpath := config.PluginDir\n\tif path == \"\" {\n\t\tpath = filepath.Join(config.Root, \"plugins\")\n\t}\n\tif err := plugin.Load(path); err != nil {\n\t\treturn nil, err\n\t}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221227085055-4nqo1gw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221227085055-4nqo1gw",
				"updated": "20221227085114"
			},
			"Children": [
				{
					"ID": "20221227085109-jcjyspr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221227085109-jcjyspr",
						"updated": "20221227085114"
					},
					"Children": [
						{
							"ID": "20221227085109-fuisp0b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221227085109-fuisp0b",
								"updated": "20221227085114"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "注册插件 io.containerd.content.v1，"
								},
								{
									"Type": "NodeText",
									"Data": " store 结构体 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "实现了 Store 接口"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221227085125-0zituqi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221227085125-0zituqi",
				"updated": "20221227085135"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "路径 containerd/content/local/store.go\n\n// Store combines the methods of content-oriented interfaces into a set that\n// are commonly provided by complete implementations.\ntype Store interface {\n    Manager\n    Provider\n    IngestManager\n    Ingester\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221227085152-45niij9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221227085152-45niij9",
				"updated": "20221227085154"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// load additional plugins that don't automatically register themselves\n\tplugin.Register(\u0026plugin.Registration{\n\t\tType: plugin.ContentPlugin,\n\t\tID:   \"content\",\n\t\tInitFn: func(ic *plugin.InitContext) (interface{}, error) {\n\t\t\tic.Meta.Exports[\"root\"] = ic.Root\n\t\t\treturn local.NewStore(ic.Root)\n\t\t},\n\t})\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230613111821-c4f0sw6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230613111821-c4f0sw6",
				"updated": "20230613111835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.流程图大纲如下"
				}
			]
		},
		{
			"ID": "20230613111836-7ozkh53",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230613111836-7ozkh53",
				"updated": "20230613111836"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230613111836-qhxb8wm.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230613111839-1fnp79f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230613111839-1fnp79f"
			}
		}
	]
}