{
	"ID": "20230419170600-pqq22my",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230419170600-pqq22my",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230419170600-5o40xry\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230419191025-kn9tihe\u0026quot;,\u0026quot;scrollTop\u0026quot;:400,\u0026quot;focusId\u0026quot;:\u0026quot;20230419190918-qmy1e0c\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "Pushgateway使用",
		"updated": "20230419191318"
	},
	"Children": [
		{
			"ID": "20230419170600-5o40xry",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230419170600-5o40xry",
				"updated": "20230419170600"
			}
		},
		{
			"ID": "20230419170600-6gi8m1l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230419170600-6gi8m1l",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接口地址："
				}
			]
		},
		{
			"ID": "20230419170600-ce7bj5d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419170600-ce7bj5d",
				"updated": "20230419191318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "url："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://pushgateway.ceclouddyn.com:9091/",
					"TextMarkTextContent": "http://pushgateway.xxx.com:9091"
				}
			]
		},
		{
			"ID": "20230419170600-kwsafcw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419170600-kwsafcw",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "basic认证：pushgateway:AYTU9!sxWi"
				}
			]
		},
		{
			"ID": "20230419170600-tnze9to",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230419170600-tnze9to",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用方式："
				}
			]
		},
		{
			"ID": "20230419170600-b8jftr1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419170600-b8jftr1",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正常情况我们会使用 Client SDK 推送数据到 pushgateway, 但是我们还可以通过 API 来管理"
				}
			]
		},
		{
			"ID": "20230419170600-ro96xi2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419170600-ro96xi2",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230419190756-54dypye",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230419190756-54dypye",
				"updated": "20230419190805"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "echo \"some_metric 3.14\" | curl --data-binary @- \u003chttp://pushgateway.example.org:9091/metrics/job/some_job\u003e\n#  --data-binary 表示发送二进制数据，使用POST方式发送数据\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230419190831-lvguhhr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230419190831-lvguhhr",
				"updated": "20230419190840"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "echo \"ecs_base_vcpu_seconds{id=\\\"0\\\", instance=\\\"ecs-pr0y3y403u8gs8\\\", instanceType=\\\"ecs\\\", job=\\\"base-monitoring\\\", state=\\\"running\\\"} 1000\" | curl --data-binary @- -u 'pushgateway:AYTU9!sxWi' http://10.253.109.209:31860/metrics/job/base-monitoring\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230419190831-ghmkdkb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230419190831-ghmkdkb",
				"updated": "20230419190850"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n#!/usr/bin/sh\nwhile true; do\n  reqStr=\"\"\n  for i in `seq -f \"%04g\" 1 20`; do\n    reqStr=\"$reqStr\\necs_base_vcpu_seconds{id=\\\"0\\\", instance=\\\"ecs-pr0030403u$i\\\", instanceType=\\\"ecs\\\", job=\\\"base-monitoring\\\", state=\\\"running\\\"} 100\"\n  done\n  echo $reqStr | curl -v --data-binary @- -u 'pushgateway:AYTU9!sxWi' http://10.253.109.209:31860/metrics/job/base-monitoring\n  sleep 30\ndone\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230419170600-quc0n65",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419170600-quc0n65",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当指标数据过多时，不建议使用以上方式。可能会因为数据格式的问题，导致推送失败。"
				}
			]
		},
		{
			"ID": "20230419170600-4lba70t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419170600-4lba70t",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般建议使用Client SDK 推送数据。可参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://prometheus.io/docs/instrumenting/pushing/",
					"TextMarkTextContent": "官方示例"
				},
				{
					"Type": "NodeText",
					"Data": "，选择对应语言的Client SDK进行指标的封装和推送。"
				}
			]
		},
		{
			"ID": "20230419170600-jyrih5f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419170600-jyrih5f",
				"updated": "20230419170600"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "示例代码："
				}
			]
		},
		{
			"ID": "20230419190918-qmy1e0c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230419190918-qmy1e0c",
				"updated": "20230419190926"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# Push方式\npackage main\n \nimport (\n    \"fmt\"\n \n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/push\"\n)\n \nfunc main() {\n    completionTime := prometheus.NewGauge(prometheus.GaugeOpts{\n        Name: \"db_backup_last_completion_timestamp_seconds\",\n        Help: \"The timestamp of the last successful completion of a DB backup.\",\n    })\n    completionTime.SetToCurrentTime()\n    if err := push.New(\"http://pushgateway:9091\", \"db_backup\").\n        Collector(completionTime).\n        Grouping(\"db\", \"customers\").\n        Push(); err != nil {\n        fmt.Println(\"Could not push completion time to Pushgateway:\", err)\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230419170600-8wrqfek",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230419170600-8wrqfek",
				"updated": "20230419191046"
			},
			"Children": [
				{
					"ID": "20230419191026-qm7ex5i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230419191026-qm7ex5i",
						"updated": "20230419191046"
					},
					"Children": [
						{
							"ID": "20230419191026-eb039hj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230419191026-eb039hj",
								"updated": "20230419191026"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Add方式"
								}
							]
						},
						{
							"ID": "20230419191034-ii8vamv",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230419191034-ii8vamv",
								"updated": "20230419191046"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "package main\n \nimport (\n    \"fmt\"\n    \"time\"\n \n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/push\"\n)\n \nvar (\n    completionTime = prometheus.NewGauge(prometheus.GaugeOpts{\n        Name: \"db_backup_last_completion_timestamp_seconds\",\n        Help: \"The timestamp of the last completion of a DB backup, successful or not.\",\n    })\n    successTime = prometheus.NewGauge(prometheus.GaugeOpts{\n        Name: \"db_backup_last_success_timestamp_seconds\",\n        Help: \"The timestamp of the last successful completion of a DB backup.\",\n    })\n    duration = prometheus.NewGauge(prometheus.GaugeOpts{\n        Name: \"db_backup_duration_seconds\",\n        Help: \"The duration of the last DB backup in seconds.\",\n    })\n    records = prometheus.NewGauge(prometheus.GaugeOpts{\n        Name: \"db_backup_records_processed\",\n        Help: \"The number of records processed in the last DB backup.\",\n    })\n)\n \nfunc performBackup() (int, error) {\n    // Perform the backup and return the number of backed up records and any\n    // applicable error.\n    // ...\n    return 42, nil\n}\n \nfunc main() {\n    // We use a registry here to benefit from the consistency checks that\n    // happen during registration.\n    registry := prometheus.NewRegistry()\n    registry.MustRegister(completionTime, duration, records)\n    // Note that successTime is not registered.\n \n    pusher := push.New(\"http://pushgateway:9091\", \"db_backup\").Gatherer(registry)\n \n    start := time.Now()\n    n, err := performBackup()\n    records.Set(float64(n))\n    // Note that time.Since only uses a monotonic clock in Go1.9+.\n    duration.Set(time.Since(start).Seconds())\n    completionTime.SetToCurrentTime()\n    if err != nil {\n        fmt.Println(\"DB backup failed:\", err)\n    } else {\n        // Add successTime to pusher only in case of success.\n        // We could as well register it with the registry.\n        // This example, however, demonstrates that you can\n        // mix Gatherers and Collectors when handling a Pusher.\n        pusher.Collector(successTime)\n        successTime.SetToCurrentTime()\n    }\n    // Add is used here rather than Push to not delete a previously pushed\n    // success timestamp in case of a failure of this backup.\n    if err := pusher.Add(); err != nil {\n        fmt.Println(\"Could not push to Pushgateway:\", err)\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230419191025-kn9tihe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419191025-kn9tihe"
			}
		}
	]
}