{
	"ID": "20230331151920-xmflr0h",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230331151920-xmflr0h",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230331151920-pkm8w7h\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230331155753-kb42ox3\u0026quot;,\u0026quot;scrollTop\u0026quot;:3395,\u0026quot;focusId\u0026quot;:\u0026quot;20230331155753-kb42ox3\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "001 Prometheus搭建部署及官网翻译",
		"updated": "20230331155753"
	},
	"Children": [
		{
			"ID": "20230331151920-pkm8w7h",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230331151920-pkm8w7h",
				"updated": "20230331152006"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. Prometheus安装与介绍"
				}
			]
		},
		{
			"ID": "20230331151952-3gojqdl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331151952-3gojqdl",
				"updated": "20230331151953"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Prometheus的官网："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://prometheus.io/",
					"TextMarkTextContent": "https://prometheus.io/"
				}
			]
		},
		{
			"ID": "20230331152021-tsi5axx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331152021-tsi5axx",
				"updated": "20230331152631"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1 OVERVIEW（概述总览）"
				}
			]
		},
		{
			"ID": "20230331152038-wehdq3e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152038-wehdq3e",
				"updated": "20230331152211"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.1 什么是Prometheus?"
				}
			]
		},
		{
			"ID": "20230331152054-s0i609a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152054-s0i609a",
				"updated": "20230331152057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "       Prometheus是最初在SoundCloud上构建的开源系统监视和警报工具包。 自2012年成立以来，许多公司和组织都采用了Prometheus，该项目拥有非常活跃的开发人员和用户社区。 现在，它是一个独立的开源项目，并且独立于任何公司进行维护。 为了强调这一点并阐明项目的治理结构，Prometheus于2016年加入了Cloud Native Computing Foundation，这是继Kubernetes之后的第二个托管项目。"
				}
			]
		},
		{
			"ID": "20230331152115-as496vo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152115-as496vo",
				"updated": "20230331152125"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.2  Features（特征）"
				}
			]
		},
		{
			"ID": "20230331152126-89jbezx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152126-89jbezx",
				"updated": "20230331152130"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Prometheus的主要特点是："
				}
			]
		},
		{
			"ID": "20230331152131-snervjy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331152131-snervjy",
				"updated": "20230331152138"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "一个多维数据模型，其中包含通过度量标准名称和key/value标识的时间序列数据\nPromQL，一种灵活的查询语言，可利用此维度\n不依赖分布式存储； 单服务器节点是自治的\n时间序列收集通过HTTP上的拉模型进行\n通过中间网关支持推送时间序列\n通过服务发现或静态配置发现目标\n多种图形和仪表板支持模式\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331152154-f2whvty",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152154-f2whvty",
				"updated": "20230331152222"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.3 Components（组件）"
				}
			]
		},
		{
			"ID": "20230331152222-dmfswat",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152222-dmfswat",
				"updated": "20230331152228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Prometheus生态系统包含多个组件，其中许多是可选的："
				}
			]
		},
		{
			"ID": "20230331152233-rcv2ioz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331152233-rcv2ioz",
				"updated": "20230331152233"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Prometheus主服务器，它会scrapes并存储时间序列数据\nclient libraries，用于检测应用程序代码\n一个支持短期工作的push gateway\n诸如HAProxy，StatsD，Graphite等服务的special-purpose exporters\nalertmanager以处理警报\n各种支持工具"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331152304-uhwm9uo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152304-uhwm9uo",
				"updated": "20230331152305"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大多数Prometheus组件都是用Go编写的，从而使其易于构建和部署为静态二进制文件。"
				}
			]
		},
		{
			"ID": "20230331152312-latuawy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152312-latuawy",
				"updated": "20230331152326"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.4 下图说明了Prometheus的体系结构及其某些生态系统组件："
				}
			]
		},
		{
			"ID": "20230331152332-2mtbfca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152332-2mtbfca",
				"updated": "20230331152333"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230331152333-olpkixk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230331152409-pwtk0rl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152409-pwtk0rl",
				"updated": "20230331152409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Prometheus直接或通过中间推送网关从已检测作业中删除指标，以用于短期作业。 它在本地存储所有报废的样本，并对这些数据运行规则，以汇总和记录现有数据中的新时间序列，或生成警报。 Grafana或其他API使用者可用于可视化收集的数据。"
				}
			]
		},
		{
			"ID": "20230331152412-5bez09x",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152412-5bez09x",
				"updated": "20230331152441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.4 什么时候使用它合适？"
				}
			]
		},
		{
			"ID": "20230331152500-9684274",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152500-9684274",
				"updated": "20230331152505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\tPrometheus非常适合记录任何纯数字时间序列。 它既适合以机器为中心的监视，也适合监视高度动态的面向服务的体系结构。 在微服务世界中，它对多维数据收集和查询的支持是一种特别的优势。"
				}
			]
		},
		{
			"ID": "20230331152500-lppmulq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152500-lppmulq",
				"updated": "20230331152500"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "       Prometheus的设计旨在提高可靠性，使其成为中断期间要使用的系统，从而使你能够快速诊断问题。 每个Prometheus服务器都是独立的，而不依赖于网络存储或其他远程服务。 当基础结构的其他部分损坏时，你可以依靠它，而无需建立广泛的基础结构来使用它。"
				}
			]
		},
		{
			"ID": "20230331152442-1pu6l38",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152442-1pu6l38",
				"updated": "20230331152454"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.5 什么时候使用它不适合？"
				}
			]
		},
		{
			"ID": "20230331152538-b5y9voi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152538-b5y9voi",
				"updated": "20230331152557"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "       Prometheus重视可靠性。 即使在故障情况下，你也始终可以查看有关系统的可用统计信息。 如果你需要100％的准确性（例如按请求计费），则Prometheus并不是一个不错的选择，因为所收集的数据可能不会足够详细和完整。 在这种情况下，最好使用其他系统来收集和分析计费数据，并使用Prometheus进行其余的监视。"
				}
			]
		},
		{
			"ID": "20230331152558-uvl4j16",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331152558-uvl4j16",
				"updated": "20230331152604"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2 Prometheus的安装"
				}
			]
		},
		{
			"ID": "20230331152638-b1qwfob",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152638-b1qwfob",
				"updated": "20230331152648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2.1 下载Prometheus并安装"
				}
			]
		},
		{
			"ID": "20230331152718-yjocyuo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331152718-yjocyuo",
				"updated": "20230331152727"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#wget [https://github.com/prometheus/prometheus/releases/download/v2.13.1/prometheus-2.13.1.linux-amd64.tar.gz](https://github.com/prometheus/prometheus/releases/download/v2.13.1/prometheus-2.13.1.linux-amd64.tar.gz)\n\n#tar zxf prometheus-2.13.1.linux-amd64.tar.gz\n\n#cd prometheus-2.13.1.linux-amd64\n\n#./prometheus --config.file=prometheus.yml \u0026  #能够在http://localhost:9090上浏览到有关其自身的状态页。 给它大约30秒的时间，以从其自己的HTTP指标终结点收集有关自身的数据。\n\n#netstat  -lntup|grep 9090\ntcp6       0      0 :::9090                 :::*                    LISTEN      30137/./prometheus\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331152733-4z6a08p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331152733-4z6a08p",
				"updated": "20230331152743"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "#./prometheus --help  #查看一下帮助文档"
				}
			]
		},
		{
			"ID": "20230331152746-lfoyse5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331152746-lfoyse5",
				"updated": "20230331152759"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "usage: prometheus [\u003cflags\u003e]\nThe Prometheus monitoring server\nFlags:\n--version  #显示应用程序版本。\n--config.file=\"prometheus.yml\"  #Prometheus配置文件路径。\n--web.listen-address=\"0.0.0.0:9090\"  #监听UI，API和telemetry的地址。\n--web.read-timeout=5m   #超时读取请求并关闭空闲连接之前的最大持续时间。\n--web.max-connections=512   #最大同时连接数。\n--web.external-url=\u003cURL\u003e    #可从外部访问Prometheus的URL（例如，如果Prometheus是通过反向代理提供的）。用于生成相对和绝对链接返回到Prometheus本身。如果URL包含路径部分，它将用于为所有HTTP端点添加前缀由Prometheus服务。如果省略，则会自动派生相关的URL组件。\n--web.route-prefix=\u003cpath\u003e   #Web端点内部路由的前缀。 默认为--web.external-url的路径。\n--web.user-assets=\u003cpath\u003e    #静态资产目录的路径，位于/user。\n--web.enable-lifecycle      #启用关机并通过HTTP请求重新加载。\n--web.enable-admin-api      #为admin控制操作启用API端点。\n--web.console.templates=\"consoles\"  #控制台模板目录的路径，位于/consoles。\n--web.console.libraries=\"console_libraries\"  #控制台库目录的路径。\n--web.page-title=\"Prometheus Time Series Collection and Processing Server\"   #Prometheus实例的文档标题。\n--web.cors.origin=\".*\"     #用于CORS来源的正则表达式。它已完全锚定。例如：'https?://(domain1|domain2)\\.com'\n--storage.tsdb.path=\"data/\"  #指标存储的基本路径\n--storage.tsdb.retention=STORAGE.TSDB.RETENTION   #[不建议使用]将样品保留多长时间。 此标志已被弃用，请改用“storage.tsdb.retention.time”。\n--storage.tsdb.retention.time=STORAGE.TSDB.RETENTION.TIME   #将样品保存多长时间。 设置此标志后，它将覆盖“storage.tsdb.retention”。 如果此标志或未设置“storage.tsdb.retention”或“storage.tsdb.retention.size”，保留时间默认为15d。\n--storage.tsdb.retention.size=STORAGE.TSDB.RETENTION.SIZE   #[实验性]可以为块存储的最大字节数。 支持的单位：KB，MB，GB，TB，PB。 该标志是实验性的并且可以在将来的版本中进行更改。\n--storage.tsdb.no-lockfile    #不要在数据目录中创建锁文件。\n--storage.tsdb.allow-overlapping-blocks    #[实验性]允许重叠的块，从而启用垂直压缩和垂直查询合并。\n--storage.tsdb.wal-compression    #压缩tsdb WAL。\n--storage.remote.flush-deadline=\u003cduration\u003e    #关闭或配置重新加载时等待冲洗样本的时间。\n--storage.remote.read-sample-limit=5e7     #在单个查询中通过远程读取接口返回的最大样本总数。0表示没有限制。此限制被忽略用于流式响应类型。\n--storage.remote.read-concurrent-limit=10    #并发远程读取调用的最大数目。 0表示没有限制。\n--storage.remote.read-max-bytes-in-frame=1048576    #编组之前用于流式传输远程读取响应类型的单个帧中的最大字节数。 请注意，客户端可能有也限制帧大小。 默认为protobuf建议的1MB。\n--rules.alert.for-outage-tolerance=1h    #Prometheus中断以恢复警报“for”状态的最长时间。\n--rules.alert.for-grace-period=10m    #警报和恢复的“for”状态之间的最短持续时间。 仅当配置的“for”时间大于宽限期。\n--rules.alert.resend-delay=1m    #将警报重新发送到Alertmanager之前等待的最短时间。\n--alertmanager.notification-queue-capacity=10000    #等待的Alertmanager通知的队列容量。\n--alertmanager.timeout=10s    #向Alertmanager发送警报的超时。\n--query.lookback-delta=5m    #在表达式求值期间检索指标的最大回溯持续时间。\n--query.timeout=2m    #查询中止之前可能要花费的最长时间。\n--query.max-concurrency=20    #并发执行的最大查询数。\n--query.max-samples=50000000     #单个查询可以加载到内存中的最大样本数。 请注意，如果查询尝试加载的样本超过此数量，则查询将失败内存中，因此这也限制了查询可以返回的样本数量。\n--log.level=info    #仅记录具有给定严重性或更高严重性的消息。 下列之一：[debug, info, warn, error]\n--log.format=logfmt    #日志消息的输出格式。 之一：[logfmt，json]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331152818-ygc413p",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331152818-ygc413p",
				"updated": "20230331152828"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2.2 Configuring Prometheus(配置Prometheus)："
				}
			]
		},
		{
			"ID": "20230331152833-w23orze",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331152833-w23orze",
				"updated": "20230331152835"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "global:\n  scrape_interval: 15s   #多久去采集一次数据\n  evaluation_interval: 15s   #多久对数据分析一次看是否有触发设置的报警值\n  \n  rule_files:\n  # - \"first.rules\"\n  # - \"second.rules\"\n  \n  scrape_configs:\n  - job_name: prometheus\n    static_configs:\n      - targets: ['localhost:9090']\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331153042-p3n4nhd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153042-p3n4nhd",
				"updated": "20230331153042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例配置文件中包含三个配置块：global，rule_files和scrape_configs。"
				}
			]
		},
		{
			"ID": "20230331153042-vvucv8e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153042-vvucv8e",
				"updated": "20230331153042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "       global block控制Prometheus服务器的全局配置。 我们有两个选择。 首先，scrape_interval控制Prometheus多久搜集一次目标。 可以为单个目标覆盖此目标。 在这种情况下，全局设置是每15秒一次。 Evaluation_interval选项控制Prometheus多久评估一次规则。 Prometheus使用规则来创建新的时间序列并生成警报。"
				}
			]
		},
		{
			"ID": "20230331153042-xuimaky",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153042-xuimaky",
				"updated": "20230331153042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "       rule_files块指定我们要Prometheus服务器加载的任何规则的位置。目前，还没有任何规则。"
				}
			]
		},
		{
			"ID": "20230331153042-dyzxu6o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153042-dyzxu6o",
				"updated": "20230331153042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "       最后一块scrape_configs控制Prometheus监视哪些资源。 由于Prometheus还将有关自身的数据公开为HTTP端点，因此它可以抓取并监视自身的运行状况。 在默认配置中，有一个称为prometheus的作业，它会搜索Prometheus服务器公开的时间序列数据。 该作业在端口9090上包含一个静态配置的目标localhost。Prometheus希望指标可用于/metrics路径上的目标。 因此，此默认作业是通过以下网址进行抓取："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://localhost:9090/metrics.",
					"TextMarkTextContent": "http://localhost:9090/metrics."
				}
			]
		},
		{
			"ID": "20230331153042-wnryyj3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153042-wnryyj3",
				"updated": "20230331153042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "       返回的时间序列数据将详细说明Prometheus服务器的状态和性能。有关配置选项的完整说明，请参阅配置文档（https://prometheus.io/docs/prometheus/latest/configuration/configuration/）。"
				}
			]
		},
		{
			"ID": "20230331153042-7gvmhgg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153042-7gvmhgg",
				"updated": "20230331153042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "      还可以通过导航到自己的指标终结点：http:// localhost:9090/metrics来验证Prometheus是否正在提供有关其自身的指标。"
				}
			]
		},
		{
			"ID": "20230331153153-tlgcesp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331153153-tlgcesp",
				"updated": "20230331153205"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2.3 使用表达式浏览器:"
				}
			]
		},
		{
			"ID": "20230331153216-tnjvosy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153216-tnjvosy",
				"updated": "20230331153216"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "  让我们尝试查看Prometheus收集的有关自身的一些数据.要使用Prometheus的内置表达式浏览器，请导航至http://localhost:9090/ graph，然后在“Graph”选项卡中选择“Console”视图。"
				}
			]
		},
		{
			"ID": "20230331153216-mi2r4li",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153216-mi2r4li",
				"updated": "20230331153216"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "      正如可以从"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://localhost:9090/metrics",
					"TextMarkTextContent": "http://localhost:9090/metrics"
				},
				{
					"Type": "NodeText",
					"Data": "  收集的那样，Prometheus导出的有关其自身的一个度量称为promhttp_metric_handler_requests_total（Prometheus服务器已处理的/metrics请求总数。继续并将其输入到表达式控制台中:promhttp_metric_handler_requests_total"
				}
			]
		},
		{
			"ID": "20230331153308-laqdfc0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153308-laqdfc0",
				"updated": "20230331153313"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230331153313-wm0m0ki.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230331153321-hlaox5z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153321-hlaox5z",
				"updated": "20230331153321"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "   如上图，这将返回多个不同的时间序列（以及每个时间序列的最新值），所有时间序列的度量标准名称均为promhttp_metric_handler_requests_total，但标签不同。 这些标签指定不同的请求状态。"
				}
			]
		},
		{
			"ID": "20230331153321-x7w723z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153321-x7w723z",
				"updated": "20230331153321"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "      如果我们只对导致HTTP代码200的请求感兴趣，则可以使用此查询来检索该信息：promhttp_metric_handler_requests_total{code=\"200\"}"
				}
			]
		},
		{
			"ID": "20230331153321-fauegfg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153321-fauegfg",
				"updated": "20230331153321"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "      要计算返回的时间序列数，可以编写：count(promhttp_metric_handler_requests_total)"
				}
			]
		},
		{
			"ID": "20230331153321-r1r4wvp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331153321-r1r4wvp",
				"updated": "20230331153321"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "      有关表达语言的更多信息，请参见表达语言文档：https://prometheus.io/docs/prometheus/latest/querying/basics/"
				}
			]
		},
		{
			"ID": "20230331155753-kb42ox3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331155753-kb42ox3",
				"updated": "20230331155753"
			}
		}
	]
}