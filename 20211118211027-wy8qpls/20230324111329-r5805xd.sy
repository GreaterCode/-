{
	"ID": "20230324111329-r5805xd",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230324111329-r5805xd",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230324111329-j6qf84s\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230324111329-y4pidud\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230324111329-75xw821\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "Go 语言编程 — go-restful RESTful 框架",
		"updated": "20230330165119"
	},
	"Children": [
		{
			"ID": "20230324111329-j6qf84s",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230324111329-j6qf84s"
			}
		},
		{
			"ID": "20230324111329-mm9ayme",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-mm9ayme"
			},
			"Children": [
				{
					"ID": "20230324111329-3b7c73e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-3b7c73e"
					},
					"Children": [
						{
							"ID": "20230324111329-8snsrv7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-8snsrv7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020",
									"TextMarkTextContent": "https://blog.csdn.net/Jmilk/article/details/108033020"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-kgqsmhu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-kgqsmhu"
					},
					"Children": [
						{
							"ID": "20230324111329-75xw821",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-75xw821"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "目录文章目录目录一个 RESTful API 框架需要什么？go-restful核心概念RouteWebServiceContainer过滤器（Filter）响应编码（Response Encoding）代码示例一代码示例二一个 RESTful API 框架需要什么？从应用程序开发的角度来看，RESTful API 的本质是一个 Web Application，而 RESTful API 框架就是实现这个 Web Application 所封装的一些列工具库，使开发者可以忽略底层实现的复杂度，专注以自"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-ev2vmwl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-ev2vmwl"
					},
					"Children": [
						{
							"ID": "20230324111329-dyjn7yf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-dyjn7yf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-03-24 11:13:29"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-vw9xzr7",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230324111329-vw9xzr7"
			}
		},
		{
			"ID": "20230324111329-jmt2i1l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-jmt2i1l"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目录"
				}
			]
		},
		{
			"ID": "20230324111329-z7fm6v5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230324111329-z7fm6v5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "文章目录"
				}
			]
		},
		{
			"ID": "20230324111329-x0oseb4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-x0oseb4"
			},
			"Children": [
				{
					"ID": "20230324111329-23zi4sb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-23zi4sb"
					},
					"Children": [
						{
							"ID": "20230324111329-iwpaij7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-iwpaij7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#_0",
									"TextMarkTextContent": "目录"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-nxum137",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-nxum137"
					},
					"Children": [
						{
							"ID": "20230324111329-rtfe9g4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-rtfe9g4"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#_RESTful_API__3",
									"TextMarkTextContent": "一个 RESTful API 框架需要什么？"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-0vh5m4g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-0vh5m4g"
					},
					"Children": [
						{
							"ID": "20230324111329-dooh6io",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-dooh6io"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#gorestful_16",
									"TextMarkTextContent": "go-restful"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-f49vvse",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-f49vvse"
					},
					"Children": [
						{
							"ID": "20230324111329-jqv62gr",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230324111329-jqv62gr"
							},
							"Children": [
								{
									"ID": "20230324111329-x2vian1",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230324111329-x2vian1"
									},
									"Children": [
										{
											"ID": "20230324111329-ub4jze4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230324111329-ub4jze4"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#_38",
													"TextMarkTextContent": "核心概念"
												}
											]
										}
									]
								},
								{
									"ID": "20230324111329-ajluro7",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230324111329-ajluro7"
									},
									"Children": [
										{
											"ID": "20230324111329-z64ilq0",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230324111329-z64ilq0"
											},
											"Children": [
												{
													"ID": "20230324111329-ljjyaqo",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230324111329-ljjyaqo"
													},
													"Children": [
														{
															"ID": "20230324111329-xrm5eai",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230324111329-xrm5eai"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#Route_42",
																	"TextMarkTextContent": "Route"
																}
															]
														}
													]
												},
												{
													"ID": "20230324111329-iuwprqh",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230324111329-iuwprqh"
													},
													"Children": [
														{
															"ID": "20230324111329-k18a8fx",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230324111329-k18a8fx"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#WebService_49",
																	"TextMarkTextContent": "WebService"
																}
															]
														}
													]
												},
												{
													"ID": "20230324111329-cqrdo4d",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230324111329-cqrdo4d"
													},
													"Children": [
														{
															"ID": "20230324111329-xj8mk14",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230324111329-xj8mk14"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#Container_57",
																	"TextMarkTextContent": "Container"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230324111329-q2zpydh",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230324111329-q2zpydh"
									},
									"Children": [
										{
											"ID": "20230324111329-eqplm4u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230324111329-eqplm4u"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#Filter_83",
													"TextMarkTextContent": "过滤器（Filter）"
												}
											]
										}
									]
								},
								{
									"ID": "20230324111329-0x08gcr",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230324111329-0x08gcr"
									},
									"Children": [
										{
											"ID": "20230324111329-4h5oimu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230324111329-4h5oimu"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#Response_Encoding_130",
													"TextMarkTextContent": "响应编码（Response Encoding）"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-ip614g5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-ip614g5"
					},
					"Children": [
						{
							"ID": "20230324111329-au5fbe2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-au5fbe2"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#_141",
									"TextMarkTextContent": "代码示例一"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-bjflgzi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-bjflgzi"
					},
					"Children": [
						{
							"ID": "20230324111329-w35ebja",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-w35ebja"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/Jmilk/article/details/108033020#_277",
									"TextMarkTextContent": "代码示例二"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-58u6m6d",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-58u6m6d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=RESTful\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "RESTful"
				},
				{
					"Type": "NodeText",
					"Data": " API 框架需要什么？"
				}
			]
		},
		{
			"ID": "20230324111329-6plvhz9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-6plvhz9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从应用程序开发的角度来看，RESTful API 的本质是一个 Web Application，而 RESTful API 框架就是实现这个 Web Application 所封装的一些列工具库，使开发者可以忽略底层实现的复杂度，专注以自身 Application 的逻辑设计。"
				}
			]
		},
		{
			"ID": "20230324111329-314nywo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-314nywo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个 RESTful API 框架应该具备以下几个元素："
				}
			]
		},
		{
			"ID": "20230324111329-8mh6dle",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-8mh6dle"
			},
			"Children": [
				{
					"ID": "20230324111329-ll37oix",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-ll37oix"
					},
					"Children": [
						{
							"ID": "20230324111329-fhy1xtq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-fhy1xtq"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Resources"
								},
								{
									"Type": "NodeText",
									"Data": " ：资源的定义，即 HTTP URI（或称之为 HTTP URL Path）的定义。RESTful API 的设计围绕着 Resource 进行建模。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-jvba80x",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-jvba80x"
					},
					"Children": [
						{
							"ID": "20230324111329-4d39xoi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-4d39xoi"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Handlers"
								},
								{
									"Type": "NodeText",
									"Data": " ：资源处理器，是资源业务逻辑处理的具体实现。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-qe6aefa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-qe6aefa"
					},
					"Children": [
						{
							"ID": "20230324111329-bp5dds1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-bp5dds1"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Request Routers"
								},
								{
									"Type": "NodeText",
									"Data": " ：资源请求路由器，完成 HTTP URIs、HTTP Request Methods 和 Handlers 三者之间的映射与路由。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-1zvumdr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-1zvumdr"
					},
					"Children": [
						{
							"ID": "20230324111329-r2wrnck",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-r2wrnck"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Request Verification Schemas"
								},
								{
									"Type": "NodeText",
									"Data": " ：HTTP Request Body 校验器，验证请求实体的合法性。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-0rn9d3u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-0rn9d3u"
					},
					"Children": [
						{
							"ID": "20230324111329-bg5lf8o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-bg5lf8o"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Response View Builder"
								},
								{
									"Type": "NodeText",
									"Data": " ：HTTP Response Body 生成器，生成合法的响应实体。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-xp437yq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-xp437yq"
					},
					"Children": [
						{
							"ID": "20230324111329-v8dgeco",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-v8dgeco"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Controllers"
								},
								{
									"Type": "NodeText",
									"Data": " ：资源表现层状态转移控制器，每个 Resource 都有着各自的 Controller，将 Resource 自身及其所拥有的 Handlers、Request Verification Schemas 以及 Response View Builder 进行封装，配合 Request Routers 完成 RESTful 请求的处理即响应。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-ckxaznd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-ckxaznd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "go-restful"
				}
			]
		},
		{
			"ID": "20230324111329-g36jn2i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-g36jn2i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "go-restful 是一个 Golang 第三方库，是一个轻量的 RESTful API 框架，基于 Golang Build-in 的 http/net 库。适用于构建灵活多变的 Web Application，Kubernetes 的 ApiServer 也使用了 go-restful。"
				}
			]
		},
		{
			"ID": "20230324111329-y4pidud",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-y4pidud"
			},
			"Children": [
				{
					"ID": "20230324111329-7rccma7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-7rccma7"
					},
					"Children": [
						{
							"ID": "20230324111329-s1u21xo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-s1u21xo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Github：https://github.com/emicklei/go-restful"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-4wrhe5y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-4wrhe5y"
					},
					"Children": [
						{
							"ID": "20230324111329-fyqx1u8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-fyqx1u8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Doc：https://godoc.org/github.com/emicklei/go-restful"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-yjxldav",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-yjxldav"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "go-restful 具有以下特性"
				},
				{
					"Type": "NodeText",
					"Data": " ："
				}
			]
		},
		{
			"ID": "20230324111329-6jtgbaw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-6jtgbaw"
			},
			"Children": [
				{
					"ID": "20230324111329-lxwyrs9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-lxwyrs9"
					},
					"Children": [
						{
							"ID": "20230324111329-y0s31du",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-y0s31du"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持可配置的请求路由，默认使用 CurlyRouter 快速路由算法，也支持 RouterJSR311。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-ed60zwc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-ed60zwc"
					},
					"Children": [
						{
							"ID": "20230324111329-k4743x1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-k4743x1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持在 URL path 上定义正则表达式，例如："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "/static/{subpath:*}"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-5n9m0j1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-5n9m0j1"
					},
					"Children": [
						{
							"ID": "20230324111329-prffrz8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-prffrz8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "提供 Request API 用于从 JSON、XML 读取路径参数、查询参数、头部参数，并转换为 Struct。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-w1evn51",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-w1evn51"
					},
					"Children": [
						{
							"ID": "20230324111329-0rayzur",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-0rayzur"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "提供 Response API 用于将 Struct 写入到 JSON、XML 以及 Header。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-z5971pd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-z5971pd"
					},
					"Children": [
						{
							"ID": "20230324111329-2mj3mmf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-2mj3mmf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持在服务级、或路由级对请求、响应流进行过滤和拦截。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-3aneyfq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-3aneyfq"
					},
					"Children": [
						{
							"ID": "20230324111329-ysre6a4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-ysre6a4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持使用过滤器自动响应 OPTIONS 请求和 CORS（跨域）请求。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-tt2w75r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-tt2w75r"
					},
					"Children": [
						{
							"ID": "20230324111329-hq8xl4d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-hq8xl4d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持使用 RecoverHandler 自定义处理 HTTP 500 错误。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-aomoowf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-aomoowf"
					},
					"Children": [
						{
							"ID": "20230324111329-1fvfybf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-1fvfybf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持使用 ServiceErrorHandler 自定义处理路由错误产生 HTTP 404/405/406/415 等错误。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-ebyj3ir",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-ebyj3ir"
					},
					"Children": [
						{
							"ID": "20230324111329-o156rrd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-o156rrd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持对请求、响应的有效负载进行编码（例如：gzip、deflate）。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-i7o7soh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-i7o7soh"
					},
					"Children": [
						{
							"ID": "20230324111329-8bduqpv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-8bduqpv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持使用 CompressorProvider 注册自定义的 gzip、deflate 的读入器和输出器。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-og85c4o",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-og85c4o"
					},
					"Children": [
						{
							"ID": "20230324111329-y72x6pe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-y72x6pe"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持使用 EntityReaderWriter 注册的自定义编码实现。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-u8rs0zv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-u8rs0zv"
					},
					"Children": [
						{
							"ID": "20230324111329-jwyfnvr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-jwyfnvr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持 Swagger UI 编写的 API 文档。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-hxx49uc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-hxx49uc"
					},
					"Children": [
						{
							"ID": "20230324111329-jj3zfmd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-jj3zfmd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持可配置的日志跟踪。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-26wemjy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-26wemjy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心概念"
				}
			]
		},
		{
			"ID": "20230324111329-yr5g5zf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-yr5g5zf"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20200816181218797-20230324111329-y2lkfdf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-tzws9c8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230324111329-tzws9c8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Route"
				}
			]
		},
		{
			"ID": "20230324111329-5cefgq8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-5cefgq8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Route 表示一条请求路由记录，即：Resource 的 URL Path（URI），从编程的角度可细分为 RootPath 和 SubPath。Route 包含了 Resource 的 URL Path、HTTP Method、Handler 三者之间的组合映射关系。go-restful 内置的 RouteSelector（请求路由分发器）根据 Route 将客户端发出的 HTTP 请求路由到相应的 Handler 进行处理。"
				}
			]
		},
		{
			"ID": "20230324111329-6w2v7b5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-6w2v7b5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "go-restful 支持两种路由分发器：快速路由 CurlyRouter 和 RouterJSR311。实际上，CurlyRoute 也是基于 RouterJSR311 的，相比 RouterJSR11，还支持了正则表达式和动态参数，也更加轻量级，Kubernetes ApiServer 中使用的就是这种路由。"
				}
			]
		},
		{
			"ID": "20230324111329-wq3ca1z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-wq3ca1z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CurlyRouter 的元素包括：请求路径（URL Path），请求参数（Parameter），输入、输出类型（Writes、Reads Model），处理函数（Handler），响应内容类型（Accept）等。"
				}
			]
		},
		{
			"ID": "20230324111329-0yaujek",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230324111329-0yaujek"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=WebService\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "WebService"
				}
			]
		},
		{
			"ID": "20230324111329-vuxi84z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-vuxi84z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个 WebService 由若干个 Routes 组成，并且 WebService 内的 Routes 拥有同一个 RootPath、输入输出格式、基本一致的请求数据类型等等一系列的通用属性。通常的，我们会根据需要将一组相关性非常强的 API 封装成为一个 WebServiice，继而将 Web Application 所拥有的全部 APIs 划分若干个 Group。"
				}
			]
		},
		{
			"ID": "20230324111329-p297vnp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-p297vnp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以，WebService 至少会有一个 Root Path，通过 ws.Path() 方法设置，例如：/user_group，作为 Group 的 “根”。Group 下属的 APIs 都是 RootRoute（RootPath）下属的 SubRoute（SubPath）。"
				}
			]
		},
		{
			"ID": "20230324111329-0isvjkv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-0isvjkv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个 Group 就是提供一项服务的 API 集合，每个 Group 会维护一个 Version。Group 的抽象是为了能够安全隔离的对各项服务进行敏捷迭代，当我们对一项服务进行升级时，只需要通过对特定版本号的更新来升级相关的 APIs，而不会影响到整个 Web Server。视实际情况而定，可能是若干个 APIs 分为一个 Group，也有可能一个 API 就是一个 Group。"
				}
			]
		},
		{
			"ID": "20230324111329-8sewvtw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230324111329-8sewvtw"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=Container\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "Container"
				}
			]
		},
		{
			"ID": "20230324111329-19oi27r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-19oi27r"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Container 表示一个 Web Server（服务器），由多个 WebServices 组成，此外还包含了若干个 Filters（过滤器）、一个 http.ServeMux 多路复用器以及一个 dispatch。go-restful 如何在从 Container 开始将路由分发给各个 WebService，再由 WebService 分发给具体的 Handler 函数，这些都在 dispatch 中实现。"
				}
			]
		},
		{
			"ID": "20230324111329-aazotpi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-aazotpi"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开发者根据需要创建 Container 实例之后，将 Container 加载到一个 http.Server 上运行。示例："
				}
			]
		},
		{
			"ID": "20230324111329-boo4gp3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-boo4gp3"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 构建一个 WebService 实例。\nws := new(restful.WebService)\n\n// 定义 Root Path。\nws.Path(\"/users\")\n\n// 定义一个 WebService 下属的 Route。\nws.Route(ws.GET(\"/users\").To(u.findAllUsers).\n    Doc(\"get all users\").\n    Metadata(restfulspec.KeyOpenAPITags, tags).\n    Writes([]User{ }).\n    Returns(200, \"OK\", []User{ }))\n\n// 构建一个 Container 实例。\ncontainer := restful.NewContainer()\n\n// 将 Container 加载到 http.Server 运行。\nserver := \u0026http.Server{ Addr: \":8081\", Handler: container}\n123456789101112131415161718\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-3quz5a9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-3quz5a9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "过滤器（Filter）"
				}
			]
		},
		{
			"ID": "20230324111329-vaz85xd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-vaz85xd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "go-restful 支持服务级、路由级的请求或响应过滤。开发者可以使用 Filter 来执行常规的日志记录、计量、验证、重定向、设置响应头部等工作。go-restful 提供了 3 个针对请求、响应的钩子（Hooks），此外，还可以实现自定义的 Filter。"
				}
			]
		},
		{
			"ID": "20230324111329-6zn76l1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-6zn76l1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个 Filter 必须实现一个 FilterFunction："
				}
			]
		},
		{
			"ID": "20230324111329-41tqc87",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-41tqc87"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func(req *restful.Request, resp *restful.Response, chain *restful.FilterChain)\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-4vabwc2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-4vabwc2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "并使用如下语句传递请求、响应对到下一个 Filter 或 RouteFunction："
				}
			]
		},
		{
			"ID": "20230324111329-4zcdl7v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-4zcdl7v"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "chain.ProcessFilter(req, resp)\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-4sf84qg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-4sf84qg"
			},
			"Children": [
				{
					"ID": "20230324111329-qnxx0rb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-qnxx0rb"
					},
					"Children": [
						{
							"ID": "20230324111329-t18xk90",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-t18xk90"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Container Filter：在注册 WebService 之前处理。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-rwwcgym",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-rwwcgym"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 安装一个全局的 Filter 到 Default Container\nrestful.Filter(globalLogging)\n12\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-xggmmhc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-xggmmhc"
			},
			"Children": [
				{
					"ID": "20230324111329-y93k88r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-y93k88r"
					},
					"Children": [
						{
							"ID": "20230324111329-2td5gr8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-2td5gr8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "WebService Filter：路由 WebService 之前处理。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-umkxsyc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-umkxsyc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 安装一个 WebService Filter\nws.Filter(webserviceLogging).Filter(measureTime)\n12\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-7q7izel",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-7q7izel"
			},
			"Children": [
				{
					"ID": "20230324111329-a1s3rnp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-a1s3rnp"
					},
					"Children": [
						{
							"ID": "20230324111329-ie5xzcu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-ie5xzcu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Route Filter：在调用 Router 相关的函数之前处理。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-82nvzxl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-82nvzxl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 安装 2 个链式的 Route Filter\nws.Route(ws.GET(\"/{user-id}\").Filter(routeLogging).Filter(NewCountFilter().routeCounter))\n12\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-zraawde",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-zraawde"
			},
			"Children": [
				{
					"ID": "20230324111329-9ntl1p2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-9ntl1p2"
					},
					"Children": [
						{
							"ID": "20230324111329-9mx4prp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-9mx4prp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "OPTIONS Filter：使 WebService 可以响应 HTTP OPTIONS 请求。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-hua6t3z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-hua6t3z"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Filter(OPTIONSFilter())\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-pmjh51m",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230324111329-pmjh51m"
			},
			"Children": [
				{
					"ID": "20230324111329-7mttumq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230324111329-7mttumq"
					},
					"Children": [
						{
							"ID": "20230324111329-2rt6nar",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-2rt6nar"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CORS Filter：是 WebService 可以响应 CORS 请求。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-p1ez719",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-p1ez719"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cors := CrossOriginResourceSharing{ \n    ExposeHeaders: []string{ \"X-My-Header\"},\n    CookiesAllowed: false,\n    Container: DefaultContainer\n}\n\nFilter(cors.Filter)\n1234567\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-4hc4phn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-4hc4phn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "响应编码（Response Encoding）"
				}
			]
		},
		{
			"ID": "20230324111329-e8qarox",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-e8qarox"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 HTTP Request 包含了 Accept-Encoding Header，那么 HTTP Response 就必须使用指定的编码格式进行压缩。go-restful 目前支持 zip 、deflate 这两种响应编码格式。"
				}
			]
		},
		{
			"ID": "20230324111329-cvv1ktn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-cvv1ktn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果要为所有的响应启用它们："
				}
			]
		},
		{
			"ID": "20230324111329-n5h8751",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-n5h8751"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "restful.DefaultContainer.EnableContentEncoding(true)\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-sjtirk1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-sjtirk1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同时，也可以通过创建一个 Filter 来实现自定义的响应编码过滤器，并将其安装到每一个 WebService 和 Route 上。"
				}
			]
		},
		{
			"ID": "20230324111329-yfvy2pr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-yfvy2pr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例一"
				}
			]
		},
		{
			"ID": "20230324111329-ds40k25",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-ds40k25"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下述示例实现了对 users 资源的 CURD API。实现的过程如下："
				}
			]
		},
		{
			"ID": "20230324111329-roa1buf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230324111329-roa1buf"
			},
			"Children": [
				{
					"ID": "20230324111329-sxha8ax",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230324111329-sxha8ax"
					},
					"Children": [
						{
							"ID": "20230324111329-kf7dizr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-kf7dizr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "定义 User resource。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-e3tbcmg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230324111329-e3tbcmg"
					},
					"Children": [
						{
							"ID": "20230324111329-b7c1oyz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-b7c1oyz"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "定义 User 的 Handlers。"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-3ph6leu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230324111329-3ph6leu"
					},
					"Children": [
						{
							"ID": "20230324111329-l3qgtye",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-l3qgtye"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "定义一个 User resource Register（资源注册器）"
								}
							]
						}
					]
				},
				{
					"ID": "20230324111329-q2b570j",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230324111329-q2b570j"
					},
					"Children": [
						{
							"ID": "20230324111329-pitrmtw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230324111329-pitrmtw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 User resource Register 内构造了 WebService 实例、定义了 User 的 URL RootPath /users、以及多个 SubPath 的 Routes。并且 HTTP Method、User Path（RootPath + SubPath）、Handlers 在 Routes 内建立映射关系。最后将 Routes 关联到 WebService、将 WebServices 关联到 Container。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230324111329-rfhud87",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-rfhud87"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/emicklei/go-restful\"\n)\n\n// This example has the same service definition as restful-user-resource\n// but uses a different router (CurlyRouter) that does not use regular expressions\n//\n// POST http://localhost:8080/users\n// \u003cUser\u003e\u003cId\u003e1\u003c/Id\u003e\u003cName\u003eMelissa Raspberry\u003c/Name\u003e\u003c/User\u003e\n//\n// GET http://localhost:8080/users/1\n//\n// PUT http://localhost:8080/users/1\n// \u003cUser\u003e\u003cId\u003e1\u003c/Id\u003e\u003cName\u003eMelissa\u003c/Name\u003e\u003c/User\u003e\n//\n// DELETE http://localhost:8080/users/1\n//\n\ntype User struct { \n\tId, Name string\n}\n\ntype UserResource struct { \n\t// normally one would use DAO (data access object)\n\tusers map[string]User\n}\n\nfunc (u UserResource) Register(container *restful.Container) { \n\tws := new(restful.WebService)\n\tws.\n\t\tPath(\"/users\").\n\t\tConsumes(restful.MIME_XML, restful.MIME_JSON).\n\t\tProduces(restful.MIME_JSON, restful.MIME_XML) // you can specify this per route as well\n\n\tws.Route(ws.GET(\"/{user-id}\").To(u.findUser))\n\tws.Route(ws.POST(\"\").To(u.updateUser))\n\tws.Route(ws.PUT(\"/{user-id}\").To(u.createUser))\n\tws.Route(ws.DELETE(\"/{user-id}\").To(u.removeUser))\n\n\tcontainer.Add(ws)\n}\n\n// GET http://localhost:8080/users/1\n//\nfunc (u UserResource) findUser(request *restful.Request, response *restful.Response) { \n\tid := request.PathParameter(\"user-id\")\n\tusr, ok := u.users[id]\n\tif !ok { \n\t\tresponse.AddHeader(\"Content-Type\", \"text/plain\")\n\t\tresponse.WriteErrorString(http.StatusNotFound, \"User could not be found.\")\n\t} else { \n\t\tresponse.WriteEntity(usr)\n\t}\n}\n\n// POST http://localhost:8080/users\n// \u003cUser\u003e\u003cId\u003e1\u003c/Id\u003e\u003cName\u003eMelissa Raspberry\u003c/Name\u003e\u003c/User\u003e\n//\nfunc (u *UserResource) updateUser(request *restful.Request, response *restful.Response) { \n\tusr := new(User)\n\terr := request.ReadEntity(\u0026usr)\n\tif err == nil { \n\t\tu.users[usr.Id] = *usr\n\t\tresponse.WriteEntity(usr)\n\t} else { \n\t\tresponse.AddHeader(\"Content-Type\", \"text/plain\")\n\t\tresponse.WriteErrorString(http.StatusInternalServerError, err.Error())\n\t}\n}\n\n// PUT http://localhost:8080/users/1\n// \u003cUser\u003e\u003cId\u003e1\u003c/Id\u003e\u003cName\u003eMelissa\u003c/Name\u003e\u003c/User\u003e\n//\nfunc (u *UserResource) createUser(request *restful.Request, response *restful.Response) { \n\tusr := User{ Id: request.PathParameter(\"user-id\")}\n\terr := request.ReadEntity(\u0026usr)\n\tif err == nil { \n\t\tu.users[usr.Id] = usr\n\t\tresponse.WriteHeaderAndEntity(http.StatusCreated, usr)\n\t} else { \n\t\tresponse.AddHeader(\"Content-Type\", \"text/plain\")\n\t\tresponse.WriteErrorString(http.StatusInternalServerError, err.Error())\n\t}\n}\n\n// DELETE http://localhost:8080/users/1\n//\nfunc (u *UserResource) removeUser(request *restful.Request, response *restful.Response) { \n\tid := request.PathParameter(\"user-id\")\n\tdelete(u.users, id)\n}\n\nfunc main() { \n\twsContainer := restful.NewContainer()\n\twsContainer.Router(restful.CurlyRouter{ })\n\tu := UserResource{ map[string]User{ }}\n\tu.Register(wsContainer)\n\n\tlog.Printf(\"start listening on localhost:8080\")\n\tserver := \u0026http.Server{ Addr: \":8080\", Handler: wsContainer}\n\tlog.Fatal(server.ListenAndServe())\n}\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-arxfd98",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-arxfd98"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行："
				}
			]
		},
		{
			"ID": "20230324111329-30pd2wu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-30pd2wu"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ ./restful\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-tlszrxi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230324111329-tlszrxi"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "客户端调用："
				}
			]
		},
		{
			"ID": "20230324111329-8qdagc7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-8qdagc7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "curl -X POST -v -i http://127.0.0.1:8080/users \\\n-H 'Content-type: application/json' \\\n-H 'Accept: application/xml' \\\n-d '{\"Id\": \"1\", \"Name\": \"fanguiju\"}'\n\ncurl -X GET -v -i http://127.0.0.1:8080/users/1\n123456\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230324111329-p1ywa9k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230324111329-p1ywa9k"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例二"
				}
			]
		},
		{
			"ID": "20230324111329-zi7uqlx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230324111329-zi7uqlx"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/emicklei/go-restful\"\n\tswagger \"github.com/emicklei/go-restful-swagger12\"\n)\n\ntype UserResource struct{ }\n\nfunc (u UserResource) result(request *restful.Request, response *restful.Response) { \n\tio.WriteString(response.ResponseWriter, \"this would be a normal response\")\n}\n\nfunc (UserResource) SwaggerDoc() map[string]string { \n\treturn map[string]string{ \n\t\t\"\":         \"Address doc\",\n\t\t\"country\":  \"Country doc\",\n\t\t\"postcode\": \"PostCode doc\",\n\t}\n}\n\nfunc (u UserResource) RegisterTo(container *restful.Container) { \n\tws := new(restful.WebService)\n\tws.Path(\"/user\").Consumes(\"*/*\").Produces(\"*/*\")\n\n\tws.Route(ws.GET(\"/{id}\").\n\t\tTo(u.result).\n\t\tDoc(\"方法描述：获取用户\").\n\t\tParam(ws.PathParameter(\"id\", \"参数描述:用户ID\").DataType(\"string\")).\n\t\tParam(ws.QueryParameter(\"name\", \"用户名称\").DataType(\"string\")).\n\t\tParam(ws.HeaderParameter(\"token\", \"访问令牌\").DataType(\"string\")).\n\t\tDo(returns200, returns500))\n\tws.Route(ws.POST(\"\").To(u.result))\n\tws.Route(ws.PUT(\"/{id}\").To(u.result))\n\tws.Route(ws.DELETE(\"/{id}\").To(u.result))\n\n\tcontainer.Add(ws)\n}\n\nfunc returns200(b *restful.RouteBuilder) { \n\tb.Returns(http.StatusOK, \"OK\", \"success\")\n}\n\nfunc returns500(b *restful.RouteBuilder) { \n\tb.Returns(http.StatusInternalServerError, \"Bummer, something went wrong\", nil)\n}\n\nfunc main() { \n\twsContainer := restful.NewContainer()\n\n\t// 跨域过滤器\n\tcors := restful.CrossOriginResourceSharing{ \n\t\tExposeHeaders:  []string{ \"X-My-Header\"},\n\t\tAllowedHeaders: []string{ \"Content-Type\", \"Accept\"},\n\t\tAllowedMethods: []string{ \"GET\", \"POST\"},\n\t\tCookiesAllowed: false,\n\t\tContainer:      wsContainer}\n\twsContainer.Filter(cors.Filter)\n\n\t// Add container filter to respond to OPTIONS\n\twsContainer.Filter(wsContainer.OPTIONSFilter)\n\n\tconfig := swagger.Config{ \n\t\tWebServices:    restful.DefaultContainer.RegisteredWebServices(), // you control what services are visible\n\t\tWebServicesUrl: \"http://localhost:8080\",\n\t\tApiPath:        \"/apidocs.json\",\n\t\tApiVersion:     \"V1.0\",\n\t\t// Optionally, specify where the UI is located\n\t\tSwaggerPath:     \"/apidocs/\",\n\t\tSwaggerFilePath: \"D:/gowork/src/doublegao/experiment/restful/dist\"}\n\tswagger.RegisterSwaggerService(config, wsContainer)\n\tswagger.InstallSwaggerService(config)\n\n\tu := UserResource{ }\n\tu.RegisterTo(wsContainer)\n\n\tlog.Print(\"start listening on localhost:8080\")\n\tserver := \u0026http.Server{ Addr: \":8080\", Handler: wsContainer}\n\tdefer server.Close()\n\tlog.Fatal(server.ListenAndServe())\n\n}\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}