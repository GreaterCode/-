{
	"ID": "20230315010524-gh2duuf",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230315010524-gh2duuf",
		"title": "RESTClient",
		"updated": "20230315171321"
	},
	"Children": [
		{
			"ID": "20230315010524-w7waqa2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230315010524-w7waqa2",
				"updated": "20230315154318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 概述"
				}
			]
		},
		{
			"ID": "20230315162003-chz5mzn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230315162003-chz5mzn",
				"updated": "20230315162003"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RestClient是最基础的客户端，RestClient基于http request进行了封装，实现了restful的api，可以直接通过 是RESTClient提供的RESTful方法如Get()，Put()，Post()，Delete()进行交互,同时支持Json 和 protobuf,支持所有原生资源和CRDs，但是，一般而言，为了更为优雅的处理，需要进一步封装，通过Clientset封装RESTClient，然后再对外提供接口和服务。"
				}
			]
		},
		{
			"ID": "20230315162003-cfeqalv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230315162003-cfeqalv",
				"updated": "20230315162142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " 使用RESTClient对kubernetes的资源的操作步骤如下："
				}
			]
		},
		{
			"ID": "20230315162142-35nepac",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230315162142-35nepac",
				"updated": "20230315162158"
			},
			"Children": [
				{
					"ID": "20230315162158-bmlkxv9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230315162158-bmlkxv9"
					},
					"Children": [
						{
							"ID": "20230315162158-d5frsoc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230315162158-d5frsoc",
								"updated": "20230315162203"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "确定要操作的资源类型(例如查找deployment列表)，去官方API文档中找到对于的path、数据结构等信息，后面会用到；"
								}
							]
						}
					]
				},
				{
					"ID": "20230315162203-qj94yb4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230315162203-qj94yb4"
					},
					"Children": [
						{
							"ID": "20230315162203-8aw52ez",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230315162203-8aw52ez",
								"updated": "20230315162212"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加载配置kubernetes配置文件（和kubectl使用的那种kubeconfig完全相同）；\n根据配置文件生成配置对象，并且通过API对配置对象就行设置（例如请求的path、Group、Version、序列化反序列化工具等）；"
								}
							]
						}
					]
				},
				{
					"ID": "20230315162213-cm327qf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230315162213-cm327qf"
					},
					"Children": [
						{
							"ID": "20230315162213-7b91ess",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230315162213-7b91ess",
								"updated": "20230315162218"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建RESTClient实例，入参是配置对象；"
								}
							]
						}
					]
				},
				{
					"ID": "20230315162218-bpvg4cr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230315162218-bpvg4cr"
					},
					"Children": [
						{
							"ID": "20230315162218-unaet3k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230315162218-unaet3k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用RESTClient实例的方法向kubernetes的API Server发起请求，编码用fluent风格将各种参数传入(例如指定namespace、资源等)，如果是查询类请求，还要传入数据结构实例的指针，改数据结构用于接受kubernetes返回的查询结果；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230315162102-1qrgegd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230315162102-1qrgegd",
				"updated": "20230315164257"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "官方API文档：https://kubernetes.io/docs/reference/generated/kubernetes-api/1.24"
				}
			]
		},
		{
			"ID": "20230315162545-yheb6e3",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230315162545-yheb6e3",
				"updated": "20230315170008"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例："
				}
			]
		},
		{
			"ID": "20230315170009-hz06p6k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230315170009-hz06p6k",
				"updated": "20230315171321"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\t\"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n\t\"log\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home,\".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\",\"\",\"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\n\t// 参考path : /api/v1/namespaces/{namespace}/pods\n\tconfig.APIPath = \"api\"\n\t// pod的group是空字符串\n\tconfig.GroupVersion = \u0026corev1.SchemeGroupVersion\n\t// 指定序列化工具\n\tconfig.NegotiatedSerializer = scheme.Codecs\n\n\t// 定义RestClient，用于与k8s API server进行交互\n\trestClient, err := rest.RESTClientFor(config)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\n\tresult := \u0026corev1.PodList{}\n\tnamespace := \"kube-system\"\n\n\t// 设置请求参数，然后发起请求\n\tif err := restClient.Get().\n\t\t//  指定namespace，参考path : /api/v1/namespaces/{namespace}/pods\n\t\tNamespace(namespace).\n\t\t// 查找多个pod，参考path : /api/v1/namespaces/{namespace}/pods\n\t\tResource(\"pods\").\n\t\t// 指定大小限制和序列化工具\n\t\tVersionedParams(\u0026metav1.ListOptions{Limit: 500}, scheme.ParameterCodec).Do(context.TODO()).\n\t\t// 结果存入result\n\t\tInto(result);err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tfmt.Println(\"Print all the pods.\")\n\tfor _, d := range result.Items {\n\t\tfmt.Printf(\"NAMESPACE: %v NAME: %v \\t STATUS: %v \\n\", d.Namespace, d.Name, d.Status.Phase)\n\t}\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}