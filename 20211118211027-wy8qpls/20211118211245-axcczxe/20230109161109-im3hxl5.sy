{
	"ID": "20230109161109-im3hxl5",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230109161109-im3hxl5",
		"title": "Go 语言GC(垃圾回收)的工作原理",
		"updated": "20230109161137"
	},
	"Children": [
		{
			"ID": "20230109161137-safo4m0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-safo4m0",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最常见的垃圾回收算法有标记清除(Mark-Sweep) 和引用计数(Reference Count)，Go 语言采用的是标记清除算法。并在此基础上使用了三色标记法和写屏障技术，提高了效率。"
				}
			]
		},
		{
			"ID": "20230109161137-xjwko7w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-xjwko7w",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "标记清除收集器是跟踪式垃圾收集器，其执行过程可以分成标记（Mark）和清除（Sweep）两个阶段："
				}
			]
		},
		{
			"ID": "20230109161137-23nwvnr",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230109161137-23nwvnr",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"ID": "20230109161137-wfcnjhm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-wfcnjhm"
					},
					"Children": [
						{
							"ID": "20230109161137-pmgrcqw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-pmgrcqw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "标记阶段 — 从根对象出发查找并标记堆中所有存活的对象；"
								}
							]
						}
					]
				},
				{
					"ID": "20230109161137-2c970hb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-2c970hb"
					},
					"Children": [
						{
							"ID": "20230109161137-d08ca49",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-d08ca49"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "清除阶段 — 遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230109161137-9129owb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-9129owb",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "标记清除算法的一大问题是在标记期间，需要暂停程序（Stop the world，STW），标记结束之后，用户程序才可以继续执行。为了能够异步执行，减少 STW 的时间，Go 语言采用了三色标记法。"
				}
			]
		},
		{
			"ID": "20230109161137-pbn719d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-pbn719d",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三色标记算法将程序中的对象分成白色、黑色和灰色三类。"
				}
			]
		},
		{
			"ID": "20230109161137-u4b0181",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230109161137-u4b0181",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"ID": "20230109161137-5oh3uct",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-5oh3uct"
					},
					"Children": [
						{
							"ID": "20230109161137-bazovrm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-bazovrm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "白色：不确定对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20230109161137-unfarug",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-unfarug"
					},
					"Children": [
						{
							"ID": "20230109161137-ap5pu0f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-ap5pu0f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "灰色：存活对象，子对象待处理。"
								}
							]
						}
					]
				},
				{
					"ID": "20230109161137-matbfu5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-matbfu5"
					},
					"Children": [
						{
							"ID": "20230109161137-t34jgvy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-t34jgvy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "黑色：存活对象。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230109161137-7ud4aei",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-7ud4aei",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "标记开始时，所有对象加入白色集合（这一步需 STW ）。首先将根对象标记为灰色，加入灰色集合，垃圾搜集器取出一个灰色对象，将其标记为黑色，并将其指向的对象标记为灰色，加入灰色集合。重复这个过程，直到灰色集合为空为止，标记阶段结束。那么白色对象即可需要清理的对象，而黑色对象均为根可达的对象，不能被清理。"
				}
			]
		},
		{
			"ID": "20230109161137-ev4xeou",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-ev4xeou",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三色标记法因为多了一个白色的状态来存放不确定对象，所以后续的标记阶段可以并发地执行。当然并发执行的代价是可能会造成一些遗漏，因为那些早先被标记为黑色的对象可能目前已经是不可达的了。所以三色标记法是一个 false negative（假阴性）的算法。"
				}
			]
		},
		{
			"ID": "20230109161137-082s30b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-082s30b",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三色标记法并发执行仍存在一个问题，即在 GC 过程中，对象指针发生了改变。比如下面的例子："
				}
			]
		},
		{
			"ID": "20230109161137-ldchvmc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230109161137-ldchvmc",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "A (黑) -\u003e B (灰) -\u003e C (白) -\u003e D (白)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230109161137-tim29ac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-tim29ac",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正常情况下，D 对象最终会被标记为黑色，不应被回收。但在标记和用户程序并发执行过程中，用户程序删除了 C 对 D 的引用，而 A 获得了 D 的引用。标记继续进行，D 就没有机会被标记为黑色了（A 已经处理过，这一轮不会再被处理）。"
				}
			]
		},
		{
			"ID": "20230109161137-rp961rx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230109161137-rp961rx",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "A (黑) -\u003e B (灰) -\u003e C (白) \n  ↓\n D (白)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230109161137-oo1u9kq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-oo1u9kq",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了解决这个问题，Go 使用了内存屏障技术，它是在用户程序读取对象、创建新对象以及更新对象指针时执行的一段代码，类似于一个钩子。垃圾收集器使用了写屏障（Write Barrier）技术，当对象新增或更新时，会将其着色为灰色。这样即使与用户程序并发执行，对象的引用发生改变时，垃圾收集器也能正确处理了。"
				}
			]
		},
		{
			"ID": "20230109161137-vn0mszp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230109161137-vn0mszp",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一次完整的 GC 分为四个阶段："
				}
			]
		},
		{
			"ID": "20230109161137-vckmvpb",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230109161137-vckmvpb",
				"updated": "20230109161137"
			},
			"Children": [
				{
					"ID": "20230109161137-eagdmco",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-eagdmco"
					},
					"Children": [
						{
							"ID": "20230109161137-uj1jxwx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-uj1jxwx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1）标记准备(Mark Setup，需 STW)，打开写屏障(Write Barrier)"
								}
							]
						}
					]
				},
				{
					"ID": "20230109161137-omhm4gd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-omhm4gd"
					},
					"Children": [
						{
							"ID": "20230109161137-ix3wb7r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-ix3wb7r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2）使用三色标记法标记（Marking, 并发）"
								}
							]
						}
					]
				},
				{
					"ID": "20230109161137-vd4yg8e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-vd4yg8e"
					},
					"Children": [
						{
							"ID": "20230109161137-26vkzd1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-26vkzd1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3）标记结束(Mark Termination，需 STW)，关闭写屏障。"
								}
							]
						}
					]
				},
				{
					"ID": "20230109161137-layvvjc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-layvvjc"
					},
					"Children": [
						{
							"ID": "20230109161137-llsd2yt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-llsd2yt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4）清理(Sweeping, 并发)"
								}
							]
						}
					]
				},
				{
					"ID": "20230109161137-jak6gya",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230109161137-jak6gya"
					},
					"Children": [
						{
							"ID": "20230109161137-6hx1ngo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230109161137-6hx1ngo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参考 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://www.fullstack.cafe/golang",
									"TextMarkTextContent": "fullstack"
								}
							]
						}
					]
				}
			]
		}
	]
}