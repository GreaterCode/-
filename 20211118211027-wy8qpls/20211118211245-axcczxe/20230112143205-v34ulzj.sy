{
	"ID": "20230112143205-v34ulzj",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230112143205-v34ulzj",
		"title": "nil：零值和空值",
		"updated": "20230112145123"
	},
	"Children": [
		{
			"ID": "20230112143205-69kaorm",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112143205-69kaorm",
				"updated": "20230112143301"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. nil标识是不能比较的"
				}
			]
		},
		{
			"ID": "20230112143302-4fnu9p2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112143302-4fnu9p2",
				"updated": "20230112143323"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. nil不是关键字和保留字"
				}
			]
		},
		{
			"ID": "20230112143324-5mnkljn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230112143324-5mnkljn",
				"updated": "20230112143348"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "nil 并不是Go语言的关键字或者保留字，也就是说我们可以定义一个名称为 nil 的变量，比如下面这样：\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var nil = errors.New(\u0026quot;my god\u0026quot;)"
				}
			]
		},
		{
			"ID": "20230112143348-t30w80w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230112143348-t30w80w",
				"updated": "20230112143403"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是不建议"
				}
			]
		},
		{
			"ID": "20230112143403-xpcwfc1",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112143403-xpcwfc1",
				"updated": "20230112143415"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. nil没有默认类型"
				}
			]
		},
		{
			"ID": "20230112144129-v0mjd6l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230112144129-v0mjd6l",
				"updated": "20230112144144"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Printf(\"%T\", nil)\n    print(nil)\n}\n\n运行结果如下所示：\nPS D:\\code\u003e go run .\\main.go\n# command-line-arguments\n.\\main.go:9:10: use of untyped nil\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230112143415-d2c5m6k",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112143415-d2c5m6k",
				"updated": "20230112144326"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. 不同类型nil指针是一样的"
				}
			]
		},
		{
			"ID": "20230112144326-tqjyfq2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230112144326-tqjyfq2",
				"updated": "20230112144331"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "不同类型 nil 的指针是一样的\n纯文本复制\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    var arr []int\n    var num *int\n    fmt.Printf(\"%p\\n\", arr)\n    fmt.Printf(\"%p\", num)\n}\n运行结果如下所示：\nPS D:\\code\u003e go run .\\main.go\n0x0\n0x0\n\n通过运行结果可以看出 arr 和 num 的指针都是 0x0。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230112144434-8k2y6so",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112144434-8k2y6so",
				"updated": "20230112144438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5. 不同类型 nil 的指针是一样的"
				}
			]
		},
		{
			"ID": "20230112144439-uup66dy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230112144439-uup66dy",
				"updated": "20230112144509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    var m map[int]string\n    var ptr *int\n    fmt.Printf(m == ptr)\n}\n运行结果如下所示：\nPS D:\\code\u003e go run .\\main.go\n# command-line-arguments\n.\\main.go:10:20: invalid operation: arr == ptr (mismatched types []int and *int)\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230112144512-9ncdu9d",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112144512-9ncdu9d",
				"updated": "20230112144837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6. 两个相同类型的 nil 值也可能无法比较"
				}
			]
		},
		{
			"ID": "20230112144805-bskkgkq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230112144805-bskkgkq",
				"updated": "20230112144935"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "在Go语言中 map、slice 和 function 类型的 nil 值不能比较，比较两个无法比较类型的值是非法的，下面的语句无法编译。\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    var s1 []int\n    var s2 []int\n    fmt.Printf(s1 == s2)\n}\n运行结果如下所示：\nPS D:\\code\u003e go run .\\main.go\n# command-line-arguments\n.\\main.go:10:19: invalid operation: s1 == s2 (slice can only be compared to nil)\n\n通过上面的错误提示可以看出，能够将上述不可比较类型的空值直接与 nil 标识符进行比较，如下所示：\n\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    var s1 []int\n    fmt.Println(s1 == nil)\n}\n运行结果如下所示：\nPS D:\\code\u003e go run .\\main.go\ntrue\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230112144946-w4h7hrn",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112144946-w4h7hrn",
				"updated": "20230112144957"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7.  nil 是 map、slice、pointer、channel、func、interface 的零值"
				}
			]
		},
		{
			"ID": "20230112145009-sf2jtt7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230112145009-sf2jtt7",
				"updated": "20230112145012"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    var m map[int]string\n    var ptr *int\n    var c chan int\n    var sl []int\n    var f func()\n    var i interface{}\n    fmt.Printf(\"%#v\\n\", m)\n    fmt.Printf(\"%#v\\n\", ptr)\n    fmt.Printf(\"%#v\\n\", c)\n    fmt.Printf(\"%#v\\n\", sl)\n    fmt.Printf(\"%#v\\n\", f)\n    fmt.Printf(\"%#v\\n\", i)\n}\n运行结果如下所示：\nPS D:\\code\u003e go run .\\main.go\nmap[int]string(nil)\n(*int)(nil)\n(chan int)(nil)\n[]int(nil)\n(func())(nil)\n\u003cnil\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230112145022-sjz65or",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230112145022-sjz65or",
				"updated": "20230112145023"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "零值是Go语言中变量在声明之后但是未初始化被赋予的该类型的一个默认值。"
				}
			]
		},
		{
			"ID": "20230112145029-wccv3oj",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230112145029-wccv3oj",
				"updated": "20230112145036"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8. 不同类型的 nil 值占用的内存大小可能是不一样的"
				}
			]
		},
		{
			"ID": "20230112145051-g9i03o6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230112145051-g9i03o6",
				"updated": "20230112145052"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个类型的所有的值的内存布局都是一样的，nil 也不例外，nil 的大小与同类型中的非 nil 类型的大小是一样的。但是不同类型的 nil 值的大小可能不同。"
				}
			]
		},
		{
			"ID": "20230112145108-fzefkzo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230112145108-fzefkzo",
				"updated": "20230112145123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\nfunc main() {\n    var p *struct{}\n    fmt.Println( unsafe.Sizeof( p ) ) // 8\n    var s []int\n    fmt.Println( unsafe.Sizeof( s ) ) // 24\n    var m map[int]bool\n    fmt.Println( unsafe.Sizeof( m ) ) // 8\n    var c chan string\n    fmt.Println( unsafe.Sizeof( c ) ) // 8\n    var f func()\n    fmt.Println( unsafe.Sizeof( f ) ) // 8\n    var i interface{}\n    fmt.Println( unsafe.Sizeof( i ) ) // 16\n}\n运行结果如下所示：\nPS D:\\code\u003e go run .\\main.go\n8\n24\n8\n8\n8\n16\n\n具体的大小取决于编译器和架构，上面打印的结果是在 64 位架构和标准编译器下完成的，对应 32 位的架构的，打印的大小将减半。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230112145122-svwt9fx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230112145122-svwt9fx",
				"updated": "20230112145122"
			}
		}
	]
}