{
	"ID": "20230216181058-c0bh7o0",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230216181058-c0bh7o0",
		"title": "viper",
		"updated": "20230217113532"
	},
	"Children": [
		{
			"ID": "20230216181300-mumzvk5",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230216181300-mumzvk5",
				"updated": "20230216181316"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 简介"
				}
			]
		},
		{
			"ID": "20230216181058-32sx1te",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216181058-32sx1te",
				"updated": "20230216181250"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper是适用于Go应用程序（包括"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Twelve-Factor App"
				},
				{
					"Type": "NodeText",
					"Data": "）的完整配置解决方案。它被设计用于在应用程序中工作，并且可以处理所有类型的配置需求和格式。它支持以下特性："
				}
			]
		},
		{
			"ID": "20230216181328-w41tusr",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230216181328-w41tusr",
				"updated": "20230216181328"
			},
			"Children": [
				{
					"ID": "20230216181328-xlouyre",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-xlouyre"
					},
					"Children": [
						{
							"ID": "20230216181328-807w5id",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-807w5id"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置默认值"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181328-9hc6r8n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-9hc6r8n"
					},
					"Children": [
						{
							"ID": "20230216181328-p7ho1dr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-p7ho1dr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "JSON"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "TOML"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "YAML"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HCL"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "envfile"
								},
								{
									"Type": "NodeText",
									"Data": "和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Java properties"
								},
								{
									"Type": "NodeText",
									"Data": "格式的配置文件读取配置信息"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181328-fx15r2g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-fx15r2g"
					},
					"Children": [
						{
							"ID": "20230216181328-iw0d7dt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-iw0d7dt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实时监控和重新读取配置文件（可选）"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181328-lzv2mrj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-lzv2mrj"
					},
					"Children": [
						{
							"ID": "20230216181328-0b3bczn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-0b3bczn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从环境变量中读取"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181328-o9hlvuk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-o9hlvuk"
					},
					"Children": [
						{
							"ID": "20230216181328-0u0xlh6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-0u0xlh6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从远程配置系统（etcd或Consul）读取并监控配置变化"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181328-6lmykar",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-6lmykar"
					},
					"Children": [
						{
							"ID": "20230216181328-q91ydzv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-q91ydzv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从命令行参数读取配置"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181328-kgam9hl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-kgam9hl"
					},
					"Children": [
						{
							"ID": "20230216181328-71tklxm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-71tklxm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从buffer读取配置"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181328-r1wvcfz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181328-r1wvcfz"
					},
					"Children": [
						{
							"ID": "20230216181328-9wqi27v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181328-9wqi27v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显式配置值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230216181522-ynbfi41",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216181522-ynbfi41",
				"updated": "20230216181614"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " Viper会按照下面优先级设置默认值，从上到下，优先级从高到低"
				}
			]
		},
		{
			"ID": "20230216181632-v4guic5",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230216181632-v4guic5",
				"updated": "20230216181632"
			},
			"Children": [
				{
					"ID": "20230216181632-4svpcg9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181632-4svpcg9"
					},
					"Children": [
						{
							"ID": "20230216181632-312nmb0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181632-312nmb0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显示调用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Set"
								},
								{
									"Type": "NodeText",
									"Data": "设置值"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181632-wsyu01u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181632-wsyu01u"
					},
					"Children": [
						{
							"ID": "20230216181632-zkygx9c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181632-zkygx9c"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "命令行参数（flag）"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181632-2o0octk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181632-2o0octk"
					},
					"Children": [
						{
							"ID": "20230216181632-hajwv6h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181632-hajwv6h"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "环境变量"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181632-smp9xgj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181632-smp9xgj"
					},
					"Children": [
						{
							"ID": "20230216181632-2sqsp1m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181632-2sqsp1m"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "配置文件"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181632-gg1sg7r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181632-gg1sg7r"
					},
					"Children": [
						{
							"ID": "20230216181632-gy6nsfp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181632-gy6nsfp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "key/value存储"
								}
							]
						}
					]
				},
				{
					"ID": "20230216181632-7f5gmnp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230216181632-7f5gmnp"
					},
					"Children": [
						{
							"ID": "20230216181632-pbfzl4t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230216181632-pbfzl4t"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "默认值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230216181655-rpqe29f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216181655-rpqe29f",
				"updated": "20230216181703"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "重要："
				},
				{
					"Type": "NodeText",
					"Data": " 目前Viper配置的键（Key）是大小写不敏感的。目前正在讨论是否将这一选项设为可选。"
				}
			]
		},
		{
			"ID": "20230216181113-c7tuilj",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230216181113-c7tuilj",
				"updated": "20230216181113"
			}
		},
		{
			"ID": "20230216181126-q4h78qx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230216181126-q4h78qx",
				"updated": "20230216181257"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ". 安装"
				}
			]
		},
		{
			"ID": "20230216181133-g5x6elk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216181133-g5x6elk",
				"updated": "20230216181203"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "go get github.com/spf13/viper"
				}
			]
		},
		{
			"ID": "20230216181204-epjjt6k",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230216181204-epjjt6k",
				"updated": "20230216181733"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. 使用"
				}
			]
		},
		{
			"ID": "20230216181734-opvfxwq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230216181734-opvfxwq",
				"updated": "20230216181750"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 设置默认值"
				}
			]
		},
		{
			"ID": "20230216181845-tpuc0uj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216181845-tpuc0uj",
				"updated": "20230216181907"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "键不需要默认值，如果没有通过配置文件、环境变量、远程配置或命令行标志（flag）设置键，则可以使用默认值。"
				}
			]
		},
		{
			"ID": "20230216181750-0o0iqza",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230216181750-0o0iqza",
				"updated": "20230216181822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.SetDefault(\"ContentDir\", \"content\")\nviper.SetDefault(\"LayoutDir\", \"layouts\")\nviper.SetDefault(\"Taxonomies\", map[string]string{\"tag\": \"tags\", \"category\": \"categories\"})\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230216181231-p1317kj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230216181231-p1317kj",
				"updated": "20230216181932"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 读取配置文件"
				}
			]
		},
		{
			"ID": "20230216181932-1nqdf4h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216181932-1nqdf4h",
				"updated": "20230216182507"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper支持"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "JSON"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "TOML"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "YAML"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HCL"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "envfile"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Java properties"
				},
				{
					"Type": "NodeText",
					"Data": "格式的配置文件。"
				}
			]
		},
		{
			"ID": "20230216182514-wl4nvkz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216182514-wl4nvkz",
				"updated": "20230216182524"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper可以搜索多个路径，但目前"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "单个Viper实例只支持单个配置文件"
				},
				{
					"Type": "NodeText",
					"Data": "。Viper不默认任何配置搜索路径，将默认决策留给应用程序。"
				}
			]
		},
		{
			"ID": "20230216182551-koktkld",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216182551-koktkld",
				"updated": "20230216182553"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230216182554-luipqfv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230216182554-luipqfv",
				"updated": "20230216182605"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.SetConfigFile(\"./config.yaml\") // 指定配置文件路径\nviper.SetConfigName(\"config\") // 配置文件名称(无扩展名)\nviper.SetConfigType(\"yaml\") // 如果配置文件的名称中没有扩展名，则需要配置此项\nviper.AddConfigPath(\"/etc/appname/\")   // 查找配置文件所在的路径\nviper.AddConfigPath(\"$HOME/.appname\")  // 多次调用以添加多个搜索路径\nviper.AddConfigPath(\".\")               // 还可以在工作目录中查找配置\nerr := viper.ReadInConfig() // 查找并读取配置文件\nif err != nil { // 处理读取配置文件的错误\n\tpanic(fmt.Errorf(\"Fatal error config file: %s \\n\", err))\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230216182855-870w0kl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230216182855-870w0kl",
				"updated": "20230216182926"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在加载配置文件出错时，可以像下面这样处理"
				}
			]
		},
		{
			"ID": "20230216182927-v1b8egq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230216182927-v1b8egq",
				"updated": "20230216182938"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "if err := viper.ReadInConfig(); err != nil {\n\tif _, ok := err.(viper.ConfigFileNotFoundError); ok {\n\t\t// Config file not found; ignore error if desired\n\t} else {\n\t\t// Config file was found but another error was produced\n\t}\n}\n\n// Config file found and successfully parsed\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217062100-bx1lww8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217062100-bx1lww8",
				"updated": "20230217101515"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3 写入配置文件"
				}
			]
		},
		{
			"ID": "20230217101515-iyvqhu2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230217101515-iyvqhu2",
				"updated": "20230217101658"
			},
			"Children": [
				{
					"ID": "20230217101658-poc14v1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217101658-poc14v1"
					},
					"Children": [
						{
							"ID": "20230217101658-cunmfd6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217101658-cunmfd6",
								"updated": "20230217101713"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "WriteConfig：将当前的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "viper"
								},
								{
									"Type": "NodeText",
									"Data": "配置写入预定义的路径并覆盖（如果存在的话）。如果没有预定义的路径，则报错。"
								}
							]
						}
					]
				},
				{
					"ID": "20230217101720-83r4ugm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217101720-83r4ugm"
					},
					"Children": [
						{
							"ID": "20230217101728-sw0b4gk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217101728-sw0b4gk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SafeWriteConfig - 将当前的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "viper"
								},
								{
									"Type": "NodeText",
									"Data": "配置写入预定义的路径。如果没有预定义的路径，则报错。如果存在，将不会覆盖当前的配置文件。"
								}
							]
						}
					]
				},
				{
					"ID": "20230217101736-it7n9zd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217101736-it7n9zd"
					},
					"Children": [
						{
							"ID": "20230217101746-rxoazeq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217101746-rxoazeq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "WriteConfigAs - 将当前的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "viper"
								},
								{
									"Type": "NodeText",
									"Data": "配置写入给定的文件路径。将覆盖给定的文件(如果它存在的话)。"
								}
							]
						}
					]
				},
				{
					"ID": "20230217101759-eh8bymd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217101759-eh8bymd"
					},
					"Children": [
						{
							"ID": "20230217101759-ff0lwqp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217101759-ff0lwqp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SafeWriteConfigAs - 将当前的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "viper"
								},
								{
									"Type": "NodeText",
									"Data": "配置写入给定的文件路径。不会覆盖给定的文件(如果它存在的话)。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230217101805-svh8pr4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217101805-svh8pr4",
				"updated": "20230217101819"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230217101819-epy5csk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217101819-epy5csk",
				"updated": "20230217101833"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.WriteConfig() // 将当前配置写入“viper.AddConfigPath()”和“viper.SetConfigName”设置的预定义路径\nviper.SafeWriteConfig()\nviper.WriteConfigAs(\"/path/to/my/.config\")\nviper.SafeWriteConfigAs(\"/path/to/my/.config\") // 因为该配置文件写入过，所以会报错\nviper.SafeWriteConfigAs(\"/path/to/my/.other_config\")\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217101831-8um9atc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217101831-8um9atc",
				"updated": "20230217101908"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.4 监控并重新读取配置文件"
				}
			]
		},
		{
			"ID": "20230217101912-94862yq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217101912-94862yq",
				"updated": "20230217102041"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper支持在运行时实时读取配置文件的功能。"
				}
			]
		},
		{
			"ID": "20230217101944-t751xb4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217101944-t751xb4",
				"updated": "20230217102022"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "确保在调用WatchConfig()之前添加了所有的配置路径。"
				}
			]
		},
		{
			"ID": "20230217102022-qd5w80d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217102022-qd5w80d",
				"updated": "20230217102025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230217102026-i9s1irw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217102026-i9s1irw",
				"updated": "20230217102036"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.WatchConfig()\nviper.OnConfigChange(func(e fsnotify.Event) {\n  // 配置文件发生变更之后会调用的回调函数\n\tfmt.Println(\"Config file changed:\", e.Name)\n})\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217102045-nwvxd42",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217102045-nwvxd42",
				"updated": "20230217102614"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.5 使用io.Reader读取配置"
				}
			]
		},
		{
			"ID": "20230217102734-epoc55p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217102734-epoc55p",
				"updated": "20230217102754"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper预先定义了许多配置源，如文件、环境变量、标志和远程K/V存储，也可以实现自己所需配置源"
				}
			]
		},
		{
			"ID": "20230217102615-lgroewr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217102615-lgroewr",
				"updated": "20230217102625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.SetConfigType(\"yaml\") // 或者 viper.SetConfigType(\"YAML\")\n\n// 任何需要将此配置添加到程序中的方法。\nvar yamlExample = []byte(`\nHacker: true\nname: steve\nhobbies:\n- skateboarding\n- snowboarding\n- go\nclothing:\n  jacket: leather\n  trousers: denim\nage: 35\neyes : brown\nbeard: true\n`)\n\nviper.ReadConfig(bytes.NewBuffer(yamlExample))\n\nviper.Get(\"name\") // 这里会得到 \"steve\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217102415-tuc73wt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217102415-tuc73wt",
				"updated": "20230217102922"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.6 覆盖配置"
				}
			]
		},
		{
			"ID": "20230217102922-xrgduyq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217102922-xrgduyq",
				"updated": "20230217102951"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "配置可能来自命令行标志或者自己的应用程序"
				}
			]
		},
		{
			"ID": "20230217103004-3rnlsdi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217103004-3rnlsdi",
				"updated": "20230217103005"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.Set(\"Verbose\", true)\nviper.Set(\"LogFile\", LogFile)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217103034-0orzbf0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217103034-0orzbf0",
				"updated": "20230217103054"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.7 注册或者使用别名"
				}
			]
		},
		{
			"ID": "20230217103054-eyg5l0x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103054-eyg5l0x",
				"updated": "20230217103102"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "别名允许多个键引用单个值"
				}
			]
		},
		{
			"ID": "20230217103104-54ooshj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217103104-54ooshj",
				"updated": "20230217103114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.RegisterAlias(\"loud\", \"Verbose\")\n\nviper.Set(\"verbose\", true) // same result as next line\nviper.Set(\"loud\", true)   // same result as prior line\n\nviper.GetBool(\"loud\") // true\nviper.GetBool(\"verbose\") // true\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217103158-pv7e9e4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217103158-pv7e9e4",
				"updated": "20230217103206"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.8 使用环境变量"
				}
			]
		},
		{
			"ID": "20230217103206-pxt5p4y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103206-pxt5p4y",
				"updated": "20230217103454"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper完全支持环境变量。这使得12 款应用开箱即用。有五种办法可以帮助与ENV协作："
				}
			]
		},
		{
			"ID": "20230217103451-aexbfqg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230217103451-aexbfqg",
				"updated": "20230217103451"
			},
			"Children": [
				{
					"ID": "20230217103451-z3xd3kn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217103451-z3xd3kn"
					},
					"Children": [
						{
							"ID": "20230217103451-7n2n66e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217103451-7n2n66e"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AutomaticEnv()"
								}
							]
						}
					]
				},
				{
					"ID": "20230217103451-jjftgw1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217103451-jjftgw1"
					},
					"Children": [
						{
							"ID": "20230217103451-g21auyo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217103451-g21auyo"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BindEnv(string...) : error"
								}
							]
						}
					]
				},
				{
					"ID": "20230217103451-jqu1vid",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217103451-jqu1vid"
					},
					"Children": [
						{
							"ID": "20230217103451-vu0qbn6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217103451-vu0qbn6"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SetEnvPrefix(string)"
								}
							]
						}
					]
				},
				{
					"ID": "20230217103451-1n466i2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217103451-1n466i2"
					},
					"Children": [
						{
							"ID": "20230217103451-nmjxzt8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217103451-nmjxzt8"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SetEnvKeyReplacer(string...) *strings.Replacer"
								}
							]
						}
					]
				},
				{
					"ID": "20230217103451-rqpi50e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217103451-rqpi50e"
					},
					"Children": [
						{
							"ID": "20230217103451-qhmsttw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217103451-qhmsttw"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AllowEmptyEnv(bool)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230217103638-5k3chyk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103638-5k3chyk",
				"updated": "20230217103757"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper对环境变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "大小写敏感"
				},
				{
					"Type": "NodeText",
					"Data": "的。"
				}
			]
		},
		{
			"ID": "20230217103738-lpu7xej",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103738-lpu7xej",
				"updated": "20230217103738"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper提供了一种机制来确保ENV变量是惟一的。通过使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetEnvPrefix"
				},
				{
					"Type": "NodeText",
					"Data": "，你可以告诉Viper在读取环境变量时使用前缀。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BindEnv"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AutomaticEnv"
				},
				{
					"Type": "NodeText",
					"Data": "都将使用这个前缀。"
				}
			]
		},
		{
			"ID": "20230217103837-oan7iwu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103837-oan7iwu",
				"updated": "20230217103837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BindEnv"
				},
				{
					"Type": "NodeText",
					"Data": "使用一个或两个参数。第一个参数是键名称，第二个是环境变量的名称。环境变量的名称区分大小写。如果没有提供ENV变量名，那么Viper将自动假设ENV变量与以下格式匹配：前缀+ “_” +键名全部大写。当你显式提供ENV变量名（第二个参数）时，它 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "不会"
				},
				{
					"Type": "NodeText",
					"Data": " 自动添加前缀。例如，如果第二个参数是“id”，Viper将查找环境变量“ID”。"
				}
			]
		},
		{
			"ID": "20230217103850-44r0ru6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103850-44r0ru6",
				"updated": "20230217103852"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在使用ENV变量时，需要注意的一件重要事情是，每次访问该值时都将读取它。Viper在调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BindEnv"
				},
				{
					"Type": "NodeText",
					"Data": "时不固定该值。"
				}
			]
		},
		{
			"ID": "20230217103908-tyhpqha",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103908-tyhpqha",
				"updated": "20230217103908"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，空环境变量被认为是未设置的，并将返回到下一个配置源。若要将空环境变量视为已设置，请使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AllowEmptyEnv"
				},
				{
					"Type": "NodeText",
					"Data": "方法。"
				}
			]
		},
		{
			"ID": "20230217103929-1pa4sbz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217103929-1pa4sbz",
				"updated": "20230217103932"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "env示例："
				}
			]
		},
		{
			"ID": "20230217103933-nfteopz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217103933-nfteopz",
				"updated": "20230217103942"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SetEnvPrefix(\"spf\") // 将自动转为大写\nBindEnv(\"id\")\n\nos.Setenv(\"SPF_ID\", \"13\") // 通常是在应用程序之外完成的\n\nid := Get(\"id\") // 13\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217104025-dk2x5nq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217104025-dk2x5nq",
				"updated": "20230217104038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.6 使用Flags"
				}
			]
		},
		{
			"ID": "20230217104051-73wqlxz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217104051-73wqlxz",
				"updated": "20230217104052"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper 具有绑定到标志的能力。具体来说，Viper支持"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/spf13/cobra",
					"TextMarkTextContent": "Cobra"
				},
				{
					"Type": "NodeText",
					"Data": "库中使用的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Pflag"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230217104134-x1qs7tp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217104134-x1qs7tp",
				"updated": "20230217104134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BindEnv"
				},
				{
					"Type": "NodeText",
					"Data": "类似，该值不是在调用绑定方法时设置的，而是在访问该方法时设置的。这意味着你可以根据需要尽早进行绑定，即使在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "init()"
				},
				{
					"Type": "NodeText",
					"Data": "函数中也是如此。"
				}
			]
		},
		{
			"ID": "20230217104134-cbvaylp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217104134-cbvaylp",
				"updated": "20230217104134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于单个标志，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BindPFlag()"
				},
				{
					"Type": "NodeText",
					"Data": "方法提供此功能。"
				}
			]
		},
		{
			"ID": "20230217104216-ooonqrg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217104216-ooonqrg",
				"updated": "20230217104217"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还可以绑定一组现有的pflags （pflag.FlagSet）"
				}
			]
		},
		{
			"ID": "20230217104218-btgh8vv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217104218-btgh8vv",
				"updated": "20230217104223"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如："
				}
			]
		},
		{
			"ID": "20230217104223-xz7hv15",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217104223-xz7hv15",
				"updated": "20230217104235"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "pflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\npflag.Parse()\nviper.BindPFlags(pflag.CommandLine)\n\ni := viper.GetInt(\"flagname\") // 从viper而不是从pflag检索值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217105400-9luwmcx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217105400-9luwmcx",
				"updated": "20230217105416"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Viper 中使用 pflag 并不阻碍其他包中使用标准库中的 flag 包。pflag 包可以通过导入这些 flags 来处理flag包定义的flags。这是通过调用pflag包提供的便利函数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AddGoFlagSet()"
				},
				{
					"Type": "NodeText",
					"Data": "来实现的。"
				}
			]
		},
		{
			"ID": "20230217105444-hjog07l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217105444-hjog07l",
				"updated": "20230217105448"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如："
				}
			]
		},
		{
			"ID": "20230217105448-f34o1h2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217105448-f34o1h2",
				"updated": "20230217105458"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\n\nimport (\n\t\"flag\"\n\t\"github.com/spf13/pflag\"\n)\n\nfunc main() {\n\n\t// 使用标准库 \"flag\" 包\n\tflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\n\tpflag.CommandLine.AddGoFlagSet(flag.CommandLine)\n\tpflag.Parse()\n\tviper.BindPFlags(pflag.CommandLine)\n\n\ti := viper.GetInt(\"flagname\") // 从 viper 检索值\n\n\t...\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217105650-kchvdkb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217105650-kchvdkb",
				"updated": "20230217105714"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.7 viper绑定其他flag接口"
				}
			]
		},
		{
			"ID": "20230217105731-6412kkt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217105731-6412kkt",
				"updated": "20230217105749"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你不使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Pflag"
				},
				{
					"Type": "NodeText",
					"Data": "，Viper 提供了两个Go接口来绑定其他 flag 系统。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FlagValue"
				},
				{
					"Type": "NodeText",
					"Data": "表示单个flag，例如："
				}
			]
		},
		{
			"ID": "20230217105750-i50x7x0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217105750-i50x7x0",
				"updated": "20230217105800"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type myFlag struct {}\nfunc (f myFlag) HasChanged() bool { return false }\nfunc (f myFlag) Name() string { return \"my-flag-name\" }\nfunc (f myFlag) ValueString() string { return \"my-flag-value\" }\nfunc (f myFlag) ValueType() string { return \"string\" }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217105822-v3lxuey",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217105822-v3lxuey",
				"updated": "20230217105823"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦你的 flag 实现了这个接口，你可以很方便地告诉Viper绑定它："
				}
			]
		},
		{
			"ID": "20230217105826-vch1861",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217105826-vch1861",
				"updated": "20230217105843"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.BindFlagValue(\"my-flag-name\", myFlag{})\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217105912-u61urvs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217105912-u61urvs",
				"updated": "20230217105912"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FlagValueSet"
				},
				{
					"Type": "NodeText",
					"Data": "代表一组 flags 。这是一个关于如何实现这个接口的非常简单的例子:"
				}
			]
		},
		{
			"ID": "20230217105917-udmuay2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217105917-udmuay2",
				"updated": "20230217105920"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type myFlagSet struct {\n\tflags []myFlag\n}\n\nfunc (f myFlagSet) VisitAll(fn func(FlagValue)) {\n\tfor _, flag := range flags {\n\t\tfn(flag)\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217105929-sdupndq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217105929-sdupndq",
				"updated": "20230217105930"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦你的flag set实现了这个接口，你就可以很方便地告诉Viper绑定它："
				}
			]
		},
		{
			"ID": "20230217105936-9b3q6jd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217105936-9b3q6jd",
				"updated": "20230217105936"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "fSet := myFlagSet{\n\tflags: []myFlag{myFlag{}, myFlag{}},\n}\nviper.BindFlagValues(\"my-flags\", fSet)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217110019-tfhsq4z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217110019-tfhsq4z",
				"updated": "20230217110045"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.8 支持远端key/value存储"
				}
			]
		},
		{
			"ID": "20230217110055-4sohoxu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110055-4sohoxu",
				"updated": "20230217110055"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Viper中启用远程支持，需要在代码中匿名导入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "viper/remote"
				},
				{
					"Type": "NodeText",
					"Data": "这个包。"
				}
			]
		},
		{
			"ID": "20230217110055-dftipgw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110055-dftipgw",
				"updated": "20230217110055"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "import _ \u0026quot;github.com/spf13/viper/remote\u0026quot;"
				}
			]
		},
		{
			"ID": "20230217110136-6zwvyq1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110136-6zwvyq1",
				"updated": "20230217110157"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper将读取从Key/Value存储（例如etcd或Consul）中的路径检索到的配置字符串（如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "JSON"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "TOML"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "YAML"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HCL"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "envfile"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Java properties"
				},
				{
					"Type": "NodeText",
					"Data": "格式）。这些值的优先级高于默认值，但是会被从磁盘、flag或环境变量检索到的配置值覆盖。（也就是说Viper加载配置值的优先级为：磁盘上的配置文件\u003e命令行标志位\u003e环境变量\u003e远程Key/Value存储\u003e默认值。）"
				}
			]
		},
		{
			"ID": "20230217110152-3ngzh87",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110152-3ngzh87",
				"updated": "20230217110222"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/bketelsen/crypt",
					"TextMarkTextContent": "crypt"
				},
				{
					"Type": "NodeText",
					"Data": "从K/V存储中检索配置，这意味着如果你有正确的gpg密匙，你可以将配置值加密存储并自动解密。加密是可选的。"
				}
			]
		},
		{
			"ID": "20230217110229-z20dqnt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110229-z20dqnt",
				"updated": "20230217110229"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可以将远程配置与本地配置结合使用，也可以独立使用。"
				}
			]
		},
		{
			"ID": "20230217110229-sl5i8fc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110229-sl5i8fc",
				"updated": "20230217110229"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crypt"
				},
				{
					"Type": "NodeText",
					"Data": "有一个命令行助手，你可以使用它将配置放入K/V存储中。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crypt"
				},
				{
					"Type": "NodeText",
					"Data": "默认使用在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://127.0.0.1:4001/",
					"TextMarkTextContent": "http://127.0.0.1:4001"
				},
				{
					"Type": "NodeText",
					"Data": "的etcd。"
				}
			]
		},
		{
			"ID": "20230217110508-z6jm67x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217110508-z6jm67x",
				"updated": "20230217110508"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ go get github.com/bketelsen/crypt/bin/crypt\n$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217110514-rwfbym1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110514-rwfbym1",
				"updated": "20230217110515"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "确认值已经设置："
				}
			]
		},
		{
			"ID": "20230217110539-r5zx6k5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217110539-r5zx6k5",
				"updated": "20230217110539"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ crypt get -plaintext /config/hugo.json"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217110624-4xsiwnr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217110624-4xsiwnr",
				"updated": "20230217110635"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.9  远程Key/Value存储示例-未加密"
				}
			]
		},
		{
			"ID": "20230217110643-tulyo1v",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230217110643-tulyo1v",
				"updated": "20230217110700"
			},
			"Children": [
				{
					"ID": "20230217110644-t6ougfj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217110644-t6ougfj",
						"updated": "20230217110700"
					},
					"Children": [
						{
							"ID": "20230217110644-fwqecln",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217110644-fwqecln",
								"updated": "20230217110645"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "etcd"
								}
							]
						},
						{
							"ID": "20230217110657-je0ttmi",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230217110657-je0ttmi",
								"updated": "20230217110700"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "XA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "viper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\",\"/config/hugo.json\")\nviper.SetConfigType(\"json\") // 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230217110634-7wfh9i4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230217110634-7wfh9i4",
				"updated": "20230217110739"
			},
			"Children": [
				{
					"ID": "20230217110706-396yght",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217110706-396yght",
						"updated": "20230217110739"
					},
					"Children": [
						{
							"ID": "20230217110706-rlev3jm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217110706-rlev3jm",
								"updated": "20230217110712"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Consul"
								}
							]
						},
						{
							"ID": "20230217110722-cda2bfi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217110722-cda2bfi",
								"updated": "20230217110739"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "需要 Consul Key/Value存储中设置一个Key保存包含所需配置的JSON值。例如，创建一个key"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MY_CONSUL_KEY"
								},
								{
									"Type": "NodeText",
									"Data": "将下面的值存入Consul key/value 存储："
								}
							]
						},
						{
							"ID": "20230217110712-a8iwsr7",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230217110712-a8iwsr7",
								"updated": "20230217110721"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "XA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "{\n    \"port\": 8080,\n    \"hostname\": \"liwenzhou.com\"\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230217110752-a425qpf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217110752-a425qpf",
				"updated": "20230217110812"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.AddRemoteProvider(\"consul\", \"localhost:8500\", \"MY_CONSUL_KEY\")\nviper.SetConfigType(\"json\") // 需要显示设置成json\nerr := viper.ReadRemoteConfig()\n\nfmt.Println(viper.Get(\"port\")) // 8080\nfmt.Println(viper.Get(\"hostname\")) // liwenzhou.co\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217110816-uqrs239",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230217110816-uqrs239",
				"updated": "20230217110842"
			},
			"Children": [
				{
					"ID": "20230217110818-kehxs1u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217110818-kehxs1u",
						"updated": "20230217110842"
					},
					"Children": [
						{
							"ID": "20230217110818-4lebnzd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217110818-4lebnzd",
								"updated": "20230217110824"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FireStore"
								}
							]
						},
						{
							"ID": "20230217110826-8aqwnk3",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230217110826-8aqwnk3",
								"updated": "20230217110842"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "XA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "viper.AddRemoteProvider(\"firestore\", \"google-cloud-project-id\", \"collection/document\")\nviper.SetConfigType(\"json\") // 配置的格式: \"json\", \"toml\", \"yaml\", \"yml\"\nerr := viper.ReadRemoteConfig()\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230217110910-7abi6st",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217110910-7abi6st",
				"updated": "20230217110934"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SecureRemoteProvide"
				},
				{
					"Type": "NodeText",
					"Data": "."
				}
			]
		},
		{
			"ID": "20230217110929-69cvgp8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217110929-69cvgp8",
				"updated": "20230217110929"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.AddSecureRemoteProvider(\"etcd\",\"http://127.0.0.1:4001\",\"/config/hugo.json\",\"/etc/secrets/mykeyring.gpg\")\nviper.SetConfigType(\"json\") // 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217110954-2hbjtp0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217110954-2hbjtp0",
				"updated": "20230217111022"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.11 监控etcd中的更改-未加密"
				}
			]
		},
		{
			"ID": "20230217111022-8t1dmjf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111022-8t1dmjf",
				"updated": "20230217111031"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 或者你可以创建一个新的viper实例\nvar runtime_viper = viper.New()\n\nruntime_viper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\", \"/config/hugo.yml\")\nruntime_viper.SetConfigType(\"yaml\") // 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\n\n// 第一次从远程读取配置\nerr := runtime_viper.ReadRemoteConfig()\n\n// 反序列化\nruntime_viper.Unmarshal(\u0026runtime_conf)\n\n// 开启一个单独的goroutine一直监控远端的变更\ngo func(){\n\tfor {\n\t    time.Sleep(time.Second * 5) // 每次请求后延迟一下\n\n\t    // 目前只测试了etcd支持\n\t    err := runtime_viper.WatchRemoteConfig()\n\t    if err != nil {\n\t        log.Errorf(\"unable to read remote config: %v\", err)\n\t        continue\n\t    }\n\n\t    // 将新配置反序列化到我们运行时的配置结构体中。你还可以借助channel实现一个通知系统更改的信号\n\t    runtime_viper.Unmarshal(\u0026runtime_conf)\n\t}\n}()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111030-xuf56sv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217111030-xuf56sv",
				"updated": "20230217111207"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.12 从viper中获取值"
				}
			]
		},
		{
			"ID": "20230217111219-xbe47x7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111219-xbe47x7",
				"updated": "20230217111252"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Viper中，有几种方法可以根据值的类型获取值。存在以下功能和方法:"
				}
			]
		},
		{
			"ID": "20230217111256-i999fwn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111256-i999fwn",
				"updated": "20230217111301"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Get(key string) : interface{}\nGetBool(key string) : bool\nGetFloat64(key string) : float64\nGetInt(key string) : int\nGetIntSlice(key string) : []int\nGetString(key string) : string\nGetStringMap(key string) : map[string]interface{}\nGetStringMapString(key string) : map[string]string\nGetStringSlice(key string) : []string\nGetTime(key string) : time.Time\nGetDuration(key string) : time.Duration\nIsSet(key string) : bool\nAllSettings() : map[string]interface{}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111310-z9r3cyg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111310-z9r3cyg",
				"updated": "20230217111316"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "每一个Get方法在找不到值的时候都会返回零值。为了检查给定的键是否存在，提供了IsSet()方法。"
				}
			]
		},
		{
			"ID": "20230217111340-oivmxxi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111340-oivmxxi",
				"updated": "20230217111350"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如："
				}
			]
		},
		{
			"ID": "20230217111351-9zr6iee",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111351-9zr6iee",
				"updated": "20230217111358"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "viper.GetString(\"logfile\") // 不区分大小写的设置和获取\nif viper.GetBool(\"verbose\") {\n    fmt.Println(\"verbose enabled\")\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111416-q4yxrw1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230217111416-q4yxrw1",
				"updated": "20230217111437"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.12.1 访问嵌套的键"
				}
			]
		},
		{
			"ID": "20230217111450-b9q9s2d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111450-b9q9s2d",
				"updated": "20230217111451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "访问器方法也接受深度嵌套键的格式化路径。例如，如果加载下面的JSON文件："
				}
			]
		},
		{
			"ID": "20230217111452-qw5wru9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111452-qw5wru9",
				"updated": "20230217111502"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"port\": 5799\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111508-ztkbduo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111508-ztkbduo",
				"updated": "20230217111509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper可以通过传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "."
				},
				{
					"Type": "NodeText",
					"Data": "分隔的路径来访问嵌套字段："
				}
			]
		},
		{
			"ID": "20230217111528-cbxotz4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111528-cbxotz4",
				"updated": "20230217111528"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "GetString(\"datastore.metric.host\") // (返回 \"127.0.0.1\")"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111643-fvf56xw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111643-fvf56xw",
				"updated": "20230217111644"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "datastore.metric"
				},
				{
					"Type": "NodeText",
					"Data": "被直接赋值覆盖（被flag，环境变量，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set()"
				},
				{
					"Type": "NodeText",
					"Data": "方法等等…），那么"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "datastore.metric"
				},
				{
					"Type": "NodeText",
					"Data": "的所有子键都将变为未定义状态，它们被高优先级配置级别“遮蔽”（shadowed）了。"
				}
			]
		},
		{
			"ID": "20230217111711-ue6wl5o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111711-ue6wl5o",
				"updated": "20230217111712"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果存在与分隔的键路径匹配的键，则返回其值。例如："
				}
			]
		},
		{
			"ID": "20230217111713-cdu6mz3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111713-cdu6mz3",
				"updated": "20230217111721"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "{\n    \"datastore.metric.host\": \"0.0.0.0\",\n    \"host\": {\n        \"address\": \"localhost\",\n        \"port\": 5799\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n\nGetString(\"datastore.metric.host\") // 返回 \"0.0.0.0\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111733-dj1xxfp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230217111733-dj1xxfp",
				"updated": "20230217111756"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.12.2 提取子树"
				}
			]
		},
		{
			"ID": "20230217111826-6twli9t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111826-6twli9t",
				"updated": "20230217111837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从Viper中提取子树。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "viper"
				},
				{
					"Type": "NodeText",
					"Data": "实例现在代表了以下配置："
				}
			]
		},
		{
			"ID": "20230217111757-o15t8ae",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111757-o15t8ae",
				"updated": "20230217111806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "app:\n  cache1:\n    max-items: 100\n    item-size: 64\n  cache2:\n    max-items: 200\n    item-size: 80\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111812-v3t0gcm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111812-v3t0gcm",
				"updated": "20230217111843"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行后："
				}
			]
		},
		{
			"ID": "20230217111945-de7ymtw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217111945-de7ymtw",
				"updated": "20230217112002"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "subv := viper.Sub(\"app.cache1\")\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217111858-78xfb73",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217111858-78xfb73",
				"updated": "20230217112013"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "subv就代表"
				}
			]
		},
		{
			"ID": "20230217112013-jlj7bje",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217112013-jlj7bje",
				"updated": "20230217112023"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "max-items: 100\nitem-size: 64\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217112042-lyhjs9t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230217112042-lyhjs9t",
				"updated": "20230217112054"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.12.3 反序列化"
				}
			]
		},
		{
			"ID": "20230217112054-9jdt7q6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112054-9jdt7q6",
				"updated": "20230217112106"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以选择将所有或特定的值解析到结构体、map等。"
				}
			]
		},
		{
			"ID": "20230217112108-nl6f890",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112108-nl6f890",
				"updated": "20230217112124"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "存在两种方法："
				}
			]
		},
		{
			"ID": "20230217112125-nmk7e6e",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230217112125-nmk7e6e",
				"updated": "20230217112125"
			},
			"Children": [
				{
					"ID": "20230217112125-0f5pcyf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217112125-0f5pcyf"
					},
					"Children": [
						{
							"ID": "20230217112125-t2xa0bq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217112125-t2xa0bq"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Unmarshal(rawVal interface{}) : error"
								}
							]
						}
					]
				},
				{
					"ID": "20230217112125-dkqopig",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230217112125-dkqopig"
					},
					"Children": [
						{
							"ID": "20230217112125-v5meylj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230217112125-v5meylj"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "UnmarshalKey(key string, rawVal interface{}) : error"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230217112132-z6pnxhh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112132-z6pnxhh",
				"updated": "20230217112134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如："
				}
			]
		},
		{
			"ID": "20230217112216-t80y2dq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217112216-t80y2dq",
				"updated": "20230217112221"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type config struct {\n\tPort int\n\tName string\n\tPathMap string `mapstructure:\"path_map\"`\n}\n\nvar C config\n\nerr := viper.Unmarshal(\u0026C)\nif err != nil {\n\tt.Fatalf(\"unable to decode into struct, %v\", err)\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217112244-2yq0ql3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112244-2yq0ql3",
				"updated": "20230217112314"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "想要解析那些键本身就包含"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "."
				},
				{
					"Type": "NodeText",
					"Data": "(默认的键分隔符）的配置，你需要修改分隔符："
				}
			]
		},
		{
			"ID": "20230217112328-hvgmpdd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217112328-hvgmpdd",
				"updated": "20230217112328"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "v := viper.NewWithOptions(viper.KeyDelimiter(\"::\"))\n\nv.SetDefault(\"chart::values\", map[string]interface{}{\n    \"ingress\": map[string]interface{}{\n        \"annotations\": map[string]interface{}{\n            \"traefik.frontend.rule.type\":                 \"PathPrefix\",\n            \"traefik.ingress.kubernetes.io/ssl-redirect\": \"true\",\n        },\n    },\n})\n\ntype config struct {\n\tChart struct{\n        Values map[string]interface{}\n    }\n}\n\nvar C config\n\nv.Unmarshal(\u0026C)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217112420-iqus2aa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112420-iqus2aa",
				"updated": "20230217112457"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "viper还支持解析到嵌入的结构体"
				}
			]
		},
		{
			"ID": "20230217112458-nifxrem",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217112458-nifxrem",
				"updated": "20230217112503"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/*\nExample config:\n\nmodule:\n    enabled: true\n    token: 89h3f98hbwf987h3f98wenf89ehf\n*/\ntype config struct {\n\tModule struct {\n\t\tEnabled bool\n\n\t\tmoduleConfig `mapstructure:\",squash\"`\n\t}\n}\n\n// moduleConfig could be in a module specific package\ntype moduleConfig struct {\n\tToken string\n}\n\nvar C config\n\nerr := viper.Unmarshal(\u0026C)\nif err != nil {\n\tt.Fatalf(\"unable to decode into struct, %v\", err)\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217112552-l4efs9g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112552-l4efs9g",
				"updated": "20230217112552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Viper在后台使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/mitchellh/mapstructure",
					"TextMarkTextContent": "github.com/mitchellh/mapstructure"
				},
				{
					"Type": "NodeText",
					"Data": "来解析值，其默认情况下使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mapstructure"
				},
				{
					"Type": "NodeText",
					"Data": "tag。"
				}
			]
		},
		{
			"ID": "20230217112552-zkjnjsj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112552-zkjnjsj",
				"updated": "20230217112559"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意"
				},
				{
					"Type": "NodeText",
					"Data": " 当我们需要将viper读取的配置反序列到我们定义的结构体变量中时，一定要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mapstructure"
				},
				{
					"Type": "NodeText",
					"Data": "tag！"
				}
			]
		},
		{
			"ID": "20230217112612-vf3g4m6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230217112612-vf3g4m6",
				"updated": "20230217112629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.12.4 序列化字符串"
				}
			]
		},
		{
			"ID": "20230217112657-8gpmgq3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217112657-8gpmgq3",
				"updated": "20230217112731"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以将viper中保存的所有设置序列化到一个字符串中，而不是将它们写入到一个文件。将自己喜欢的格式的序列化器与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AllSettings()"
				},
				{
					"Type": "NodeText",
					"Data": "返回的配置一起使用。"
				}
			]
		},
		{
			"ID": "20230217112630-fmva3ba",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217112630-fmva3ba",
				"updated": "20230217112643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import (\n    yaml \"gopkg.in/yaml.v2\"\n    // ...\n)\n\nfunc yamlStringSettings() string {\n    c := viper.AllSettings()\n    bs, err := yaml.Marshal(c)\n    if err != nil {\n        log.Fatalf(\"unable to marshal config to YAML: %v\", err)\n    }\n    return string(bs)\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217113045-nefy01b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217113045-nefy01b",
				"updated": "20230217113105"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1.13 使用 多个Viper实例"
				}
			]
		},
		{
			"ID": "20230217113131-172bpfo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230217113131-172bpfo",
				"updated": "20230217113209"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以在应用程序中创建许多不同的viper实例。每个都有自己独特的一组配置和值。每个人都可以从不同的配置文件，key value存储区等读取数据。每个都可以从不同的配置文件、键值存储等中读取。viper包支持的所有功能都被镜像为viper实例的方法。例如："
				}
			]
		},
		{
			"ID": "20230217113210-n6ay85x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217113210-n6ay85x",
				"updated": "20230217113213"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "x := viper.New()\ny := viper.New()\n\nx.SetDefault(\"ContentDir\", \"content\")\ny.SetDefault(\"ContentDir\", \"foobar\")\n\n//...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230217113138-6p6k96k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230217113138-6p6k96k",
				"updated": "20230217113236"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1.14 使用Viper示例"
				}
			]
		},
		{
			"ID": "20230217113302-bp8eihe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230217113302-bp8eihe",
				"updated": "20230217113532"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/fsnotify/fsnotify\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n\t\"net/http\"\n)\n\ntype Config struct {\n\tPort int `mapstructure:\"port\"`\n\tVersion string `mapstructure:\"version\"`\n}\n\nvar Conf = new(Config)\n\nfunc main() {\n\tviper.SetConfigName(\"config\")\n\tviper.AddConfigPath(\"./conf\")\n\tviper.SetConfigType(\"yaml\")\n\n\terr := viper.ReadInConfig()\n\tif err != nil {\n\t\tfmt.Printf(\"Fatal error config file: %s \\n\", err)\n\t}\n\n\tif err := viper.Unmarshal(Conf); err != nil {\n\t\tfmt.Printf(\"Unmarshal error: err=%v\\n\", err)\n \t}\n\n\t// 监控配置文件变化\n\tviper.WatchConfig()\n\n\tviper.OnConfigChange(func(in fsnotify.Event) {\n\t\tif err := viper.Unmarshal(Conf); err != nil {\n\t\t\tfmt.Printf(\"Unmarshal error: %v\\n\", err)\n\t\t}\n\t})\n\n\tr := gin.Default()\n\t// 访问/version的返回值会随配置文件的变化而变化\n\tr.GET(\"/version\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, Conf.Version)\n\t})\n\tfmt.Printf(\"Port:%d, Version:%s\\n\", Conf.Port, Conf.Version)\n\n\tif err := r.Run(fmt.Sprintf(\":%d\", Conf.Port)); err != nil {\n \t\treturn\n\t}\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}