{
	"ID": "20221115161601-mr76i2v",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221115161601-mr76i2v",
		"title": "Kubernetes API 聚合开发汇总",
		"updated": "20230110084403"
	},
	"Children": [
		{
			"ID": "20221115161601-ci4nmrf",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20221115161601-ci4nmrf"
			}
		},
		{
			"ID": "20221115161601-rl41sru",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-rl41sru",
				"updated": "20221115161755"
			},
			"Children": [
				{
					"ID": "20221115161601-5oifuuw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-5oifuuw"
					},
					"Children": [
						{
							"ID": "20221115161601-i8va5ql",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-i8va5ql"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/weixin_38299404/article/details/121038582",
									"TextMarkTextContent": "https://blog.csdn.net/weixin_38299404/article/details/121038582"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-y7aqcuw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-y7aqcuw",
						"updated": "20221115161755"
					},
					"Children": [
						{
							"ID": "20221115161601-udjfady",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-udjfady",
								"updated": "20221115161755"
							}
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-wy7gbl3",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20221115161601-wy7gbl3"
			}
		},
		{
			"ID": "20221115161601-7xn1ssv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221115161601-7xn1ssv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. Kubernetes API 聚合开发"
				}
			]
		},
		{
			"ID": "20221115161601-13jmb08",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-13jmb08"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自定义资源实际上是为了扩展 kubernetes 的 API，向 kubenetes API 中增加新类型，可以使用以下三种方式："
				}
			]
		},
		{
			"ID": "20221115161601-yfsrabs",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-yfsrabs"
			},
			"Children": [
				{
					"ID": "20221115161601-9etntz3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-9etntz3"
					},
					"Children": [
						{
							"ID": "20221115161601-ek6p4lc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ek6p4lc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "修改 kubenetes 的源码，显然难度比较高，也不太合适"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-ff48daz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-ff48daz"
					},
					"Children": [
						{
							"ID": "20221115161601-0ajozkb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-0ajozkb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建自定义 API server 并聚合到 API 中"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-sis3psw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-sis3psw"
					},
					"Children": [
						{
							"ID": "20221115161601-df35n4b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-df35n4b"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建自定义资源(CRD)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-cokgt5h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221115161601-cokgt5h"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 CRD存在的问题"
				}
			]
		},
		{
			"ID": "20221115161601-o68nnep",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-o68nnep"
			},
			"Children": [
				{
					"ID": "20221115161601-d2nwwss",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-d2nwwss"
					},
					"Children": [
						{
							"ID": "20221115161601-c1pzpvz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-c1pzpvz"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "只支持 etcd"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-aj9ubl4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221115161601-aj9ubl4"
					},
					"Children": [
						{
							"ID": "20221115161601-qa9azs6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-qa9azs6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "只支持JSON，不支持 protobuf （一种高性能的序列化语言）"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-oepoej9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221115161601-oepoej9"
					},
					"Children": [
						{
							"ID": "20221115161601-bet7abv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-bet7abv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "只支持2种子资源接口 （ /status 和 /scale）"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-aggo8lg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221115161601-aggo8lg"
					},
					"Children": [
						{
							"ID": "20221115161601-cag4v6w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-cag4v6w"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不支持优雅删除"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-60a7xdq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20221115161601-60a7xdq"
					},
					"Children": [
						{
							"ID": "20221115161601-oel5bqr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-oel5bqr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显著增加 api server 负担"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-8kwp1j7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20221115161601-8kwp1j7"
					},
					"Children": [
						{
							"ID": "20221115161601-uj7p99z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-uj7p99z"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "只支持 CRUD 原语"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-nydz2pb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20221115161601-nydz2pb"
					},
					"Children": [
						{
							"ID": "20221115161601-r9am39k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-r9am39k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不支持跨 API groups 共享存储"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-lt7ariw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221115161601-lt7ariw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 自定义API server相比CRD的优势"
				}
			]
		},
		{
			"ID": "20221115161601-hmuxrg6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-hmuxrg6"
			},
			"Children": [
				{
					"ID": "20221115161601-7r376nc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-7r376nc"
					},
					"Children": [
						{
							"ID": "20221115161601-kagtyc9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-kagtyc9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "底层存储无关（像metrics server 存在内存里面）"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-9lmy445",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221115161601-9lmy445"
					},
					"Children": [
						{
							"ID": "20221115161601-43m0ihx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-43m0ihx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持 protobuf"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-0cabzws",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221115161601-0cabzws"
					},
					"Children": [
						{
							"ID": "20221115161601-ou5ogl4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ou5ogl4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持任意自定义子资源"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-ixsglp2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221115161601-ixsglp2"
					},
					"Children": [
						{
							"ID": "20221115161601-qjsq1ds",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-qjsq1ds"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以实现优雅删除"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-0b189uo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20221115161601-0b189uo"
					},
					"Children": [
						{
							"ID": "20221115161601-65tjssu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-65tjssu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持复杂验证"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-74mt57g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20221115161601-74mt57g"
					},
					"Children": [
						{
							"ID": "20221115161601-eb3wqh3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-eb3wqh3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持自定义语义"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-zbyni4g",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221115161601-zbyni4g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3 使用自定义API server前先考虑以下几点"
				}
			]
		},
		{
			"ID": "20221115161601-b6ckodo",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-b6ckodo"
			},
			"Children": [
				{
					"ID": "20221115161601-mom8har",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-mom8har"
					},
					"Children": [
						{
							"ID": "20221115161601-dz880wo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-dz880wo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "你的 API 是否属于 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://kubernetes.io/docs/concepts/api-extension/custom-resources/#declarative-apis",
									"TextMarkTextContent": "声明式的"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-b1z670h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221115161601-b1z670h"
					},
					"Children": [
						{
							"ID": "20221115161601-r97t1ac",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-r97t1ac"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否想使用 kubectl 命令来管理"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-86sf327",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221115161601-86sf327"
					},
					"Children": [
						{
							"ID": "20221115161601-w2pchml",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-w2pchml"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否要作为 kubenretes 中的对象类型来管理，同时显示在 kubernetes dashboard 上"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-dujdu6z",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221115161601-dujdu6z"
					},
					"Children": [
						{
							"ID": "20221115161601-dd1r6gw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-dd1r6gw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否可以遵守 kubernetes 的 API 规则限制，例如 URL 和 API group、namespace 限制"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-hhrbo52",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20221115161601-hhrbo52"
					},
					"Children": [
						{
							"ID": "20221115161601-55kbrv2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-55kbrv2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否可以接受该 API 只能作用于集群或者 namespace 范围"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-0i1rq5j",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20221115161601-0i1rq5j"
					},
					"Children": [
						{
							"ID": "20221115161601-tzqzkxw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-tzqzkxw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "想要复用 kubernetes API 的公共功能，比如 CRUD、watch、内置的认证和授权等"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-kl90c2p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221115161601-kl90c2p"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.4 Kubernetes APIServer 和 自定义APIServer的关系"
				}
			]
		},
		{
			"ID": "20221115161601-2m5kcy2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221115161601-2m5kcy2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.4.1 Kubernetes 的 Aggregated API是什么？"
				}
			]
		},
		{
			"ID": "20221115161601-92jdlx2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-92jdlx2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1 概述"
				}
			]
		},
		{
			"ID": "20221115161601-ppr5ur8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-ppr5ur8"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Aggregated（聚合的）API server"
				},
				{
					"Type": "NodeText",
					"Data": " 是为了将原来的 API server 这个巨石（monolithic）应用给拆分开，为了方便用户开发自己的 API server 集成进来，而不用直接修改 Kubernetes 官方仓库的代码，这样一来也能将 API server 解耦，方便用户使用实验特性，简而言之，它是允许k8s的开发人员编写一个自己的服务，可以把这个服务注册到k8s的api里面，这样，就像k8s自己的api一样，自定义的服务只要运行在k8s集群里面，k8s 的Aggregate通过service名称就可以转发到我们自定义的service里面去了。这些 API server 可以跟 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kube-apiserver"
				},
				{
					"Type": "NodeText",
					"Data": " 无缝衔接，使用 kubectl 也可以管理它们。"
				}
			]
		},
		{
			"ID": "20221115161601-yb3xzgv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-yb3xzgv",
				"updated": "20221115161916"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1.7+"
				},
				{
					"Type": "NodeText",
					"Data": " 版本及以后，聚合层apiserver和 kube-apiserver 一起运行。在扩展资源被注册前，聚合层不执行任何操，要注册其 API，用户必需添加一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "APIService"
				},
				{
					"Type": "NodeText",
					"Data": " 对象，该对象需在 Kubernetes API 中声明 URL 路径，聚合层将发送到该 API 路径(e.g. /apis/myextension.mycompany.io/v1/…)的所有对象代理到注册的 APIService。"
				}
			]
		},
		{
			"ID": "20221115161601-27rr4hg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-27rr4hg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通常，通过在集群中的一个 Pod 中运行一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "extension-apiserver"
				},
				{
					"Type": "NodeText",
					"Data": " 来实现 APIService。如果已添加的资源需要主动管理，这个 extension-apiserver 通常需要和一个或多个controller配对。"
				}
			]
		},
		{
			"ID": "20221115161601-lz0ktsc",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-lz0ktsc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2 设计理念"
				}
			]
		},
		{
			"ID": "20221115161601-7f3sk0g",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-7f3sk0g"
			},
			"Children": [
				{
					"ID": "20221115161601-vgtls99",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-vgtls99"
					},
					"Children": [
						{
							"ID": "20221115161601-vas4p9a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-vas4p9a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "api的扩展性：这样k8s的开发人员就可以编写自己的API服务器来公开他们想要的API。集群管理员应该能够使用这些服务，而不需要对核心库存储库进行任何更改。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-ediggo9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-ediggo9"
					},
					"Children": [
						{
							"ID": "20221115161601-wfqzyah",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-wfqzyah"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "丰富了APIs：核心kubernetes团队阻止了很多新的API提案。通过允许开发人员将他们的API作为单独的服务器公开，并使集群管理员能够在不对核心库存储库进行任何更改的情况下使用它们，这样就无须社区繁杂的审查了。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-u8kgqys",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-u8kgqys"
					},
					"Children": [
						{
							"ID": "20221115161601-ixrlit2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ixrlit2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开发分阶段实验性API的地方：新的API可以在单独的聚集服务器中开发，当它稳定之后，那么把它们封装起来安装到其他集群就很容易了。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-onlb6l2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-onlb6l2"
					},
					"Children": [
						{
							"ID": "20221115161601-36ehlty",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-36ehlty"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "确保新API遵循kubernetes约定：如果没有这里提出的机制，社区成员可能会被迫推出自己的东西，这可能会或可能不遵循kubernetes约定。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-m37miy8",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-m37miy8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.3 Kubernetes Aggregated原理解析"
				}
			]
		},
		{
			"ID": "20221115161601-zb204fi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-zb204fi"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们说的自定义API其实就是和Metrics Server的实现方式一样，都是通过注册API的形式来完成和Kubernetes的集成的，也就是在API Server增加原本没有的API。不过添加API还可以通过CRD的方式完成，不过我们这里直说聚合方式。看下图："
				}
			]
		},
		{
			"ID": "20221115161601-wyzjf1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-wyzjf1c"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/8db702d68ef05d621a102e36bbe4f6c6-20221115161601-hkal0sg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-y64tr6b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-y64tr6b"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kube-Aggregator类似于一个七层负载均衡，将来自用户的请求拦截转发给其他服务器，并且负责整个 APIServer 的 Discovery 功能。"
				}
			]
		},
		{
			"ID": "20221115161601-uzpknd2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-uzpknd2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过APIServices对象关联到某个Service来进行请求的转发，其关联的Service类型进一步决定了请求转发形式。Aggregator包括一个GenericAPIServer和维护自身状态的Controller。其中 GenericAPIServer主要处理apiregistration.k8s.io组下的APIService资源请求。"
				}
			]
		},
		{
			"ID": "20221115161601-qlz1hen",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-qlz1hen"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要controller包括："
				}
			]
		},
		{
			"ID": "20221115161601-ar48y6s",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-ar48y6s"
			},
			"Children": [
				{
					"ID": "20221115161601-8mhnyc7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-8mhnyc7"
					},
					"Children": [
						{
							"ID": "20221115161601-dces9tc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-dces9tc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "apiserviceRegistrationController：负责APIServices中资源的注册与删除；"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-bo561mh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-bo561mh"
					},
					"Children": [
						{
							"ID": "20221115161601-38c97zl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-38c97zl"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "availableConditionController：维护APIServices的可用状态，包括其引用Service是否可用等；"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-4ieb94h",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-4ieb94h"
					},
					"Children": [
						{
							"ID": "20221115161601-o3x0gwa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-o3x0gwa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "autoRegistrationController：用于保持API中存在的一组特定的APIServices；"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-bkif21r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-bkif21r"
					},
					"Children": [
						{
							"ID": "20221115161601-fmmlm32",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-fmmlm32"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "crdRegistrationController：负责将CRD GroupVersions自动注册到APIServices中；"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-1fgmist",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-1fgmist"
					},
					"Children": [
						{
							"ID": "20221115161601-a0ff5xj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-a0ff5xj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "openAPIAggregationController：将APIServices资源的变化同步至提供的OpenAPI文档；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-2ufscq5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-2ufscq5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设有两个路由分别访问API，实际上我们访问API的时候访问的是一个aggregator的代理层，下面橙色的都是可用的服务后端。我们访问上图中的2个URL其实是被代理到不同的后端，在这个机制下你可以添加更多的后端，比如举例说说Custome-metrics-apiserver绿色线条的路径。"
				}
			]
		},
		{
			"ID": "20221115161601-ff2ffoq",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-ff2ffoq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注册自定义API文件"
				}
			]
		},
		{
			"ID": "20221115161601-vg8709w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-vg8709w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该文件的主要作用就是向Api server注册一个api，此API名称是关联到一个service名称上。"
				}
			]
		},
		{
			"ID": "20221115161601-n7jmocm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-n7jmocm"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eWFtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiVersion: apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\n  name: v1beta1.custom.metrics.k8s.io\n  labels:\n    api: custom-metrics-apiserver\n    apiserver: \"true\"\nspec:\n  version: v1beta1 #API版本\n  group: custom.metrics.k8s.io #API所属的组\n  groupPriorityMinimum: 2000\n  service:\n    name: custom-metrics-apiserver #自定义API所关联的service名称，当访问这个自定义API后转发到哪个service处理，就根据这个service名称选择\n    namespace: default\n  versionPriority: 10\n  caBundle: \"LS0tLS1CRUdJTiBDRVJUSUZJQ0\"\n12345678910111213141516\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-6sahqsg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-6sahqsg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面定义了资源类型为APIService，service名称为custom-metrics-apiserver，空间为default的一个资源聚合接口。"
				}
			]
		},
		{
			"ID": "20221115161601-fgo0p9q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-fgo0p9q"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面带大家从源代码的角度来看，代码路径：\n staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiservice_controller.go ，和k8s其它controller一样，watch变化分发到add、update和delete方法"
				}
			]
		},
		{
			"ID": "20221115161601-cmtqa3n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-cmtqa3n"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tapiServiceInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{ \n\t\tAddFunc:    c.addAPIService,\n\t\tUpdateFunc: c.updateAPIService,\n\t\tDeleteFunc: c.deleteAPIService,\n\t})\n12345\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-w323jx6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-w323jx6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要监听两种资源apiService和service，路径："
				}
			]
		},
		{
			"ID": "20221115161601-98rpi8e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-98rpi8e"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver.go"
				}
			]
		},
		{
			"ID": "20221115161601-ck8e874",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-ck8e874"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func (s *APIAggregator) AddAPIService(apiService *v1.APIService) error { \n\t// if the proxyHandler already exists, it needs to be updated. The aggregation bits do not\n\t// since they are wired against listers because they require multiple resources to respond\n\tif proxyHandler, exists := s.proxyHandlers[apiService.Name]; exists { \n\t\tproxyHandler.updateAPIService(apiService)\n\t\tif s.openAPIAggregationController != nil { \n\t\t\ts.openAPIAggregationController.UpdateAPIService(proxyHandler, apiService)\n\t\t}\n\t\treturn nil\n\t}\n\n\tproxyPath := \"/apis/\" + apiService.Spec.Group + \"/\" + apiService.Spec.Version\n\t// v1. is a special case for the legacy API.  It proxies to a wider set of endpoints.\n\tif apiService.Name == legacyAPIServiceName { \n\t\tproxyPath = \"/api\"\n\t}\n\n\t// register the proxy handler\n\tproxyHandler := \u0026proxyHandler{ \n\t\tlocalDelegate:              s.delegateHandler,\n\t\tproxyCurrentCertKeyContent: s.proxyCurrentCertKeyContent,\n\t\tproxyTransport:             s.proxyTransport,\n\t\tserviceResolver:            s.serviceResolver,\n\t\tegressSelector:             s.egressSelector,\n\t}\n\tproxyHandler.updateAPIService(apiService)\n\tif s.openAPIAggregationController != nil { \n\t\ts.openAPIAggregationController.AddAPIService(proxyHandler, apiService)\n\t}\n\ts.proxyHandlers[apiService.Name] = proxyHandler\n\ts.GenericAPIServer.Handler.NonGoRestfulMux.Handle(proxyPath, proxyHandler)\n\ts.GenericAPIServer.Handler.NonGoRestfulMux.UnlistedHandlePrefix(proxyPath+\"/\", proxyHandler)\n\n\t// if we're dealing with the legacy group, we're done here\n\tif apiService.Name == legacyAPIServiceName { \n\t\treturn nil\n\t}\n\n\t// if we've already registered the path with the handler, we don't want to do it again.\n\tif s.handledGroups.Has(apiService.Spec.Group) { \n\t\treturn nil\n\t}\n\n\t// it's time to register the group aggregation endpoint\n\tgroupPath := \"/apis/\" + apiService.Spec.Group\n\tgroupDiscoveryHandler := \u0026apiGroupHandler{ \n\t\tcodecs:    aggregatorscheme.Codecs,\n\t\tgroupName: apiService.Spec.Group,\n\t\tlister:    s.lister,\n\t\tdelegate:  s.delegateHandler,\n\t}\n\t// aggregation is protected\n\ts.GenericAPIServer.Handler.NonGoRestfulMux.Handle(groupPath, groupDiscoveryHandler)\n\ts.GenericAPIServer.Handler.NonGoRestfulMux.UnlistedHandle(groupPath+\"/\", groupDiscoveryHandler)\n\ts.handledGroups.Insert(apiService.Spec.Group)\n\treturn nil\n}\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-wh1gxpb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-wh1gxpb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结合上面的源码："
				}
			]
		},
		{
			"ID": "20221115161601-5jizyur",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-5jizyur"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "proxyPath := \"/apis/\" + apiService.Spec.Group + \"/\" + apiService.Spec.Version\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-agl7ag8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-agl7ag8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例子就是/apis/custom-metrics.k8s.io/v1beta1，而处理方法请求的handle就是"
				}
			]
		},
		{
			"ID": "20221115161601-khw0z5y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-khw0z5y"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t// register the proxy handler\n\tproxyHandler := \u0026proxyHandler{ \n\t\tlocalDelegate:              s.delegateHandler,\n\t\tproxyCurrentCertKeyContent: s.proxyCurrentCertKeyContent,\n\t\tproxyTransport:             s.proxyTransport,\n\t\tserviceResolver:            s.serviceResolver,\n\t\tegressSelector:             s.egressSelector,\n\t}\n\tproxyHandler.updateAPIService(apiService)\n123456789\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-k0ungy9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-k0ungy9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "updateAPIService就是更新这个proxy的后端service，路径："
				}
			]
		},
		{
			"ID": "20221115161601-ls4qoy9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-ls4qoy9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy.go"
				}
			]
		},
		{
			"ID": "20221115161601-tlrzr3a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-tlrzr3a"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func (r *proxyHandler) updateAPIService(apiService *apiregistrationv1api.APIService) { \n\tif apiService.Spec.Service == nil { \n\t\tr.handlingInfo.Store(proxyHandlingInfo{ local: true})\n\t\treturn\n\t}\n\n\tproxyClientCert, proxyClientKey := r.proxyCurrentCertKeyContent()\n\n\tnewInfo := proxyHandlingInfo{ \n\t\tname: apiService.Name,\n\t\trestConfig: \u0026restclient.Config{ \n\t\t\tTLSClientConfig: restclient.TLSClientConfig{ \n\t\t\t\tInsecure:   apiService.Spec.InsecureSkipTLSVerify,\n\t\t\t\tServerName: apiService.Spec.Service.Name + \".\" + apiService.Spec.Service.Namespace + \".svc\",\n\t\t\t\tCertData:   proxyClientCert,\n\t\t\t\tKeyData:    proxyClientKey,\n\t\t\t\tCAData:     apiService.Spec.CABundle,\n\t\t\t},\n\t\t},\n\t\tserviceName:      apiService.Spec.Service.Name,\n\t\tserviceNamespace: apiService.Spec.Service.Namespace,\n\t\tservicePort:      *apiService.Spec.Service.Port,\n\t\tserviceAvailable: apiregistrationv1apihelper.IsAPIServiceConditionTrue(apiService, apiregistrationv1api.Available),\n\t}\n\tif r.egressSelector != nil { \n\t\tnetworkContext := egressselector.Cluster.AsNetworkContext()\n\t\tvar egressDialer utilnet.DialFunc\n\t\tegressDialer, err := r.egressSelector.Lookup(networkContext)\n\t\tif err != nil { \n\t\t\tklog.Warning(err.Error())\n\t\t} else { \n\t\t\tnewInfo.restConfig.Dial = egressDialer\n\t\t}\n\t} else if r.proxyTransport != nil \u0026\u0026 r.proxyTransport.DialContext != nil { \n\t\tnewInfo.restConfig.Dial = r.proxyTransport.DialContext\n\t}\n\tnewInfo.proxyRoundTripper, newInfo.transportBuildingError = restclient.TransportFor(newInfo.restConfig)\n\tif newInfo.transportBuildingError != nil { \n\t\tklog.Warning(newInfo.transportBuildingError.Error())\n\t}\n\tr.handlingInfo.Store(newInfo)\n}\n123456789101112131415161718192021222324252627282930313233343536373839404142\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-ij2pxz7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-ij2pxz7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述源码中restConfig就是调用service的客户端参数，其中"
				}
			]
		},
		{
			"ID": "20221115161601-yijjlql",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-yijjlql"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ServerName: apiService.Spec.Service.Name + \".\" + apiService.Spec.Service.Namespace + \".svc\"\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-0f270v5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-0f270v5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "指的就是具体的service。"
				}
			]
		},
		{
			"ID": "20221115161601-i61nm8g",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221115161601-i61nm8g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.4.2 认证流程"
				}
			]
		},
		{
			"ID": "20221115161601-0kqy1b9",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-0kqy1b9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "工作方式"
				}
			]
		},
		{
			"ID": "20221115161601-bg4vmd9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-bg4vmd9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与自定义资源定义（CRD）不同，除标准的 Kubernetes kube-apiserver 外，Aggregation API 还涉及另一个服务器："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Extension apiserver"
				},
				{
					"Type": "NodeText",
					"Data": "。Kubernetes kube-apiserver 将需要与自定义的 Extension apiserver 通信，并且自定义的 Extension apiserver 也需要与 Kubernetes kube-apiserver 通信。为了确保此通信的安全，Kubernetes kube-apiserver 使用 x509 证书向 Extension apiserver 认证。具体流程如下：\n "
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/00ae7426a3484d3fbe4ce90be136515e-20221115161601-or4k8ha.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-esgaf1g",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-esgaf1g"
			},
			"Children": [
				{
					"ID": "20221115161601-87vqspb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-87vqspb"
					},
					"Children": [
						{
							"ID": "20221115161601-2dcnttq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-2dcnttq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Kubernetes kube-apiserver：对发出请求的用户身份认证，并对请求的 API 路径执行鉴权"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-k1ekpww",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221115161601-k1ekpww"
					},
					"Children": [
						{
							"ID": "20221115161601-ta4j3ru",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ta4j3ru"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Kubernetes kube-apiserver (aggregator)：将请求转发到 Extension apiserver (aggregated apiserver)"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-6pjtqzx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221115161601-6pjtqzx"
					},
					"Children": [
						{
							"ID": "20221115161601-xyxel1c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-xyxel1c"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Extension apiserver：认证来自 Kubernetes kube-apiserver 的请求"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-1vs7tf8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221115161601-1vs7tf8"
					},
					"Children": [
						{
							"ID": "20221115161601-o43jaoz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-o43jaoz"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Extension apiserver：对来自原始用户的请求鉴权"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-bxt5kkr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20221115161601-bxt5kkr"
					},
					"Children": [
						{
							"ID": "20221115161601-bzs2mz9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-bzs2mz9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Extension apiserver：执行"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-71bp22g",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-71bp22g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubernetes kube-apiserver 认证和授权"
				}
			]
		},
		{
			"ID": "20221115161601-7b5wg8f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-7b5wg8f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们已经在 Kubernetes kube-apiserver 注册了 Extension apiserver。"
				}
			]
		},
		{
			"ID": "20221115161601-86rvxbq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-86rvxbq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当用户请求访问 path ，Kubernetes kube-apiserver 使用它的标准认证和授权配置来对用户认证，以及对特定 path 的鉴权，到目前为止，所有内容都是标准的 Kubernetes API 请求，认证与鉴权，接下来 Kubernetes kube-apiserver 现在准备将请求发送到 Extension apiserver。"
				}
			]
		},
		{
			"ID": "20221115161601-4dhzi5x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-4dhzi5x",
				"updated": "20221115163912"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubernetes kube-apiserver认证时，认证结束会将认证信息删除，处理逻辑如下："
				}
			]
		},
		{
			"ID": "20221115161601-zkleway",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-zkleway"
			},
			"Children": [
				{
					"ID": "20221115161601-vb8n5ah",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-vb8n5ah"
					},
					"Children": [
						{
							"ID": "20221115161601-v9vu8dn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-v9vu8dn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1.通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "context"
								},
								{
									"Type": "NodeText",
									"Data": "获取user信息"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-47uc7in",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-47uc7in"
					},
					"Children": [
						{
							"ID": "20221115161601-0460q52",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-0460q52"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2.构造请求，删除requestheader信息，通过user重新填充"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-wao3ldq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-wao3ldq"
					},
					"Children": [
						{
							"ID": "20221115161601-xhnqi0v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-xhnqi0v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3.通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "proxyRoundTripper"
								},
								{
									"Type": "NodeText",
									"Data": "转发请求"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-pi0w45g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-pi0w45g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码路径："
				}
			]
		},
		{
			"ID": "20221115161601-k6fascw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-k6fascw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy.go"
				}
			]
		},
		{
			"ID": "20221115161601-g79x88x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-g79x88x"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func (r *proxyHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) { \n\tvalue := r.handlingInfo.Load()\n\tif value == nil { \n\t\tr.localDelegate.ServeHTTP(w, req)\n\t\treturn\n\t}\n\thandlingInfo := value.(proxyHandlingInfo)\n\tif handlingInfo.local { \n\t\tif r.localDelegate == nil { \n\t\t\thttp.Error(w, \"\", http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\t\tr.localDelegate.ServeHTTP(w, req)\n\t\treturn\n\t}\n\n\tif !handlingInfo.serviceAvailable { \n\t\tproxyError(w, req, \"service unavailable\", http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\n\tif handlingInfo.transportBuildingError != nil { \n\t\tproxyError(w, req, handlingInfo.transportBuildingError.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\t// 通过context获取user\n\tuser, ok := genericapirequest.UserFrom(req.Context())\n\tif !ok { \n\t\tproxyError(w, req, \"missing user\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\t// write a new location based on the existing request pointed at the target service\n    // 构造请求url，通过apiservice配置的service/namespace随机得到某个endpoint后端\n\tlocation := \u0026url.URL{ }\n\tlocation.Scheme = \"https\"\n\trloc, err := r.serviceResolver.ResolveEndpoint(handlingInfo.serviceNamespace, handlingInfo.serviceName, handlingInfo.servicePort)\n\tif err != nil { \n\t\tklog.Errorf(\"error resolving %s/%s: %v\", handlingInfo.serviceNamespace, handlingInfo.serviceName, err)\n\t\tproxyError(w, req, \"service unavailable\", http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\tlocation.Host = rloc.Host\n\tlocation.Path = req.URL.Path\n\tlocation.RawQuery = req.URL.Query().Encode()\n\n\tnewReq, cancelFn := newRequestForProxy(location, req)\n\tdefer cancelFn()\n\n\tif handlingInfo.proxyRoundTripper == nil { \n\t\tproxyError(w, req, \"\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\t// we need to wrap the roundtripper in another roundtripper which will apply the front proxy headers\n\tproxyRoundTripper, upgrade, err := maybeWrapForConnectionUpgrades(handlingInfo.restConfig, handlingInfo.proxyRoundTripper, req)\n\tif err != nil { \n\t\tproxyError(w, req, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n    // 包裹请求信息，将user信息放到header中\n\tproxyRoundTripper = transport.NewAuthProxyRoundTripper(user.GetName(), user.GetGroups(), user.GetExtra(), proxyRoundTripper)\n\n\t// if we are upgrading, then the upgrade path tries to use this request with the TLS config we provide, but it does\n\t// NOT use the roundtripper.  Its a direct call that bypasses the round tripper.  This means that we have to\n\t// attach the \"correct\" user headers to the request ahead of time.  After the initial upgrade, we'll be back\n\t// at the roundtripper flow, so we only have to muck with this request, but we do have to do it.\n\tif upgrade { \n\t\ttransport.SetAuthProxyHeaders(newReq, user.GetName(), user.GetGroups(), user.GetExtra())\n\t}\n\t// 调用后端\n\thandler := proxy.NewUpgradeAwareHandler(location, proxyRoundTripper, true, upgrade, \u0026responder{ w: w})\n\thandler.ServeHTTP(w, newReq)\n}\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-vkhh446",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-vkhh446"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据扩展apiserver找到后端时通过service获取对应endpoint列表，随机选择某个endpoint、实现如下，源码路径："
				}
			]
		},
		{
			"ID": "20221115161601-vxe6cag",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-vxe6cag"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "staging/src/k8s.io/apiserver/pkg/util/proxy/proxy.go"
				}
			]
		},
		{
			"ID": "20221115161601-m5039um",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-m5039um"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func ResolveEndpoint(services listersv1.ServiceLister, endpoints listersv1.EndpointsLister, namespace, id string, port int32) (*url.URL, error) { \n\tsvc, err := services.Services(namespace).Get(id)\n\tif err != nil { \n\t\treturn nil, err\n\t}\n\n\tsvcPort, err := findServicePort(svc, port)\n\tif err != nil { \n\t\treturn nil, err\n\t}\n\n\tswitch { \n\tcase svc.Spec.Type == v1.ServiceTypeClusterIP, svc.Spec.Type == v1.ServiceTypeLoadBalancer, svc.Spec.Type == v1.ServiceTypeNodePort:\n\t\t// these are fine\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unsupported service type %q\", svc.Spec.Type)\n\t}\n\n\teps, err := endpoints.Endpoints(namespace).Get(svc.Name)\n\tif err != nil { \n\t\treturn nil, err\n\t}\n\tif len(eps.Subsets) == 0 { \n\t\treturn nil, errors.NewServiceUnavailable(fmt.Sprintf(\"no endpoints available for service %q\", svc.Name))\n\t}\n\n\t// Pick a random Subset to start searching from.\n\tssSeed := rand.Intn(len(eps.Subsets))\n\n\t// Find a Subset that has the port.\n\tfor ssi := 0; ssi \u003c len(eps.Subsets); ssi++ { \n\t\tss := \u0026eps.Subsets[(ssSeed+ssi)%len(eps.Subsets)]\n\t\tif len(ss.Addresses) == 0 { \n\t\t\tcontinue\n\t\t}\n\t\tfor i := range ss.Ports { \n\t\t\tif ss.Ports[i].Name == svcPort.Name { \n\t\t\t\t// Pick a random address.\n\t\t\t\tip := ss.Addresses[rand.Intn(len(ss.Addresses))].IP\n\t\t\t\tport := int(ss.Ports[i].Port)\n\t\t\t\treturn \u0026url.URL{ \n\t\t\t\t\tScheme: \"https\",\n\t\t\t\t\tHost:   net.JoinHostPort(ip, strconv.Itoa(port)),\n\t\t\t\t}, nil\n\t\t\t}\n\t\t}\n\t}\n\treturn nil, errors.NewServiceUnavailable(fmt.Sprintf(\"no endpoints available for service %q\", id))\n}\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-cnwds7l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-cnwds7l"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ProxyRoundTripper创建路径："
				}
			]
		},
		{
			"ID": "20221115161601-6bqhmuf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-6bqhmuf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "staging/src/k8s.io/client-go/transport/round_trippers.go"
				}
			]
		},
		{
			"ID": "20221115161601-q2s6g1m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-q2s6g1m",
				"updated": "20221115172308"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func NewAuthProxyRoundTripper(username string, groups []string, extra map[string][]string, rt http.RoundTripper) http.RoundTripper { \n\treturn \u0026authProxyRoundTripper{ \n\t\tusername: username,\n\t\tgroups:   groups,\n\t\textra:    extra,\n\t\trt:       rt,\n\t}\n}\n\nfunc (rt *authProxyRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) { \n\treq = utilnet.CloneRequest(req)\n    // 设置user信息\n\tSetAuthProxyHeaders(req, rt.username, rt.groups, rt.extra)\n\n\treturn rt.rt.RoundTrip(req)\n}\n\n// SetAuthProxyHeaders stomps the auth proxy header fields.  It mutates its argument.\nfunc SetAuthProxyHeaders(req *http.Request, username string, groups []string, extra map[string][]string) { \n    // 清除原始url的requestheader信息\n\treq.Header.Del(\"X-Remote-User\")\n\treq.Header.Del(\"X-Remote-Group\")\n\tfor key := range req.Header { \n\t\tif strings.HasPrefix(strings.ToLower(key), strings.ToLower(\"X-Remote-Extra-\")) { \n\t\t\treq.Header.Del(key)\n\t\t}\n\t}\n\t// 通过user重新填充信息\n\treq.Header.Set(\"X-Remote-User\", username)\n\tfor _, group := range groups { \n\t\treq.Header.Add(\"X-Remote-Group\", group)\n\t}\n\tfor key, values := range extra { \n\t\tfor _, value := range values { \n\t\t\treq.Header.Add(\"X-Remote-Extra-\"+headerKeyEscape(key), value)\n\t\t}\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-xgv2upq",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-xgv2upq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubernetes kube-apiserver 代理请求"
				}
			]
		},
		{
			"ID": "20221115161601-7o9x5vq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-7o9x5vq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubernetes kube-apiserver 现在将请求发送或代理到注册以处理该请求的 Extension apiserver。为此，它需要了解几件事："
				}
			]
		},
		{
			"ID": "20221115161601-xn5lkhk",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-xn5lkhk"
			},
			"Children": [
				{
					"ID": "20221115161601-i4ne0kh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-i4ne0kh"
					},
					"Children": [
						{
							"ID": "20221115161601-2h5zw0k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-2h5zw0k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Kubernetes kube-apiserver 应该如何向 Extension apiserver 认证，以通知 Extension apiserver 通过网络发出的请求来自有效的 Kubernetes kube-apiserver？"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-h4yn68t",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221115161601-h4yn68t"
					},
					"Children": [
						{
							"ID": "20221115161601-xa6mmpr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-xa6mmpr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Kubernetes kube-apiserver 应该如何通知 Extension apiserver 原始请求已通过认证的用户名和组？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-5asi5xy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-5asi5xy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简而言之，就是 Kubernetes kube-apiserver 已经认证和鉴权用户的请求，怎么将这些信息传递给 Extension apiserver，为提供这两条信息，我们必须使用若干启动参数来配置 Kubernetes apiserver。"
				}
			]
		},
		{
			"ID": "20221115161601-ix4jyit",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-ix4jyit"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubernetes kube-apiserver 客户端认证"
				}
			]
		},
		{
			"ID": "20221115161601-4qtmhib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-4qtmhib"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubernetes kube-apiserver 通过 TLS 连接到 Extension apiserver，并使用客户端证书认证，这里 Kubernetes kube-apiserver (aggregator or proxy) 是 Extension apiserver 的客户端。必须在启动时使用提供的参数向 Kubernetes kube-apiserver 提供以下内容："
				}
			]
		},
		{
			"ID": "20221115161601-fekxhnr",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-fekxhnr"
			},
			"Children": [
				{
					"ID": "20221115161601-4sighzn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-4sighzn"
					},
					"Children": [
						{
							"ID": "20221115161601-ifztekn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ifztekn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--proxy-client-key-file"
								},
								{
									"Type": "NodeText",
									"Data": " 指定签名私钥文件"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-pgeiupu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-pgeiupu"
					},
					"Children": [
						{
							"ID": "20221115161601-l9w8rjc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-l9w8rjc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--proxy-client-cert-file"
								},
								{
									"Type": "NodeText",
									"Data": " 指定验签证书文件"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-j9pegwa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-j9pegwa"
					},
					"Children": [
						{
							"ID": "20221115161601-dga6fol",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-dga6fol"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-client-ca-file"
								},
								{
									"Type": "NodeText",
									"Data": " 签署客户端证书文件的 CA 证书"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-6rknwgr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-6rknwgr"
					},
					"Children": [
						{
							"ID": "20221115161601-eyu82yx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-eyu82yx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-allowed-names"
								},
								{
									"Type": "NodeText",
									"Data": " 在签署的客户证书中有效的公用名（CN）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-y88ges0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-y88ges0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubernetes kube-apiserver 将使用由 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "–proxy-client-*-file"
				},
				{
					"Type": "NodeText",
					"Data": " 指示的文件来通过 Extension apiserver 验证。为了使合规的 Extension apiserver 能够将该请求视为有效，必须满足以下条件："
				}
			]
		},
		{
			"ID": "20221115161601-81nk47k",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-81nk47k"
			},
			"Children": [
				{
					"ID": "20221115161601-m887o8i",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-m887o8i"
					},
					"Children": [
						{
							"ID": "20221115161601-2ilwewy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-2ilwewy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "连接必须使用由 CA 签署的客户端证书，该证书的证书位于 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-client-ca-file"
								},
								{
									"Type": "NodeText",
									"Data": " 中。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-0bp3c1y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221115161601-0bp3c1y"
					},
					"Children": [
						{
							"ID": "20221115161601-ui7diss",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ui7diss"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "连接必须使用客户端证书，该客户端证书的 CN 是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-allowed-names"
								},
								{
									"Type": "NodeText",
									"Data": " 中列出的证书之一。 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "注意："
								},
								{
									"Type": "NodeText",
									"Data": "您可以将此选项设置为空白，即为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-allowed-names=\u0026quot;\u0026quot;"
								},
								{
									"Type": "NodeText",
									"Data": "。这将向扩展 apiserver 指示任何 CN 是可接受的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-i4ef9l2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-i4ef9l2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用这些选项启动时，Kubernetes kube-apiserver 将："
				}
			]
		},
		{
			"ID": "20221115161601-4l6owqm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-4l6owqm"
			},
			"Children": [
				{
					"ID": "20221115161601-ohikpb6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-ohikpb6"
					},
					"Children": [
						{
							"ID": "20221115161601-nh81ex8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-nh81ex8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用它们来通过 Extension apiserver 的认证。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-bq8k04u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221115161601-bq8k04u"
					},
					"Children": [
						{
							"ID": "20221115161601-6g418t0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-6g418t0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在名为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kube-system"
								},
								{
									"Type": "NodeText",
									"Data": " 命名空间中创建一个 configmap "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "extension-apiserver-authentication"
								},
								{
									"Type": "NodeText",
									"Data": " ，它将在其中放置 CA 证书和允许的 CN。反过来，Extension apiserver 可以检索这些内容以验证请求。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-4nx88rn",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-4nx88rn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "保存原始请求用户名和组信息"
				}
			]
		},
		{
			"ID": "20221115161601-5zmwpdm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-5zmwpdm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当 Kubernetes kube-apiserver 将请求代理到 Extension apiserver 时，它将向 Extension apiserver 通知原始请求已成功通过其验证的用户名和组。它在其代理请求的 http 标头中提供这些。您必须将要使用的标头名称告知 Kubernetes kube-apiserver。"
				}
			]
		},
		{
			"ID": "20221115161601-el5viml",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-el5viml"
			},
			"Children": [
				{
					"ID": "20221115161601-gu7lxav",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-gu7lxav"
					},
					"Children": [
						{
							"ID": "20221115161601-i41ljwq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-i41ljwq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-username-headers"
								},
								{
									"Type": "NodeText",
									"Data": " 标明用来保存用户名的头部"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-30sboyo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-30sboyo"
					},
					"Children": [
						{
							"ID": "20221115161601-moxej72",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-moxej72"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-group-headers"
								},
								{
									"Type": "NodeText",
									"Data": " 标明用来保存 group 的头部"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-4zsftzh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-4zsftzh"
					},
					"Children": [
						{
							"ID": "20221115161601-gpqv3j1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-gpqv3j1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-extra-headers-prefix"
								},
								{
									"Type": "NodeText",
									"Data": " 标明用来保存拓展信息前缀的头部"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-d1jt06z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-d1jt06z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些标头名称也放置在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "extension-apiserver-authentication"
				},
				{
					"Type": "NodeText",
					"Data": " 的 configmap 中，因此 Extension apiserver 可以检索和使用它们。"
				}
			]
		},
		{
			"ID": "20221115161601-5byjuyv",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-5byjuyv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Extension apiserver 认证"
				}
			]
		},
		{
			"ID": "20221115161601-vacfw6x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-vacfw6x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Extension apiserver 在收到来自 Kubernetes kube-apiserver 的代理请求后，必须验证该请求确实来自有效的身份验证代理，该认证代理由 Kubernetes kube-apiserver 履行。Extension apiserver 通过以下方式对其认证："
				}
			]
		},
		{
			"ID": "20221115161601-hpbhc8l",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-hpbhc8l"
			},
			"Children": [
				{
					"ID": "20221115161601-kqyhnxp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-kqyhnxp"
					},
					"Children": [
						{
							"ID": "20221115161601-qw02vgs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-qw02vgs"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如上所述，从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kube-system"
								},
								{
									"Type": "NodeText",
									"Data": "中的 configmap 中检索以下内容："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-a6q9a92",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-a6q9a92"
			},
			"Children": [
				{
					"ID": "20221115161601-p8ib2hb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-p8ib2hb"
					},
					"Children": [
						{
							"ID": "20221115161601-aubkx1i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-aubkx1i"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户端 CA 证书 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-client-ca-file"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-1zqwu9d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-1zqwu9d"
					},
					"Children": [
						{
							"ID": "20221115161601-ko1aqqe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ko1aqqe"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "允许名称（CN）列表 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--requestheader-allowed-names"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-a6o6lyh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-a6o6lyh"
					},
					"Children": [
						{
							"ID": "20221115161601-xjozsy4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-xjozsy4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用户名，组和其他信息的头部。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-xlbdbg0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221115161601-xlbdbg0"
			},
			"Children": [
				{
					"ID": "20221115161601-kp1aey6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221115161601-kp1aey6"
					},
					"Children": [
						{
							"ID": "20221115161601-9r3myp9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-9r3myp9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用以下证书检查 TLS 连接是否已通过认证："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-e8f9g6z",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-e8f9g6z"
			},
			"Children": [
				{
					"ID": "20221115161601-a6vgok5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-a6vgok5"
					},
					"Children": [
						{
							"ID": "20221115161601-p88wmqg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-p88wmqg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由其证书与检索到的 CA 证书匹配的 CA 签名。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-qel9fop",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-qel9fop"
					},
					"Children": [
						{
							"ID": "20221115161601-stk1uoq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-stk1uoq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在允许的 CN 列表中有一个 CN，除非列表为空，在这种情况下允许所有 CN。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-yi2qcmm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-yi2qcmm"
					},
					"Children": [
						{
							"ID": "20221115161601-i68hgnp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-i68hgnp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从适当的头部中提取用户名和组。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-v3rdtm6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-v3rdtm6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果以上均通过，则该请求是来自合法认证代理（在本例中为 Kubernetes kube-apiserver）的有效代理请求。"
				}
			]
		},
		{
			"ID": "20221115161601-wow283p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-wow283p"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了具有检索 configmap 的权限，Extension apiserver 需要适当的角色。在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kube-system"
				},
				{
					"Type": "NodeText",
					"Data": " 名字空间中有一个默认角色"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "extension-apiserver-authentication-reader"
				},
				{
					"Type": "NodeText",
					"Data": " 可用于设置。"
				}
			]
		},
		{
			"ID": "20221115161601-f3m0hth",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-f3m0hth"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Extension apiserver 执行"
				}
			]
		},
		{
			"ID": "20221115161601-y50144f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-y50144f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SubjectAccessReview"
				},
				{
					"Type": "NodeText",
					"Data": "通过，则扩展 apiserver 执行请求。"
				}
			]
		},
		{
			"ID": "20221115161601-ig8me0n",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221115161601-ig8me0n"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.4.3 部署过程"
				}
			]
		},
		{
			"ID": "20221115161601-ebl7aal",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-ebl7aal"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "安装cfssl"
				}
			]
		},
		{
			"ID": "20221115161601-ap9xakl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-ap9xakl",
				"updated": "20221115171355"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/bin/cfssl\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/bin/cfssljson\nwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/bin/cfssl-certinfo\ncd /usr/local/bin/\nchmod +x cfssl cfssljson cfssl-certinfo\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-i54mbl2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-i54mbl2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建CA"
				}
			]
		},
		{
			"ID": "20221115161601-bkojaq9",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-bkojaq9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CA 配置文件"
				}
			]
		},
		{
			"ID": "20221115161601-5lx4j9m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-5lx4j9m",
				"updated": "20221115171351"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ cat \u003e aggregator-ca-config.json \u003c\u003cEOF\n{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"aggregator\": {\n        \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ],\n        \"expiry\": \"87600h\"\n      }\n    }\n  }\n}\nEOF\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-6yd1v8m",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-6yd1v8m"
			},
			"Children": [
				{
					"ID": "20221115161601-cyim180",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-cyim180"
					},
					"Children": [
						{
							"ID": "20221115161601-ke47jxs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-ke47jxs"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "profiles"
								},
								{
									"Type": "NodeText",
									"Data": " : 可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-9nvds3v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-9nvds3v"
					},
					"Children": [
						{
							"ID": "20221115161601-4orsjn5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-4orsjn5"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "signing"
								},
								{
									"Type": "NodeText",
									"Data": " ：表示该证书可用于签名其它证书；生成的 aggregator-ca.pem 证书中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CA=TRUE"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-p3as3pb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-p3as3pb"
					},
					"Children": [
						{
							"ID": "20221115161601-vbuiijq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-vbuiijq"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "server auth"
								},
								{
									"Type": "NodeText",
									"Data": " ：表示 Client 可以用该 CA 对 Server 提供的证书进行验证。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-1upekoi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-1upekoi"
					},
					"Children": [
						{
							"ID": "20221115161601-cl94p5u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-cl94p5u"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "client auth"
								},
								{
									"Type": "NodeText",
									"Data": " ：表示 Server 可以用该 CA 对 Client 提供的证书进行验证。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-lq4hcfv",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-lq4hcfv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建CA证书签名请求"
				}
			]
		},
		{
			"ID": "20221115161601-vdc7rlg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-vdc7rlg",
				"updated": "20221115171347"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ cat \u003e aggregator-ca-csr.json \u003c\u003cEOF\n{ \n  \"CN\": \"aggregator\",\n  \"key\": { \n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    { \n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"wzlinux\"\n    }\n  ],\n    \"ca\": { \n       \"expiry\": \"87600h\"\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-v6fx0k6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221115161601-v6fx0k6"
			},
			"Children": [
				{
					"ID": "20221115161601-d6xaudb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-d6xaudb"
					},
					"Children": [
						{
							"ID": "20221115161601-xl3a3zj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-xl3a3zj"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "“CN”"
								},
								{
									"Type": "NodeText",
									"Data": " ："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Common Name"
								},
								{
									"Type": "NodeText",
									"Data": "，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法。"
								}
							]
						}
					]
				},
				{
					"ID": "20221115161601-nmssxzk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221115161601-nmssxzk"
					},
					"Children": [
						{
							"ID": "20221115161601-wdzbvkw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221115161601-wdzbvkw"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "“O”"
								},
								{
									"Type": "NodeText",
									"Data": " ："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Organization"
								},
								{
									"Type": "NodeText",
									"Data": "，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221115161601-apccxos",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-apccxos"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成CA证书和私钥"
				}
			]
		},
		{
			"ID": "20221115161601-c5d5igp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-c5d5igp",
				"updated": "20221115171343"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cfssl gencert -initca aggregator-ca-csr.json | cfssljson -bare aggregator-ca\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-84j65g6",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-84j65g6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建Kubernetes证书"
				}
			]
		},
		{
			"ID": "20221115161601-ijauzii",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-ijauzii"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建aggregator证书签名请求"
				}
			]
		},
		{
			"ID": "20221115161601-natb0ao",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-natb0ao",
				"updated": "20221115171339"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ cat \u003e aggregator-csr.json \u003c\u003cEOF\n{ \n    \"CN\": \"aggregator\",\n    \"hosts\": [\n      \"127.0.0.1\",\n      \"172.18.0.101\",\n      \"172.18.0.102\",\n      \"172.18.0.103\",\n      \"10.96.0.1\",\n      \"kubernetes\",\n      \"kubernetes.default\",\n      \"kubernetes.default.svc\",\n      \"kubernetes.default.svc.cluster\",\n      \"kubernetes.default.svc.cluster.local\"\n    ],\n    \"key\": { \n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        { \n            \"C\": \"CN\",\n            \"ST\": \"Shanghai\",\n            \"L\": \"Shanghai\",\n            \"O\": \"k8s\",\n            \"OU\": \"wzlinux\"\n        }\n    ]\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-9vaqws6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-9vaqws6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 hosts 字段不为空则需要指定授权使用该证书的 IP 或域名列表，由于该证书后续kubernetes master 集群使用，所以上面指定"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kubernetes master"
				},
				{
					"Type": "NodeText",
					"Data": " 集群的主机 IP 和 kubernetes 服务的服务 IP（一般是 kube-apiserver 指定的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "service-cluster-ip-range"
				},
				{
					"Type": "NodeText",
					"Data": " 网段的第一个 IP，如 10.96.0.1）。"
				}
			]
		},
		{
			"ID": "20221115161601-5ktal7m",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-5ktal7m"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成aggreagtor证书和私钥"
				}
			]
		},
		{
			"ID": "20221115161601-fhn7slt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-fhn7slt",
				"updated": "20221115171336"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cfssl gencert -ca=aggregator-ca.pem -ca-key=aggregator-ca-key.pem -config=aggregator-ca-config.json -profile=aggregator aggregator-csr.json | cfssljson -bare aggregator\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-sbtuhu9",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-sbtuhu9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分发证书"
				}
			]
		},
		{
			"ID": "20221115161601-6tc8w7z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-6tc8w7z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将生成的证书和秘钥文件（后缀名为.pem）拷贝到 Master 节点的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/etc/kubernetes/pki"
				},
				{
					"Type": "NodeText",
					"Data": " 目录下备用。"
				}
			]
		},
		{
			"ID": "20221115161601-7weltv1",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-7weltv1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开启聚合层API"
				}
			]
		},
		{
			"ID": "20221115161601-8ua5tgp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-8ua5tgp"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kube-apiserver"
				},
				{
					"Type": "NodeText",
					"Data": " 增加以下启动配置："
				}
			]
		},
		{
			"ID": "20221115161601-pobgxz4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-pobgxz4",
				"updated": "20221115171332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--requestheader-client-ca-file=/etc/kubernetes/pki/aggregator-ca.pem\n--requestheader-allowed-names=aggregator\n--requestheader-extra-headers-prefix=X-Remote-Extra-\n--requestheader-group-headers=X-Remote-Group\n--requestheader-username-headers=X-Remote-User\n--proxy-client-cert-file=/etc/kubernetes/pki/aggregator.pem\n--proxy-client-key-file=/etc/kubernetes/pki/aggregator-key.pem\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-ymawona",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-ymawona"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "前面创建的证书的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "CN"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": " 字段的值必须和参数 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "–requestheader-allowed-names"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": " 指定的值 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "aggregator"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": " 相同"
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20221115161601-lh0x6cx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-lh0x6cx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重启 kube-apiserver："
				}
			]
		},
		{
			"ID": "20221115161601-7p3z12n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-7p3z12n",
				"updated": "20221115171329"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ systemctl daemon-reload\n$ systemctl restart kube-apiserver\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-gui79ht",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-gui79ht"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kube-proxy"
				},
				{
					"Type": "NodeText",
					"Data": " 没有在 Master 上面运行，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kube-proxy"
				},
				{
					"Type": "NodeText",
					"Data": " 还需要添加配置："
				}
			]
		},
		{
			"ID": "20221115161601-xuijgu4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-xuijgu4",
				"updated": "20221115171325"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--enable-aggregator-routing=true\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-h9mfjo0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221115161601-h9mfjo0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.5 实现自定义API(聚合)服务"
				}
			]
		},
		{
			"ID": "20221115161601-ialopnu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-ialopnu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "API聚合这个方式实现相对复杂一点，但灵活度很高，基本业务上的大部分需求都可以满足。"
				}
			]
		},
		{
			"ID": "20221115161601-hkz3vwk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221115161601-hkz3vwk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.5.1 工具介绍"
				}
			]
		},
		{
			"ID": "20221115161601-lxm19ca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-lxm19ca"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然官方给了一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/kubernetes/sample-apiserver",
					"TextMarkTextContent": "sample-apiserver"
				},
				{
					"Type": "NodeText",
					"Data": "，我们可以照着实现自己的Aggregated APIServer。但完全手工编写还是太费劲了，这里使用官方推荐的工具"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/kubernetes-incubator/apiserver-builder-alpha/blob/master/README.md",
					"TextMarkTextContent": "apiserver-builder"
				},
				{
					"Type": "NodeText",
					"Data": "帮助快速创建项目骨架。"
				}
			]
		},
		{
			"ID": "20221115161601-lpjewgh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-lpjewgh"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/kubernetes-incubator/apiserver-builder-alpha/blob/master/README.md",
					"TextMarkTextContent": "apiserver-builder"
				},
				{
					"Type": "NodeText",
					"Data": "构建AA方案的API接口服务的原理还是比较清晰的，总之就是kubernetes里最常见的控制器模式，这里就不具体介绍了，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/kubernetes-incubator/apiserver-builder-alpha/blob/master/docs/concepts/api_building_overview.md",
					"TextMarkTextContent": "官方文档"
				},
				{
					"Type": "NodeText",
					"Data": "既有文字又有图片讲得还是挺细致的，强烈推荐大家多看看，学习一下。"
				}
			]
		},
		{
			"ID": "20221115161601-e40nkgv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-e40nkgv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "apiserver-builder这个工具与kubebuilder和operator-sdk非常相似，他们都依赖一个底层库controller-gen，apiserver-builder该工具生成的工程与kubebuilder生成的工程也非常相似，其中一个不同的地方就是kubebuilder因为不需要自定义apiserver，因此，apiserver-builder生成的工程会有一个自定义apiserver，控制器部分的逻辑两者都一样，都是通过调协方法实现自定义资源状态的维护。"
				}
			]
		},
		{
			"ID": "20221115161601-xn7yndr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221115161601-xn7yndr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.5.2 API聚合服务开发"
				}
			]
		},
		{
			"ID": "20221115161601-whtcqxf",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-whtcqxf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用例源码下载"
				}
			]
		},
		{
			"ID": "20221115161601-i8fo8ow",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-i8fo8ow",
				"updated": "20221115171322"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "git clone https://github.com/kubernetes/sample-apiserver.git\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-7bzrkjg",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-7bzrkjg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "源码编译"
				}
			]
		},
		{
			"ID": "20221115161601-haza9x2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-haza9x2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cd sample-apiserver\n编译二进制文件：\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o artifacts/simple-image/kube-sample-apiserver\n编译docker镜像：\ndocker build -t kube-sample-apiserver:latest ./artifacts/simple-image\n12345\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-3aqht3n",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-3aqht3n"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "集群中部署"
				}
			]
		},
		{
			"ID": "20221115161601-inza8lg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-inza8lg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "踩坑：\n artifacts/example/deployment.yaml文件中需要修改镜像及版本，要与集群中对应；\n artifacts/example下所有文件中涉及的命名空间统一修改为default，auth-reader.yaml中metadata下的命名空间为kube-system保持不变。"
				}
			]
		},
		{
			"ID": "20221115161601-yyf12il",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-yyf12il"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl apply -f artifacts/example\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-eohqj5b",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-eohqj5b"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "访问测试"
				}
			]
		},
		{
			"ID": "20221115161601-nogy6tf",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-nogy6tf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看sercet"
				}
			]
		},
		{
			"ID": "20221115161601-qq88qqb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-qq88qqb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl get sa apiserver -o json\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-hbtwuom",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-hbtwuom"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看sercet里面的tocken,并将该tocken拷贝到test.log的文件中后续访问是作为参数传入"
				}
			]
		},
		{
			"ID": "20221115161601-w2lscoa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-w2lscoa"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl describe secret apiserver\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-xzbz6nh",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-xzbz6nh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看角色"
				}
			]
		},
		{
			"ID": "20221115161601-bk392jn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-bk392jn"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl get clusterrole\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-4f797wg",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-4f797wg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看角色绑定"
				}
			]
		},
		{
			"ID": "20221115161601-4sysn1d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-4sysn1d"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl get clusterrolebinding\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-m8r43oh",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20221115161601-m8r43oh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "REST接口访问"
				}
			]
		},
		{
			"ID": "20221115161601-3pp6scu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-3pp6scu"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "curl  -k  -H  \"Authorization: Bearer $(cat test.log)\" https://10.131.180.168:6443/apis/wardle.example.com/v1alpha1/flunders\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-0ov7d3c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221115161601-0ov7d3c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.5.3 apiserver-builder实现API聚合服务开发"
				}
			]
		},
		{
			"ID": "20221115161601-72udvos",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-72udvos"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "工具使用当前最新版本V2.0beta"
				}
			]
		},
		{
			"ID": "20221115161601-zbrts2g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-zbrts2g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初始化项目"
				}
			]
		},
		{
			"ID": "20221115161601-3g245hi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-3g245hi"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiserver-boot init repo --domain example.com\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-4eoetf1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-4eoetf1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建一个非命名空间范围的api-resource"
				}
			]
		},
		{
			"ID": "20221115161601-he0l7g9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-he0l7g9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiserver-boot create group version resource --group demo --version v1beta1 --non-namespaced=true --kind Foo\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-foooqow",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-foooqow"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建Foo这个api-resource的子资源"
				}
			]
		},
		{
			"ID": "20221115161601-byzjmmk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-byzjmmk"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiserver-boot create subresource --subresource bar --group demo --version v1beta1 --kind Foo\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-5pl653w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-5pl653w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成上述创建的api-resource类型的相关代码，包括deepcopy接口实现代码、versioned/unversioned类型转换代码、api-resource类型注册代码、api-resource类型的Controller代码、api-resource类型的AdmissionController代码"
				}
			]
		},
		{
			"ID": "20221115161601-86gtuyr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-86gtuyr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决工程依赖问题并生成脚手架代码"
				}
			]
		},
		{
			"ID": "20221115161601-p6lm8ed",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-p6lm8ed"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "go mod init\ngo mod vendor\nmake generate\n123\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-qaqw4ai",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-qaqw4ai"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以直接在本地将etcd, apiserver, controller运行起来"
				}
			]
		},
		{
			"ID": "20221115161601-xikllxf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-xikllxf"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiserver-boot run local\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-43kqzv1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-43kqzv1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述这样操作之后，就可以访问我们的APIServer了，如下面的命令："
				}
			]
		},
		{
			"ID": "20221115161601-e92vcp0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-e92vcp0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "curl -k https://127.0.0.1:9443/apis/demo.example.com/v1beta1/foos\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-k0pfedp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-k0pfedp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当然也可以新建一个yaml文件，然后用kubectl命令直接对api-resource进行操作：\n 创建Foo资源的yaml"
				}
			]
		},
		{
			"ID": "20221115161601-8kvzzzu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-8kvzzzu",
				"updated": "20221115164401"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "echo 'apiVersion: demo.example.com/v1beta1\nkind: Foo\nmetadata:\n  name: foo-example\n  namespace: test\nspec: {}' \u003e sample/foo.yaml\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-03l54gm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-03l54gm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果在apiserver的main方法里补上一些代码，以开启swagger-ui，还能更方便地看到这些API接口："
				}
			]
		},
		{
			"ID": "20221115161601-n8112ge",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-n8112ge",
				"updated": "20221115164358"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func main() { \n\tversion := \"v0\"\n\tserver.StartApiServer(\"/registry/example.com\", apis.GetAllApiBuilders(), openapi.GetOpenAPIDefinitions, \"Api\", version, func(apiServerConfig *apiserver.Config) error { \n\t\t...\n\t\tapiServerConfig.RecommendedConfig.EnableSwaggerUI = true\n\t\tapiServerConfig.RecommendedConfig.SwaggerConfig = genericapiserver.DefaultSwaggerConfig()\n\t\treturn nil\n\t})\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-oho2zlu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-oho2zlu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后浏览器访问https://127.0.0.1:9443/swagger-ui/就可以在swagger的Web页面上看到创建出来的所有API接口"
				}
			]
		},
		{
			"ID": "20221115161601-3nubst5",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-3nubst5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定制API接口服务"
				}
			]
		},
		{
			"ID": "20221115161601-a4m8dgz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-a4m8dgz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "像上面这样创建的API接口，接口是都有了，但接口没有啥意义，一般要根据实际情况定义api-resource的spec、status等结构体。"
				}
			]
		},
		{
			"ID": "20221115161601-80gipxs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-80gipxs",
				"updated": "20221115164354"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type Foo struct { \n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   FooSpec   `json:\"spec,omitempty\"`\n\tStatus FooStatus `json:\"status,omitempty\"`\n}\n\n// FooSpec defines the desired state of Foo\ntype FooSpec struct { \n}\n\n// FooStatus defines the observed state of Foo\ntype FooStatus struct { \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-ljmlgk9",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-ljmlgk9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定制Controller"
				}
			]
		},
		{
			"ID": "20221115161601-ytim6zg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-ytim6zg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认生成的api-resource的Reconcile逻辑如下："
				}
			]
		},
		{
			"ID": "20221115161601-635q8og",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-635q8og",
				"updated": "20221115164341"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Z28="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// Reconcile reads that state of the cluster for a Foo object and makes changes based on the state read\n// and what is in the Foo.Spec\n// TODO(user): Modify this Reconcile function to implement your Controller logic.  The scaffolding writes\n// a Deployment as an example\n// +kubebuilder:rbac:groups=demo.jeremyxu2010.me,resources=foos,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=demo.jeremyxu2010.me,resources=foos/status,verbs=get;update;patch\nfunc (r *ReconcileFoo) Reconcile(request reconcile.Request) (reconcile.Result, error) { \n\t// Fetch the Foo instance\n\tinstance := \u0026demov1beta1.Foo{ }\n\terr := r.Get(context.TODO(), request.NamespacedName, instance)\n\tif err != nil { \n\t\tif errors.IsNotFound(err) { \n\t\t\t// Object not found, return.  Created objects are automatically garbage collected.\n\t\t\t// For additional cleanup logic use finalizers.\n\t\t\treturn reconcile.Result{ }, nil\n\t\t}\n\t\t// Error reading the object - requeue the request.\n\t\treturn reconcile.Result{ }, err\n\t}\n\n\treturn reconcile.Result{ }, nil\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-vumavar",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-vumavar"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以参考："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/operator-framework/operator-sdk-samples/blob/master/go/memcached-operator/controllers/memcached_controller.go",
					"TextMarkTextContent": "operator-sdk-samples"
				}
			]
		},
		{
			"ID": "20221115161601-p5ab768",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221115161601-p5ab768"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "打包部署"
				}
			]
		},
		{
			"ID": "20221115161601-shlhx9d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-shlhx9d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序写好后，通过以下命令即可生成容器镜像及kubernetes的部署manifest文件："
				}
			]
		},
		{
			"ID": "20221115161601-f2xexuu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-f2xexuu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成二进制文件"
				}
			]
		},
		{
			"ID": "20221115161601-pdoihz6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-pdoihz6",
				"updated": "20221115164331"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiserver-boot build executables\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-r4v7nqx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-r4v7nqx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成容器镜像"
				}
			]
		},
		{
			"ID": "20221115161601-qc19rzm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-qc19rzm",
				"updated": "20221115164335"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiserver-boot build container --image demo/foo-apiserver:latest\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-lu1ez0l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-lu1ez0l"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成kubernetes的部署manifest文件，可直接在kubernetes里apply即完成部署"
				}
			]
		},
		{
			"ID": "20221115161601-fb57f9s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221115161601-fb57f9s",
				"updated": "20221115164338"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiserver-boot build config --name foo-apiserver --namespace default --image demo/foo-apiserver:latest\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221115161601-ydhd5ra",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221115161601-ydhd5ra"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "观察生成的kubernetes部署manifest文件config/apiserver.yaml，可以发现最终会创建一个Deployment，一个Service和一个APIService类型的kubernetes资源，同时APIService的caBundle及apiserver的TLS证书也配置妥当了。"
				}
			]
		}
	]
}