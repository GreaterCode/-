{
	"ID": "20230202225625-p81qya3",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230202225625-p81qya3",
		"title": "Redis缓存的主要异常及解决方案",
		"updated": "20230202225625"
	},
	"Children": [
		{
			"ID": "20230202225625-9kz6oa1",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230202225625-9kz6oa1"
			}
		},
		{
			"ID": "20230202225625-jieopjm",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-jieopjm"
			},
			"Children": [
				{
					"ID": "20230202225625-9p3depb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-9p3depb"
					},
					"Children": [
						{
							"ID": "20230202225625-oys0sjp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-oys0sjp"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://mp.weixin.qq.com/s/HJ-5I3vrIXyC8hH151huqQ",
									"TextMarkTextContent": "https://mp.weixin.qq.com/s/HJ-5I3vrIXyC8hH151huqQ - 微信公众平台"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-5qqv21h",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-5qqv21h"
					},
					"Children": [
						{
							"ID": "20230202225625-m1t0txm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-m1t0txm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Redis 是当前最流行的 NoSQL 数据库。Redis 主要用来做缓存使用，在提高数据查询效率、保护数据库等方面起到了关键性的作用，很大程度上提高系统的性能。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-nnrirpg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-nnrirpg"
					},
					"Children": [
						{
							"ID": "20230202225625-wdun64c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-wdun64c"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-02-02 22:56:25"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-irkredq",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230202225625-irkredq"
			}
		},
		{
			"ID": "20230202225625-zpu2xyw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-zpu2xyw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "来源 | OSCHINA 社区"
				}
			]
		},
		{
			"ID": "20230202225625-mhuq11i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-mhuq11i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作者 | 京东云开发者-京东物流 陈昌浩"
				}
			]
		},
		{
			"ID": "20230202225625-7ubwkzv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-7ubwkzv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "原文链接：https://my.oschina.net/u/4090830/blog/6863647"
				}
			]
		},
		{
			"ID": "20230202225625-fv90qny",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-fv90qny"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1 导读"
				}
			]
		},
		{
			"ID": "20230202225625-jmekrh3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-jmekrh3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 是当前最流行的 NoSQL 数据库。Redis 主要用来做缓存使用，在提高数据查询效率、保护数据库等方面起到了关键性的作用，很大程度上提高系统的性能。当然在使用过程中，也会出现一些异常情景，导致 Redis 失去缓存作用。"
				}
			]
		},
		{
			"ID": "20230202225625-cvoyg7e",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-cvoyg7e"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2 异常类型"
				}
			]
		},
		{
			"ID": "20230202225625-ds4cx0z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-ds4cx0z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常主要有 缓存雪崩 缓存穿透 缓存击穿。"
				}
			]
		},
		{
			"ID": "20230202225625-n1kst7p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-n1kst7p"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 缓存雪崩"
				}
			]
		},
		{
			"ID": "20230202225625-bg8mcgy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-bg8mcgy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1.1 现象"
				}
			]
		},
		{
			"ID": "20230202225625-dgekxa4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-dgekxa4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存雪崩是指大量请求在缓存中没有查到数据，直接访问数据库，导致数据库压力增大，最终导致数据库崩溃，从而波及整个系统不可用，好像雪崩一样。"
				}
			]
		},
		{
			"ID": "20230202225625-gtbiol1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-gtbiol1"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20230202225625-mto0s30"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-zyvtaqn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-zyvtaqn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1.2 异常原因"
				}
			]
		},
		{
			"ID": "20230202225625-1cx7i2b",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-1cx7i2b"
			},
			"Children": [
				{
					"ID": "20230202225625-wovprun",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-wovprun"
					},
					"Children": [
						{
							"ID": "20230202225625-t49jjo5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-t49jjo5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存服务不可用。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-sofl4hj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-sofl4hj"
					},
					"Children": [
						{
							"ID": "20230202225625-js8qhes",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-js8qhes"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存服务可用，但是大量 KEY 同时失效。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-tbg8kvo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-tbg8kvo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1.3 解决方案"
				}
			]
		},
		{
			"ID": "20230202225625-c81eu1l",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230202225625-c81eu1l"
			},
			"Children": [
				{
					"ID": "20230202225625-65akz6a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230202225625-65akz6a"
					},
					"Children": [
						{
							"ID": "20230202225625-un9rzlk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-un9rzlk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存服务不可用\nredis 的部署方式主要有单机、主从、哨兵和 cluster 模式。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-33n8iiv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-33n8iiv"
			},
			"Children": [
				{
					"ID": "20230202225625-8bbw1w6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-8bbw1w6"
					},
					"Children": [
						{
							"ID": "20230202225625-tr2l5ei",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-tr2l5ei"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "单机\n只有一台机器，所有数据都存在这台机器上，当机器出现异常时，redis 将失效，可能会导致 redis 缓存雪崩。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-rd2pvex",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-rd2pvex"
					},
					"Children": [
						{
							"ID": "20230202225625-656ap3s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-656ap3s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主从\n主从其实就是一台机器做主，一个或多个机器做从，从节点从主节点复制数据，可以实现读写分离，主节点做写，从节点做读。\n优点：当某个从节点异常时，不影响使用。\n缺点：当主节点异常时，服务将不可用。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-mqflwi1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-mqflwi1"
					},
					"Children": [
						{
							"ID": "20230202225625-0jnzyt0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-0jnzyt0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "哨兵\n哨兵模式也是一种主从，只不过增加了哨兵的功能，用于监控主节点的状态，当主节点宕机之后会进行投票在从节点中重新选出主节点。\n优点：高可用，当主节点异常时，自动在从节点当中选择一个主节点。\n缺点：只有一个主节点，当数据比较多时，主节点压力会很大。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-kdxndrv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-kdxndrv"
					},
					"Children": [
						{
							"ID": "20230202225625-n3f9jcl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-n3f9jcl"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "cluster 模式\n集群采用了多主多从，按照一定的规则进行分片，将数据分别存储，一定程度上解决了哨兵模式下单机存储有限的问题。\n优点：高可用，配置了多主多从，可以使数据分区，去中心化，减小了单台机子的负担.\n缺点：机器资源使用比较多，配置复杂。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-d8jvfkf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-d8jvfkf"
					},
					"Children": [
						{
							"ID": "20230202225625-gagcnxo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-gagcnxo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "小结\n从高可用得角度考虑，使用哨兵模式和 cluster 模式可以防止因为 redis 不可用导致的缓存雪崩问题。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-lkk65gf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230202225625-lkk65gf"
			},
			"Children": [
				{
					"ID": "20230202225625-lrwlysc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230202225625-lrwlysc"
					},
					"Children": [
						{
							"ID": "20230202225625-6x9rnne",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-6x9rnne"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "大量 KEY 同时失效\n可以通过设置永不失效、设置不同失效时间、使用二级缓存和定时更新缓存失效时间"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-36xxt67",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-36xxt67"
			},
			"Children": [
				{
					"ID": "20230202225625-r1u1p6g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-r1u1p6g"
					},
					"Children": [
						{
							"ID": "20230202225625-ndmvbra",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-ndmvbra"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置永不失效\n如果所有的 key 都设置不失效，不就不会出现因为 KEY 失效导致的缓存雪崩问题了。redis 设置 key 永远有效的命令如下：\nPERSIST key\n缺点：会导致 redis 的空间资源需求变大。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-6snyskt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-6snyskt"
					},
					"Children": [
						{
							"ID": "20230202225625-3s56j7d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-3s56j7d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置随机失效时间\n如果 key 的失效时间不相同，就不会在同一时刻失效，这样就不会出现大量访问数据库的情况。\nredis 设置 key 有效时间命令如下：\nExpire key\n示例代码如下，通过 RedisClient 实现"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-qgpf94j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-qgpf94j"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n* 随机设置小于30分钟的失效时间\n* @param redisKey\n* @param value\n*/\nprivate void setRandomTimeForReidsKey(String redisKey,String value){\n//随机函数\nRandom rand = new Random();\n//随机获取30分钟内（30*60）的随机数\nint times = rand.nextInt(1800);\n//设置缓存时间（缓存的key,缓存的值，失效时间：单位秒）\nredisClient.setNxEx(redisKey,value,times);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-pidjj3a",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-pidjj3a"
			},
			"Children": [
				{
					"ID": "20230202225625-x6hibuq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-x6hibuq"
					},
					"Children": [
						{
							"ID": "20230202225625-009wyox",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-009wyox"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用二级缓存\n二级缓存是使用两组缓存，1 级缓存和 2 级缓存，同一个 Key 在两组缓存里都保存，但是他们的失效时间不同，这样 1 级缓存没有查到数据时，可以在二级缓存里查询，不会直接访问数据库。\n示例代码如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-anmwr4p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-anmwr4p"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\nCacheTest test = new CacheTest();\n//从1级缓存中获取数据\nString value = test.queryByOneCacheKey(\"key\");\n//如果1级缓存中没有数据，再二级缓存中查找\nif(StringUtils.isBlank(value)){\nvalue = test.queryBySecondCacheKey(\"key\");\n//如果二级缓存中没有，从数据库中查找\nif(StringUtils.isBlank(value)){\nvalue =test.getFromDb();\n//如果数据库中也没有，就返回空\nif(StringUtils.isBlank(value)){\nSystem.out.println(\"数据不存在!\");\n}else{\n//二级缓存中保存数据\ntest.secondCacheSave(\"key\",value);\n//一级缓存中保存数据\ntest.oneCacheSave(\"key\",value);\nSystem.out.println(\"数据库中返回数据!\");\n}\n}else{\n//一级缓存中保存数据\ntest.oneCacheSave(\"key\",value);\nSystem.out.println(\"二级缓存中返回数据!\");\n}\n}else {\nSystem.out.println(\"一级缓存中返回数据!\");\n}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-jc3i6fo",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-jc3i6fo"
			},
			"Children": [
				{
					"ID": "20230202225625-x4t1p0x",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-x4t1p0x"
					},
					"Children": [
						{
							"ID": "20230202225625-2kpl053",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-2kpl053"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "异步更新缓存时间\n每次访问缓存时，启动一个线程或者建立一个异步任务来，更新缓存时间。\n示例代码如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-xx27das",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-xx27das"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class CacheRunnable implements Runnable {private ClusterRedisClientAdapter redisClient;\n/**\n* 要更新的key\n*/\npublic String key;public CacheRunnable(String key){\nthis.key =key;\n}@Override\npublic void run() {\n//更细缓存时间\nredisClient.expire(this.getKey(),1800);\n}public String getKey() {\nreturn key;\n}public void setKey(String key) {\nthis.key = key;\n}\n}\npublic static void main(String[] args) {\nCacheTest test = new CacheTest();\n//从缓存中获取数据\nString value = test.getFromCache(\"key\");\nif(StringUtils.isBlank(value)){\n//从数据库中获取数据\nvalue = test.getFromDb(\"key\");\n//将数据放在缓存中\ntest.oneCacheSave(\"key\",value);\n//返回数据\nSystem.out.println(\"返回数据\");\n}else{\n//异步任务更新缓存\nCacheRunnable runnable = new CacheRunnable(\"key\");\nrunnable.run();\n//返回数据\nSystem.out.println(\"返回数据\");\n}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-fxqngn9",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230202225625-fxqngn9"
			},
			"Children": [
				{
					"ID": "20230202225625-bexq8f9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230202225625-bexq8f9"
					},
					"Children": [
						{
							"ID": "20230202225625-seo8yvb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-seo8yvb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "小结\n上面从服务不可用和 key 大面积失效两个方面，列举了几种解决方案，上面的代码只是提供一些思路，具体实施还要考虑到现实情况。当然也有其他的解决方案，我这里举例是比较常用的。毕竟现实情况，千变万化，没有最好的方案，只有最适用的方案。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-xd7fr0m",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-xd7fr0m"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 缓存穿透"
				}
			]
		},
		{
			"ID": "20230202225625-bimp82m",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-bimp82m"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.1 现象"
				}
			]
		},
		{
			"ID": "20230202225625-86ppq1d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-86ppq1d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存穿透是指当用户在查询一条数据的时候，而此时数据库和缓存却没有关于这条数据的任何记录，而这条数据在缓存中没找到就会向数据库请求获取数据。用户拿不到数据时，就会一直发请求，查询数据库，这样会对数据库的访问造成很大的压力。"
				}
			]
		},
		{
			"ID": "20230202225625-3cd4t5a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-3cd4t5a"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20230202225625-74u3559"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-04ul80f",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-04ul80f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.2 异常原因"
				}
			]
		},
		{
			"ID": "20230202225625-4u2sjmq",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-4u2sjmq"
			},
			"Children": [
				{
					"ID": "20230202225625-xlrcrrj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-xlrcrrj"
					},
					"Children": [
						{
							"ID": "20230202225625-nnjqh2i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-nnjqh2i"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "非法调用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-fssqn0k",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-fssqn0k"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.3 解决方案"
				}
			]
		},
		{
			"ID": "20230202225625-c6hqade",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230202225625-c6hqade"
			},
			"Children": [
				{
					"ID": "20230202225625-udqigia",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230202225625-udqigia"
					},
					"Children": [
						{
							"ID": "20230202225625-0zvf9an",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-0zvf9an"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "非法调用\n可以通过缓存空值或过滤器来解决非法调用引起的缓存穿透问题。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-ob93xqj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-ob93xqj"
			},
			"Children": [
				{
					"ID": "20230202225625-a7n60kc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-a7n60kc"
					},
					"Children": [
						{
							"ID": "20230202225625-9cwd6wx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-9cwd6wx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缓存空值\n当缓存和数据库中都没有值时，可以在缓存中存放一个空值，这样就可以减少重复查询空值引起的系统压力增大，从而优化了缓存穿透问题。\n示例代码如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-vko1y3g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-vko1y3g"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private String queryMessager(String key){\n//从缓存中获取数据\nString message = getFromCache(key);\n//如果缓存中没有 从数据库中查找\nif(StringUtils.isBlank(message)){\nmessage = getFromDb(key);\n//如果数据库中也没有数据 就设置短时间的缓存\nif(StringUtils.isBlank(message)){\n//设置缓存时间（缓存的key,缓存的值，失效时间：单位秒）\nredisClient.setNxEx(key,null,60);\n}else{\nredisClient.setNxEx(key,message,1800);\n}\n}\nreturn message;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-i0v2555",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-i0v2555"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缺点：大量的空缓存导致资源的浪费，也有可能导致缓存和数据库中的数据不一致。"
				}
			]
		},
		{
			"ID": "20230202225625-uj63cm0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-uj63cm0"
			},
			"Children": [
				{
					"ID": "20230202225625-969srho",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-969srho"
					},
					"Children": [
						{
							"ID": "20230202225625-44ix7b4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-44ix7b4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "布隆过滤器\n布隆过滤器由布隆在 1970 年提出。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。是以空间换时间的算法。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-ulllkuq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-ulllkuq"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20230202225625-xbnkalo"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-dv8gri4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-dv8gri4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布隆过滤器的实现原理是一个超大的位数组和几个哈希函数。\n假设哈希函数的个数为 3。首先将位数组进行初始化，初始化状态的维数组的每个位都设置位 0。如果一次数据请求的结果为空，就将 key 依次通过 3 个哈希函数进行映射，每次映射都会产生一个哈希值，这个值对应位数组上面的一个点，然后将位数组对应的位置标记为 1。当数据请求再次发过来时，用同样的方法将 key 通过哈希映射到位数组上的 3 个点。如果 3 个点中任意一个点不为 1，则可以判断 key 不为空。反之，如果 3 个点都为 1，则该 KEY 一定为空。"
				}
			]
		},
		{
			"ID": "20230202225625-2jvcmdh",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230202225625-2jvcmdh"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230202225625-8upwa9y",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230202225625-8upwa9y"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "缺点：\n可能出现误判，例如 A 经过哈希函数 存到 1、3 和 5 位置。B 经过哈希函数存到 3、5 和 7 位置。C 经过哈希函数得到位置 3、5 和 7 位置。由于 3、5 和 7 都有值，导致判断 A 也在数组中。这种情况随着数据的增多，几率也变大。\n布隆过滤器没法删除数据。"
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-gkm37hx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-gkm37hx"
			},
			"Children": [
				{
					"ID": "20230202225625-bp2r0bf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-bp2r0bf"
					},
					"Children": [
						{
							"ID": "20230202225625-w6bkvfq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-w6bkvfq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "布隆过滤器增强版\n增强版是将布隆过滤器的 bitmap 更换成数组，当数组某位置被映射一次时就 + 1, 当删除时就 - 1, 这样就避免了普通布隆过滤器删除数据后需要重新计算其余数据包 Hash 的问题，但是依旧没法避免误判。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-9lojtmv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-9lojtmv"
					},
					"Children": [
						{
							"ID": "20230202225625-2bchgrs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-2bchgrs"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "布谷鸟过滤器\n但是如果这两个位置都满了，它就不得不「鸠占鹊巢」，随机踢走一个，然后自己霸占了这个位置。不同于布谷鸟的是，布谷鸟哈希算法会帮这些受害者（被挤走的蛋）寻找其它的窝。因为每一个元素都可以放在两个位置，只要任意一个有空位置，就可以塞进去。所以这个伤心的被挤走的蛋会看看自己的另一个位置有没有空，如果空了，自己挪过去也就皆大欢喜了。但是如果这个位置也被别人占了呢？好，那么它会再来一次「鸠占鹊巢」，将受害者的角色转嫁给别人。然后这个新的受害者还会重复这个过程直到所有的蛋都找到了自己的巢为止。"
								}
							]
						},
						{
							"ID": "20230202225625-7bb5ppk",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20230202225625-7bb5ppk"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20230202225625-tyzn7kk",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230202225625-tyzn7kk"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "缺点：\n如果数组太拥挤了，连续踢来踢去几百次还没有停下来，这时候会严重影响插入效率。这时候布谷鸟哈希会设置一个阈值，当连续占巢行为超出了某个阈值，就认为这个数组已经几乎满了。这时候就需要对它进行扩容，重新放置所有元素。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-8s1q14q",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230202225625-8s1q14q"
			},
			"Children": [
				{
					"ID": "20230202225625-p708cpa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230202225625-p708cpa"
					},
					"Children": [
						{
							"ID": "20230202225625-545xr5y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-545xr5y"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "小结\n以上方法虽然都有缺点，但是可以有效的防止因为大量空数据查询导致的缓存穿透问题，除了系统上的优化，还要加强对系统的监控，发下异常调用时，及时加入黑名单。降低异常调用对系统的影响。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-r2wi9ti",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-r2wi9ti"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3 缓存击穿"
				}
			]
		},
		{
			"ID": "20230202225625-5fjc0st",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-5fjc0st"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3.1 现象"
				}
			]
		},
		{
			"ID": "20230202225625-01se07a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-01se07a"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "key 中对应数据存在，当 key 中对应的数据在缓存中过期，而此时又有大量请求访问该数据，缓存中过期了，请求会直接访问数据库并回设到缓存中，高并发访问数据库会导致数据库崩溃。redis 的高 QPS 特性，可以很好的解决查数据库很慢的问题。但是如果我们系统的并发很高，在某个时间节点，突然缓存失效，这时候有大量的请求打过来，那么由于 redis 没有缓存数据，这时候我们的请求会全部去查一遍数据库，这时候我们的数据库服务会面临非常大的风险，要么连接被占满，要么其他业务不可用，这种情况就是 redis 的缓存击穿。"
				}
			]
		},
		{
			"ID": "20230202225625-jtwps4f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-jtwps4f"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20230202225625-8fxra0l"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-o0b6y46",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-o0b6y46"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3.2 异常原因"
				}
			]
		},
		{
			"ID": "20230202225625-8ygekop",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-8ygekop"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "热点 KEY 失效的同时，大量相同 KEY 请求同时访问。"
				}
			]
		},
		{
			"ID": "20230202225625-pcl9tzn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230202225625-pcl9tzn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3.3 解决方案"
				}
			]
		},
		{
			"ID": "20230202225625-qblenk4",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230202225625-qblenk4"
			},
			"Children": [
				{
					"ID": "20230202225625-f9ttx86",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230202225625-f9ttx86"
					},
					"Children": [
						{
							"ID": "20230202225625-1kdzca1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-1kdzca1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "热点 key 失效"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-8j2czl4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-8j2czl4"
			},
			"Children": [
				{
					"ID": "20230202225625-zr5v9yw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-zr5v9yw"
					},
					"Children": [
						{
							"ID": "20230202225625-p5u3g32",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-p5u3g32"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置永不失效\n如果所有的 key 都设置不失效，不就不会出现因为 KEY 失效导致的缓存雪崩问题了。redis 设置 key 永远有效的命令如下：\nPERSIST key\n缺点：会导致 redis 的空间资源需求变大。"
								}
							]
						}
					]
				},
				{
					"ID": "20230202225625-4l41dp9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-4l41dp9"
					},
					"Children": [
						{
							"ID": "20230202225625-lgw4iw0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-lgw4iw0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置随机失效时间\n如果 key 的失效时间不相同，就不会在同一时刻失效，这样就不会出现大量访问数据库的情况。\nredis 设置 key 有效时间命令如下：\nExpire key\n示例代码如下，通过 RedisClient 实现"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-qv2oaz8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-qv2oaz8"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n* 随机设置小于30分钟的失效时间\n* @param redisKey\n* @param value\n*/\nprivate void setRandomTimeForReidsKey(String redisKey,String value){\n//随机函数\nRandom rand = new Random();\n//随机获取30分钟内（30*60）的随机数\nint times = rand.nextInt(1800);\n//设置缓存时间（缓存的key,缓存的值，失效时间：单位秒）\nredisClient.setNxEx(redisKey,value,times);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-msweedo",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-msweedo"
			},
			"Children": [
				{
					"ID": "20230202225625-pm2viqu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-pm2viqu"
					},
					"Children": [
						{
							"ID": "20230202225625-yipqgeu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-yipqgeu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用二级缓存\n二级缓存是使用两组缓存，1 级缓存和 2 级缓存，同一个 Key 在两组缓存里都保存，但是他们的失效时间不同，这样 1 级缓存没有查到数据时，可以在二级缓存里查询，不会直接访问数据库。\n示例代码如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-7sdgukl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-7sdgukl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\nCacheTest test = new CacheTest();\n//从1级缓存中获取数据\nString value = test.queryByOneCacheKey(\"key\");\n//如果1级缓存中没有数据，再二级缓存中查找\nif(StringUtils.isBlank(value)){\nvalue = test.queryBySecondCacheKey(\"key\");\n//如果二级缓存中没有，从数据库中查找\nif(StringUtils.isBlank(value)){\nvalue =test.getFromDb();\n//如果数据库中也没有，就返回空\nif(StringUtils.isBlank(value)){\nSystem.out.println(\"数据不存在!\");\n}else{\n//二级缓存中保存数据\ntest.secondCacheSave(\"key\",value);\n//一级缓存中保存数据\ntest.oneCacheSave(\"key\",value);\nSystem.out.println(\"数据库中返回数据!\");\n}\n}else{\n//一级缓存中保存数据\ntest.oneCacheSave(\"key\",value);\nSystem.out.println(\"二级缓存中返回数据!\");\n}\n}else {\nSystem.out.println(\"一级缓存中返回数据!\");\n}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-p18mgp3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-p18mgp3"
			},
			"Children": [
				{
					"ID": "20230202225625-vznbojd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-vznbojd"
					},
					"Children": [
						{
							"ID": "20230202225625-88xhchf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-88xhchf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "异步更新缓存时间\n每次访问缓存时，启动一个线程或者建立一个异步任务来，更新缓存时间。\n示例代码如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-5e1fdep",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-5e1fdep"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class CacheRunnable implements Runnable {private ClusterRedisClientAdapter redisClient;\n/**\n* 要更新的key\n*/\npublic String key;public CacheRunnable(String key){\nthis.key =key;\n}@Override\npublic void run() {\n//更细缓存时间\nredisClient.expire(this.getKey(),1800);\n}public String getKey() {\nreturn key;\n}public void setKey(String key) {\nthis.key = key;\n}\n}\npublic static void main(String[] args) {\nCacheTest test = new CacheTest();\n//从缓存中获取数据\nString value = test.getFromCache(\"key\");\nif(StringUtils.isBlank(value)){\n//从数据库中获取数据\nvalue = test.getFromDb(\"key\");\n//将数据放在缓存中\ntest.oneCacheSave(\"key\",value);\n//返回数据\nSystem.out.println(\"返回数据\");}else{\n//异步任务更新缓存\nCacheRunnable runnable = new CacheRunnable(\"key\");\nrunnable.run();\n//返回数据\nSystem.out.println(\"返回数据\");\n}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-fjbdg3n",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230202225625-fjbdg3n"
			},
			"Children": [
				{
					"ID": "20230202225625-8w5j4jf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230202225625-8w5j4jf"
					},
					"Children": [
						{
							"ID": "20230202225625-wzdkd1c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-wzdkd1c"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "分布式锁\n使用分布式锁，同一时间只有 1 个请求可以访问到数据库，其他请求等待一段时间后，重复调用。\n示例代码如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-rxfzqfj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230202225625-rxfzqfj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n* 根据key获取数据\n* @param key\n* @return\n* @throws InterruptedException\n*/\npublic String queryForMessage(String key) throws InterruptedException {\n//初始化返回结果\nString result = StringUtils.EMPTY;\n//从缓存中获取数据\nresult = queryByOneCacheKey(key);\n//如果缓存中有数据，直接返回\nif(StringUtils.isNotBlank(result)){\nreturn result;\n}else{\n//获取分布式锁\nif(lockByBusiness(key)){\n//从数据库中获取数据\nresult = getFromDb(key);\n//如果数据库中有数据，就加在缓存中\nif(StringUtils.isNotBlank(result)){\noneCacheSave(key,result);\n}\n}else {\n//如果没有获取到分布式锁，睡眠一下，再接着查询数据\nThread.sleep(500);\nreturn queryForMessage(key);\n}\n}\nreturn result;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230202225625-p4c8k27",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230202225625-p4c8k27"
			},
			"Children": [
				{
					"ID": "20230202225625-lbzl9b0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230202225625-lbzl9b0"
					},
					"Children": [
						{
							"ID": "20230202225625-at3leti",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230202225625-at3leti"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "小结\n除了以上解决方法，还可以预先设置热门数据，通过一些监控方法，及时收集热点数据，将数据预先保存在缓存中。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230202225625-xnz6z9h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-xnz6z9h"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3 总结"
				}
			]
		},
		{
			"ID": "20230202225625-h7bv9fy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-h7bv9fy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Redis 缓存在互联网中至关重要，可以很大的提升系统效率。 本文介绍的缓存异常以及解决思路有可能不够全面，但也提供相应的解决思路和代码大体实现，希望可以为大家提供一些遇到缓存问题时的解决思路。如果有不足的地方，也请帮忙指出，大家共同进步。"
				}
			]
		},
		{
			"ID": "20230202225625-zaor65l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-zaor65l"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "往期推荐"
				}
			]
		},
		{
			"ID": "20230202225625-j8oacum",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-j8oacum"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==\u0026mid=2650171395\u0026idx=1\u0026sn=e616a2a6d1cf97766c31063e79913f21\u0026chksm=bed9b36d89ae3a7b623be0205c39f1b64a2d2b6715849f70d76fc87f3e07f7c96277fc196be6\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "12款开源的低代码开发平台，建议收藏"
				}
			]
		},
		{
			"ID": "20230202225625-4opcqox",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-4opcqox"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==\u0026mid=2650171394\u0026idx=2\u0026sn=9b935ccfa9891f0d081cd3942ee76f1d\u0026chksm=bed9b36c89ae3a7a13059086092f36c5a25d2de96057545e482b3cbf0c8d8e5488a9100ac4b5\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "黑客报价100万美元拍卖《英雄联盟》游戏源代码"
				}
			]
		},
		{
			"ID": "20230202225625-3u8d6zb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-3u8d6zb"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==\u0026mid=2650171919\u0026idx=1\u0026sn=52d257c0964a9154c1b0df1d7c97ca39\u0026chksm=bed9b16189ae3877f9b426aec1b0533cba447532839eb649cadf9c12bfea9892d7f082bb3117\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "大厂裁员轰轰烈烈，哪个技术岗位可以独善其身？"
				}
			]
		},
		{
			"ID": "20230202225625-hwdyqw4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230202225625-hwdyqw4"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Party-20230202225625-4zhp1n0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==\u0026mid=2650171759\u0026idx=1\u0026sn=2e6bc274b34af004de6437796e3dd537\u0026chksm=bed9b20189ae3b1791615047bfce935199d55c4e1899955951e6b0e202186a5315f86be21666\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "  全球开源技术峰会GOTC 2023将于4月在上海举办"
				}
			]
		},
		{
			"ID": "20230202225625-c4cckvx",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230202225625-c4cckvx"
			}
		},
		{
			"ID": "20230202225625-y9huymm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-y9huymm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里有最新开源资讯、软件更新、技术干货等内容"
				}
			]
		},
		{
			"ID": "20230202225625-h6sgo68",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230202225625-h6sgo68"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "点这里 ↓↓↓ 记得 关注✔ 标星⭐ 哦"
				}
			]
		}
	]
}