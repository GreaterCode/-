{
	"ID": "20230531162543-lde36it",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230531162543-lde36it",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230531162543-yhayov8\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230531162543-3u6ce0f\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230531162543-p7nuoxd\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "Kdump调试机理详细总结（一）_gdb vmcore",
		"updated": "20230531162834"
	},
	"Children": [
		{
			"ID": "20230531162543-yhayov8",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230531162543-yhayov8",
				"updated": "20230531162543"
			}
		},
		{
			"ID": "20230531162543-1aul6ij",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531162543-1aul6ij",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"ID": "20230531162543-uhe7i7d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531162543-uhe7i7d",
						"updated": "20230531162543"
					},
					"Children": [
						{
							"ID": "20230531162543-idkdi9f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531162543-idkdi9f",
								"updated": "20230531162543"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124562993",
									"TextMarkTextContent": "https://blog.csdn.net/Luckiers/article/details/124562993"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531162543-p7nuoxd",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230531162543-p7nuoxd",
				"updated": "20230531162543"
			}
		},
		{
			"ID": "20230531162543-eq4xjmo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531162543-eq4xjmo",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、简介"
				}
			]
		},
		{
			"ID": "20230531162543-mk4jazf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-mk4jazf",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文主要讲解Kdump的运行机理，后续两个章节会详细介绍kdump的使用和如何分析core"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=dump%E6%96%87%E4%BB%B6\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "dump文件"
				},
				{
					"Type": "NodeText",
					"Data": "信息，具体链接如下："
				}
			]
		},
		{
			"ID": "20230531162543-wavml3o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-wavml3o",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a strong",
					"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124581570",
					"TextMarkTextContent": "Kdump配置及使用详细总结（二）"
				}
			]
		},
		{
			"ID": "20230531162543-36ppkfy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-36ppkfy",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a strong",
					"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124612386",
					"TextMarkTextContent": "crash工具分析vmcore文件常用命令总结（三）"
				}
			]
		},
		{
			"ID": "20230531162543-mtn2l80",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-mtn2l80",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kdump 的概念出现在 2005 左右，是迄今为止最可靠的内核转存机制，已经被主要的 linux™ 厂商选用。kdump是在系统崩溃、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=%E6%AD%BB%E9%94%81\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "死锁"
				},
				{
					"Type": "NodeText",
					"Data": "或者死机的时候用来转储内存为vmcore保存到磁盘的一个工具和服务。"
				}
			]
		},
		{
			"ID": "20230531162543-48l4fwo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-48l4fwo",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1、Kdump相关名词定义："
				},
				{
					"Type": "NodeText",
					"Data": "\n（1）生产内核：第一个运行的内核（正常的系统运行内核）\n（2）捕获内核：第二个运行的内核（系统异常时，会启动捕获内核，用以对生产内核下的内存进行收集和转存）\n（3）ramdisk：这里讲的ramdisk实际上就是把一段内存假设为一个硬盘驱动器（使用ramdisk作为文件系统可以大幅提高读写速度）\n（4）ELF文件：这里讲的是内核分析出内存的使用和分布等情况，然后把这些信息综合起来生成一个ELF头文件保存起来。\n当内核产生错误（系统崩溃、死锁或者死机）时，kdump会将内存导出为vmcore保存到磁盘。"
				}
			]
		},
		{
			"ID": "20230531162543-z5mrkpm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-z5mrkpm",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2、Kdump执行流程"
				},
				{
					"Type": "NodeText",
					"Data": "\n（1）First kernel（生产内核）正常运行；\n（2）运行过程中，系统出现异常（也可以是模拟通过sysrq触发panic）；\n（3）在系统崩溃时，系统最后会调用 machine_kexec()，触发并启动Sencond kernel（捕获内核），传递ELF头文件的地址；\n（4）捕获内核与相应的ramdisk一起组建一个微环境，获取ELF头文件的地址，并生成出/proc/vmcore文件；\n（5）捕获内核的ramdisk中的脚本开始执行，将/proc/vmcore文件中的数据通过文件读写和网络来实现对生产内核下的内存进行收集和转存；\n（6）通过gdb、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=crash\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "crash"
				},
				{
					"Type": "NodeText",
					"Data": "等工具，对收集到的vmcore文件镜像分析。\n具体流程如下图所示：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/e739f42ba37a4090afa19b32c4e8ab2e-20230531162542-baiohop.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230531162543-g51t6px",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531162543-g51t6px",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、Kexec简介"
				}
			]
		},
		{
			"ID": "20230531162543-hulm94v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-hulm94v",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kexec是一个快速启动机制，允许通过已经运行的内核的上下文启动一个Linux内核，不需要经过BIOS，所以第一个内核的内存得以保留，这是内核崩溃转储的本质。\nKdump的实现依赖于Kexec，Kdump 是一种先进的基于 kexec 的内核崩溃转储机制，用来捕获kernel crash（内核崩溃）的时候产生的crash dump。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "具体实现步骤：一是内核空间的系统调用：kexec_load()"
				},
				{
					"Type": "NodeText",
					"Data": "\n负责在生产内核（production kernel 或 first kernel）启动时将捕获内核（capture kernel或sencond kernel）加载到指定地址。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "二是用户空间的工具kexec-tools"
				},
				{
					"Type": "NodeText",
					"Data": "\n他将捕获内核的地址传递给生产内核，从而在系统崩溃的时候能够找到捕获内核的地址并运行。没有kexec就没有kdump。先有kexec实现了在一个内核中可以启动另一个内核，才让kdump有了用武之地。\n内核空间：kexec_load()\nkexec 在 kernel 里以一个系统调用 kexec_load()的形式提供给用户。这个系统调用主要用来把另一个内核和其ramdisk加载到当前内核中。在 kdump中，捕获内核只能使用事先预留的一小段内存。生产内核的内存镜像会被以/proc/vmcore的形式提供给用户。这是一个ELF格式的方件，它的头是由用户空间工具 kexec 生成并传递来的。在系统崩溃时，系统最后会调用machine_kexec()。这通常是一个硬件相关的函数。它会引导捕获内核，从而完成 kdump 的过程。\n用户空间：kexec-tools\nkdump的很大一部分工作都是在用户空间内完成的。与kexec相关的集中在一个叫“kexec-tools”的工具中的“kexec”程序中。该程序主要是为调用kexec_load()收集各种信息，然后调用之。这些信息主要包括 purgatory 的入口地址，还有一组由 struct kexec_segment描述的信息。"
				}
			]
		},
		{
			"ID": "20230531162543-f2vuzq9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531162543-f2vuzq9",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、Kdump简介"
				}
			]
		},
		{
			"ID": "20230531162543-tp7mm5u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-tp7mm5u",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Kdump机制"
				},
				{
					"Type": "NodeText",
					"Data": "\nkdump机制的实现需要两个不同目的的内核，生产内核和捕获内核。生产内核是捕获内核服务的对像。捕获内核会在生产内核崩溃时启动起来，与相应的ramdisk一起组建一个微环境，用以对生产内核下的内存进行收集和转存。\n第一个内核保留了内存的一部分给第二内核启动用。由于kdump利用kexec启动捕获内核，绕过了BIOS，所以第一个内核的内存得以保留。这是内核崩溃转储的本质"
				}
			]
		},
		{
			"ID": "20230531162543-pb9jtwa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-pb9jtwa",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了在生产内核崩溃时能顺利启动捕获内核，捕获内核以及它的ramdisk是事先放到生产内核的内存中的。\n生产内核的内存是通过/proc/vmcore这个文件交给捕获内核的。为了生成它，用户工具在生产内核中分析出内存的使用和分布等情况，然后把这些信息综合起来生成一个ELF头文件保存起来。捕获内核被引导时会被同时传递这个ELF文件头的地址，通过分析它，捕获内核就可以生成出/proc/vmcore。有了/proc/vmcore这个文件，捕获内核的ramdisk中的脚本就可以通过通常的文件读写和网络来实现各种策略了。"
				}
			]
		},
		{
			"ID": "20230531162543-b7wwmgk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-b7wwmgk",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kexec和Kdump的设计区别：\nKexec的设计是用新内核去覆盖原内核位置；\nKdump的设计是预留一块内存来加载第二个内核(和相关数据)，发送Crash后第二个内核在原位置运行(不然就达不到相关目的了)，收集第一个内核的相关内存信息（kdump只是用了kexec的快速启动机制，没有全部使用其机制，如内核加载位置存在差别，必须要求捕获内核加载的地址不会覆盖生产内核的内存地址，从而才收集生成内核使用内存的相关信息），具体区别如下图：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/06e4a8b4c5364041b9f5c36a7fe19d3a-20230531162542-bqy7j1y.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "其他相关链接："
				}
			]
		},
		{
			"ID": "20230531162543-ax6p765",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-ax6p765",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a strong",
					"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124581570",
					"TextMarkTextContent": "1、Kdump配置及使用详细总结（二）"
				}
			]
		},
		{
			"ID": "20230531162543-kx2iek8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-kx2iek8",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a strong",
					"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124612386",
					"TextMarkTextContent": "2、crash工具分析vmcore文件常用命令总结（三）"
				}
			]
		},
		{
			"ID": "20230531162543-78q8znd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-78q8znd",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a strong",
					"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124544179",
					"TextMarkTextContent": "3、编译linux内核常见报错总结"
				}
			]
		},
		{
			"ID": "20230531162543-8504kxg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-8504kxg",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a strong",
					"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124568399",
					"TextMarkTextContent": "4、gdb调试常见命令总结"
				}
			]
		},
		{
			"ID": "20230531162543-3u6ce0f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531162543-3u6ce0f",
				"updated": "20230531162543"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a strong",
					"TextMarkAHref": "https://blog.csdn.net/Luckiers/article/details/124607351",
					"TextMarkTextContent": "5、Linux下objdump反编译文件命令总结"
				}
			]
		}
	]
}