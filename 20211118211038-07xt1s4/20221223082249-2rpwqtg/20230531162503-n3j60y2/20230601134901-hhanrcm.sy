{
	"ID": "20230601134901-hhanrcm",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230601134901-hhanrcm",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230601134901-i2dbqqd\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230601134901-wlj0c9y\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230601134901-kle5cg6\u0026quot;,\u0026quot;focusStart\u0026quot;:58,\u0026quot;focusEnd\u0026quot;:58}",
		"title": "gdb调试coredump(使用篇)_coredumpctl_",
		"updated": "20230601134956"
	},
	"Children": [
		{
			"ID": "20230601134901-i2dbqqd",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230601134901-i2dbqqd",
				"updated": "20230601134901"
			}
		},
		{
			"ID": "20230601134901-56oapzv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230601134901-56oapzv",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"ID": "20230601134901-tcrjw9y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230601134901-tcrjw9y",
						"updated": "20230601134901"
					},
					"Children": [
						{
							"ID": "20230601134901-kle5cg6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230601134901-kle5cg6",
								"updated": "20230601134901"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u011942101/article/details/119480601",
									"TextMarkTextContent": "https://blog.csdn.net/u011942101/article/details/119480601"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230601134901-k7aeq7g",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230601134901-k7aeq7g",
				"updated": "20230601134901"
			}
		},
		{
			"ID": "20230601134901-53zkr0d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-53zkr0d",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "原文链接\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/sunxiaopengsun/article/details/72974548",
					"TextMarkTextContent": "https://blog.csdn.net/sunxiaopengsun/article/details/72974548"
				}
			]
		},
		{
			"ID": "20230601134901-uczu3xy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-uczu3xy",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是coredump"
				}
			]
		},
		{
			"ID": "20230601134901-covzeq8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-covzeq8",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Coredump叫做核心转储，它是进程运行时在突然崩溃的那一刻的一个内存快照。操作系统在程序发生异常而异常在进程内部又没有被捕获的情况下，会把进程此刻内存、寄存器状态、运行堆栈等信息转储保存在一个文件里。"
				}
			]
		},
		{
			"ID": "20230601134901-snfk3h7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-snfk3h7",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该文件也是二进制文件，可以使用gdb、elfdump、objdump或者windows下的windebug、solaris下的mdb进行打开分析里面的具体内容。"
				}
			]
		},
		{
			"ID": "20230601134901-5lnn7ce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-5lnn7ce",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注：core是在半导体作为内存材料前的线圈，当时用线圈当做内存材料，线圈叫做core。用线圈做的内存叫做core memory。"
				}
			]
		},
		{
			"ID": "20230601134901-e3t5bd4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-e3t5bd4",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ulimit"
				}
			]
		},
		{
			"ID": "20230601134901-6pi0ga9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-6pi0ga9",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然我们知道进程在coredump的时候会产生core文件，但是有时候却发现进程虽然core了，但是我们却找不到core文件。"
				}
			]
		},
		{
			"ID": "20230601134901-jahd4i8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-jahd4i8",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Linux和Solaris下是需要进行设置的。"
				}
			]
		},
		{
			"ID": "20230601134901-2ot74tj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-2ot74tj",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ulimit -c 可以设置core文件的大小，如果这个值为0.则不会产生core文件，这个值太小，则core文件也不会产生，因为core文件一般都比较大。"
				}
			]
		},
		{
			"ID": "20230601134901-m5ci87w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-m5ci87w",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用ulimit -c unlimited来设置无限大，则任意情况下都会产生core文件。"
				}
			]
		},
		{
			"ID": "20230601134901-itvdoda",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-itvdoda",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gdb 调试coredump的简单示例"
				}
			]
		},
		{
			"ID": "20230601134901-ok7ieih",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230601134901-ok7ieih",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \"stdio.h\"\n#include \"stdlib.h\"\n\nvoid dumpCrash()\n{ \n    char *pStr = \"test_content\";\n    free(pStr);\n}\nint main()\n{ \n    dumpCrash();\n    return 0;\n}\n \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230601134901-q1vj3d3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-q1vj3d3",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上代码，pStr指针指向的是字符串常量，字符串常量是保存在常量区的，free释放常量区的内存肯定会导致coredump。"
				}
			]
		},
		{
			"ID": "20230601134901-rq6seam",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-rq6seam",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先把上面的代码拷贝到linux机器上，保存为dumpTest.c文件，gcc编译"
				}
			]
		},
		{
			"ID": "20230601134901-d36yk9a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-d36yk9a",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/71f7ddac9d5b45249187031ad67ea6c4-20230601134901-gvtn275.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-vfuhfoh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230601134901-vfuhfoh",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "gcc -o dumpTestdumpTest.c\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230601134901-spers3c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-spers3c",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行dumpTest产生core文件"
				}
			]
		},
		{
			"ID": "20230601134901-bk6476s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-bk6476s",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/873bfd1625fd4553b014723c7aea0b2d-20230601134901-eg75ggk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-j4qvnsl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-j4qvnsl",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成core文件"
				}
			]
		},
		{
			"ID": "20230601134901-am77gbm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-am77gbm",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，运行dumpTest的时候进程coredump了，但是没有产生core文件"
				}
			]
		},
		{
			"ID": "20230601134901-pdnsf8t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-pdnsf8t",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/c710dcefc152488a871700e3a1647e00-20230601134901-sc1dry3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-7xpjw9q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-7xpjw9q",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如截图所示，系统设置的core文件大小为0，此时即使产生了coredump，也不会产生core文件。"
				}
			]
		},
		{
			"ID": "20230601134901-q0z4lx8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-q0z4lx8",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/22fbace2d3564affbe9793ea6a0b78e4-20230601134901-gh4kfhd.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-tny0n22",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-tny0n22",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如截图所示，ulimit -c unlimited设置core文件大小后，产生了名字为core的core文件。"
				}
			]
		},
		{
			"ID": "20230601134901-87h23yt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-87h23yt",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时生成的core文件名称都是统一的”core”命名。"
				}
			]
		},
		{
			"ID": "20230601134901-9lyrsg3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-9lyrsg3",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自定义core文件的文件名"
				}
			]
		},
		{
			"ID": "20230601134901-xqa52zh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-xqa52zh",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的设置只是使能了core "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=dump\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "dump"
				},
				{
					"Type": "NodeText",
					"Data": "功能，缺省情况下，内核在coredump时所产生的core文件放在与该程序相同的目录中，并且文件名固定为core。很显然，如果有多个程序产生core文件，或者同一个程序多次崩溃，就会重复覆盖同一个core文件。"
				}
			]
		},
		{
			"ID": "20230601134901-53tydi4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-53tydi4",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们通过修改kernel的参数，可以指定内核所生成的coredump文件的文件名。例如，Easwy使用下面的命令使kernel生成名字为core_filename_time_pid格式的core dump文件："
				}
			]
		},
		{
			"ID": "20230601134901-s6ss5on",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-s6ss5on",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "echo /usr/core_log/core_%e_%t_%p \u003e /proc/sys/kernel/core_pattern"
				}
			]
		},
		{
			"ID": "20230601134901-o1xowux",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-o1xowux",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "echo后面内容最好不要带上引号，有的系统会把引号也带入，如下："
				}
			]
		},
		{
			"ID": "20230601134901-3fbu4qr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-3fbu4qr",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/5a28fc54c9384cd58c300923f8775811-20230601134901-0urcawc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-jbn1to2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-jbn1to2",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样，系统是不识别该内容的，也就会导致程序coredump而不会生成core文件。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/7bcc9bf8fa8d4a12962b54885c4e5119-20230601134901-o1r6be3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-afi4w9q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-afi4w9q",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上截图，通过设置core文件的名称以及路径，程序coredump的时候就会在指定路径按照指定的规则命名生成core文件。"
				}
			]
		},
		{
			"ID": "20230601134901-ju9uq1q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-ju9uq1q",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以在core_pattern模板中使用变量见下面的列表："
				}
			]
		},
		{
			"ID": "20230601134901-wl2k955",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-wl2k955",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "%%单个%字符%p所dump进程的进程ID%u所dump进程的实际用户ID%g所dump进程的实际组ID%s导致本次core dump的信号%t core dump的时间 (由1970年1月1日计起的秒数)%h主机名%e程序文件名"
				}
			]
		},
		{
			"ID": "20230601134901-q9oxyci",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-q9oxyci",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "设置永久保存"
				}
			]
		},
		{
			"ID": "20230601134901-wt31aam",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-wt31aam",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面截图可以看到，我后面再次执行生成coredump文件的时候实际上又再次设置了ulimit-c unlimited的，因为中间机器重启了。上面的设置都只是临时的，重启之后就需要重新设置，如何设置永久生效呢？"
				}
			]
		},
		{
			"ID": "20230601134901-38yeylz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-38yeylz",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "打开/etc/security/limits.conf 文件，在该文件的最后加上两行"
				}
			]
		},
		{
			"ID": "20230601134901-mkzxyne",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-mkzxyne",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "#下面是我的配置"
				}
			]
		},
		{
			"ID": "20230601134901-qas46u4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-qas46u4",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@root soft core unlimited"
				}
			]
		},
		{
			"ID": "20230601134901-r8bjqh9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-r8bjqh9",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@root hard core unlimited"
				}
			]
		},
		{
			"ID": "20230601134901-5wvi37x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-5wvi37x",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640992d29bf6464f9045bfc4ebb01538-20230601134901-bh8g7sj.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-jkymysf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-jkymysf",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "配置好后，放回原目录，重启reboot。"
				}
			]
		},
		{
			"ID": "20230601134901-go8wccs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-go8wccs",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "命名规则的修改在/proc/sys/kernel/core_pattern中也只是临时的，这个也是动态加载和生成的。永久修改在/etc/sysctl.conf文件中，在该文件的最后加上两行："
				}
			]
		},
		{
			"ID": "20230601134901-2w4txh4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-2w4txh4",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kernel.core_pattern = /var/core_log/core_%e_%t_%p"
				}
			]
		},
		{
			"ID": "20230601134901-cji1yd4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-cji1yd4",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kernel.core_uses_pid = 0"
				}
			]
		},
		{
			"ID": "20230601134901-wlj0c9y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-wlj0c9y",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/af3b94a441a444918bf4629f0bbd9adc-20230601134901-zt303l1.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-1gziajr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-1gziajr",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用以下命令，使修改结果马上生效。"
				}
			]
		},
		{
			"ID": "20230601134901-acnts8u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230601134901-acnts8u",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#sysctl –p\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230601134901-5f9olm1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-5f9olm1",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/aff5133868394f94ae2eb9b0900240ee-20230601134901-5maf54f.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-2atif3d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-2atif3d",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上截图，当前生成的core文件命名按照上面定义的规则加上了程序名称、coredump时间，进程ID等信息，并放到了指定目录/var/core_log"
				}
			]
		},
		{
			"ID": "20230601134901-6gn7qns",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-6gn7qns",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gdb调试coredump初步尝试"
				}
			]
		},
		{
			"ID": "20230601134901-g3dm7p6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-g3dm7p6",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gdb打开core文件的格式为"
				}
			]
		},
		{
			"ID": "20230601134901-k6wcqnl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-k6wcqnl",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gdb程序名(包含路径) core*（core文件名和路径），如下截图"
				}
			]
		},
		{
			"ID": "20230601134901-1maqzhh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-1maqzhh",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/d4b97b20ed014c41a0b113ebd7f41cf7-20230601134901-zn0bqnv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-wcas257",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-wcas257",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，gdb打开core文件时，有显示没有调试信息，因为之前编译的时候没有带上-g选项，没有调试信息是正常的，实际上它也不影响调试core文件。因为调试core文件时，符号信息都来自符号表，用不到调试信息。如下为加上调试信息的效果。"
				}
			]
		},
		{
			"ID": "20230601134901-w0bxu51",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-w0bxu51",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/0d216e7fa8264accb6f52fd31df1999a-20230601134901-hfwb82m.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "查看coredump时的堆栈"
				}
			]
		},
		{
			"ID": "20230601134901-x2i1dni",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-x2i1dni",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看堆栈使用bt或者where命令"
				}
			]
		},
		{
			"ID": "20230601134901-jsz49ia",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-jsz49ia",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/1dd16e0c2bd8490d94ef5dc48d030f76-20230601134901-hoay0qj.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-5dyg0wk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-5dyg0wk",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，在带上调试信息的情况下，我们实际上是可以看到core的地方和代码行的匹配位置。"
				}
			]
		},
		{
			"ID": "20230601134901-id250e1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-id250e1",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但往往正常发布环境是不会带上调试信息的，因为调试信息通常会占用比较大的存储空间，一般都会在编译的时候把-g选项去掉。"
				}
			]
		},
		{
			"ID": "20230601134901-x5zk7ak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-x5zk7ak",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "没有调试信息的情况下找core的代码行"
				}
			]
		},
		{
			"ID": "20230601134901-o63cbux",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-o63cbux",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/2122dd12bd714588be61519b4ece7e60-20230601134901-3l02xlh.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-44dmz4j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-44dmz4j",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上截图，没有调试信息的情况下，打开coredump堆栈，并不会直接显示core的代码行。"
				}
			]
		},
		{
			"ID": "20230601134901-qedsliz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-qedsliz",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时，frame addr(帧数)或者简写如上，f 1 跳转到core堆栈的第1帧。因为第0帧是libc的代码，已经不是我们自己代码了。"
				}
			]
		},
		{
			"ID": "20230601134901-6c3yr8k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-6c3yr8k",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "disassemble打开该帧函数的反汇编代码。"
				}
			]
		},
		{
			"ID": "20230601134901-w71yupy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230601134901-w71yupy",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#1  0x080483ec in dumpCrash ()\n(gdb) disassemble\nDump of assembler code for function dumpCrash:\n   0x080483d4 \u003c+0\u003e:     push   %ebp\n   0x080483d5 \u003c+1\u003e:     mov    %esp,%ebp\n   0x080483d7 \u003c+3\u003e:     sub    $0x28,%esp\n   0x080483da \u003c+6\u003e:     movl   $0x80484d0,-0xc(%ebp)\n   0x080483e1 \u003c+13\u003e:    mov    -0xc(%ebp),%eax\n   0x080483e4 \u003c+16\u003e:    mov    %eax,(%esp)\n   0x080483e7 \u003c+19\u003e:    call   0x80482f0 \u003cfree@plt\u003e\n=\u003e 0x080483ec \u003c+24\u003e:    leave\n   0x080483ed \u003c+25\u003e:    ret\nEnd of assembler dump.\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230601134901-6epvnc4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-6epvnc4",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上箭头位置表示coredump时该函数调用所在的位置"
				}
			]
		},
		{
			"ID": "20230601134901-6ekyp9i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-6ekyp9i",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/3078fc96cd834bf3b465b35ac797f714-20230601134901-jobpoh9.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-jgiajww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-jgiajww",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上截图，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "shell echo free@plt |c++filt"
				},
				{
					"Type": "NodeText",
					"Data": "​ 去掉函数的名词修饰"
				}
			]
		},
		{
			"ID": "20230601134901-ldxnm0f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-ldxnm0f",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不过上面的free使用去掉名词修饰效果和之前还是一样的。但是我们可以推测到这里是在调用free函数。"
				}
			]
		},
		{
			"ID": "20230601134901-lyomg0w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-lyomg0w",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如此，我们就能知道我们coredump的位置，从而进一步能推断出coredump的原因。"
				}
			]
		},
		{
			"ID": "20230601134901-51j54oq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-51j54oq",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当然，现实环境中，coredump的场景肯定远比这个复杂，都是逻辑都是一样的，我们需要先找到coredump的位置，再结合代码以及core文件推测coredump的原因。"
				}
			]
		},
		{
			"ID": "20230601134901-b0rdvl5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-b0rdvl5",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "寻找this指针和虚指针"
				}
			]
		},
		{
			"ID": "20230601134901-q8pcmhc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230601134901-q8pcmhc",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \"stdio.h\"\n#include \u003ciostream\u003e\n#include \"stdlib.h\"\nusing namespace std;\nclass base\n{ \npublic:\n    base();\n    virtual void test();\nprivate:\n    char *basePStr;\n};\nclass dumpTest : public base\n{ \npublic:\n    void test();\nprivate:\n    char *childPStr;\n};\nbase::base()\n{ \n    basePStr = \"test_info\";\n}\nvoid base::test()\n{ \n    cout\u003c\u003cbasePStr\u003c\u003cendl;\n}\nvoid dumpTest::test()\n{ \n    cout\u003c\u003c\"dumpTest\"\u003c\u003cendl;\n    delete childPStr;\n}\nvoid dumpCrash()\n{ \n    char *pStr = \"test_content\";\n    free(pStr);\n}\nint main()\n{ \n    dumpTest dump;\n    dump.test();\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230601134901-bd2hmxl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-bd2hmxl",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上代码，实现了一个简单的基类和一个子类。在main函数里定义一个子类的实例化对象，并调用它的虚函数方法test，test里由于直接delete没有初始化的指针childPStr，肯定会造成coredump。本次我们就希望通过dump文件，找到子类dumpTest的this指针和虚函数指针。"
				}
			]
		},
		{
			"ID": "20230601134901-df61y4h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-df61y4h",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和gcc一样，使用g++ -o DumpCppTest dumpTest.cpp编译cpp文件生成可执行程序。"
				}
			]
		},
		{
			"ID": "20230601134901-j9mw3m4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-j9mw3m4",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "./DumpCppTest 执行该程序，程序因为直接delete未初始化的指针，肯定会coredump。生成core文件如下"
				}
			]
		},
		{
			"ID": "20230601134901-wmwmn3p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-wmwmn3p",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/84fa1cec84284153aa93e11fbb66a66f-20230601134901-sv2qvrb.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-r8xyu7g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-r8xyu7g",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，使用gdb打开core文件，同时bt打开core的堆栈信息。"
				}
			]
		},
		{
			"ID": "20230601134901-gzut5f5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-gzut5f5",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从堆栈可以看到，最后两帧为我们程序自己的函数，其他的都是libc的代码。"
				}
			]
		},
		{
			"ID": "20230601134901-21fji4c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-21fji4c",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "f 6 调到第6帧上，之后info frame查看堆栈寄存器信息。"
				}
			]
		},
		{
			"ID": "20230601134901-apn1dm3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-apn1dm3",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/a3e0cf72bdfb4555a71b0516184f69fd-20230601134901-ae8us70.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-6rmfubp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-6rmfubp",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上截图所示，前一帧的栈寄存器地址是0xbf8cdb50，它的前一帧也就是main函数的位置，main函数里调用dump.test()的位置，那我们在这个地址上应该可以找到dump的this指针和它的虚指针，以及虚指针指向的虚函数表"
				}
			]
		},
		{
			"ID": "20230601134901-vgj0lvz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-vgj0lvz",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/16c66f8e276c439084259f8cc77ecc71-20230601134901-2xp88bk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-dx5wmjb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-dx5wmjb",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如图所示，0xbf8cdb50地址指向的是前一帧保存dump信息的位置，0xbf8cdc14bf8cdb64就表示dump的this指针，而this指针指向的第一个8字节0x0804893008048958就表示虚指针，如上，通过x 0x0804893008048958看到_ZTV8dumpTest+8的内容。"
				}
			]
		},
		{
			"ID": "20230601134901-21wwxe0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-21wwxe0",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "shell echo_ZTV8dumpTest|c++filt 可以看到“vtable for dumpTest”的内容。这个就表示dumpTest的虚函数表。"
				}
			]
		},
		{
			"ID": "20230601134901-fmlkv8d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-fmlkv8d",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上面也可以看到，这个地址指向的是虚函数表+8的偏移位置，而这个位置0x000000000804876a 通过x 0x000000000804876a 可以看到，存储的内容就是"
				}
			]
		},
		{
			"ID": "20230601134901-az2s9og",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-az2s9og",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/dd526aa8baea4733b34fa219461bc070-20230601134901-22jmava.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-nzyyemr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-nzyyemr",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "dumpTest::test() 函数。"
				}
			]
		},
		{
			"ID": "20230601134901-cqgeozj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-cqgeozj",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里也印证了，在继承关系里，基类的虚函数是在子类虚函数的前面。"
				}
			]
		},
		{
			"ID": "20230601134901-ugapb90",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-ugapb90",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/5764fe014df944da87b33c08b0211d77-20230601134901-u3ph44g.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-j1ewkjh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-j1ewkjh",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，x 0x000000000804876a-4 就可以看到dumpTest的基类base的虚函数test的位置。"
				}
			]
		},
		{
			"ID": "20230601134901-acx6yqh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-acx6yqh",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，在实际问题中，C++程序的很多coredump问题都是和指针相关的，很多segmentfault都是由于指针被误删或者访问空指针、或者越界等造成的，而这些都一般意味着正在访问的对象的this指针可能已经被破坏了，此时，我们通过去寻找函数对应的对象的this指针、虚指针能验证我们的推测。之后再结合代码寻找问题所在。"
				}
			]
		},
		{
			"ID": "20230601134901-jwkghxl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-jwkghxl",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gdb 查看core进程的所有线程堆栈"
				}
			]
		},
		{
			"ID": "20230601134901-vymxkid",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230601134901-vymxkid",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cpthread.h\u003e\n#include \u003cunistd.h\u003e\nusing namespace std;\n#define NUM_THREADS 5 //线程数\nint count = 0;\n\nvoid* say_hello( void *args )\n{ \n    while(1)\n    { \n        sleep(1);\n        cout\u003c\u003c\"hello...\"\u003c\u003cendl;\n        if(NUM_THREADS ==  count)\n        { \n            char *pStr = \"\";\n            delete pStr;\n        }\n    }\n} //函数返回的是函数指针，便于后面作为参数\nint main()\n{ \n    pthread_t tids[NUM_THREADS]; //线程id\n    for( int i = 0; i \u003c NUM_THREADS; ++i )\n    { \n        count = i+1;\n        int ret = pthread_create( \u0026tids[i], NULL, say_hello,NULL); //参数：创建的线程id，线程参数，线程运行函数的起始地址，运行函数的参数\n        if( ret != 0 ) //创建线程成功返回0\n        { \n            cout \u003c\u003c \"pthread_create error:error_code=\" \u003c\u003c ret \u003c\u003c endl;\n        }\n    }\n    pthread_exit( NULL ); //等待各个线程退出后，进程才结束，否则进程强制结束，线程处于未终止的状态\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230601134901-zbhyfvi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-zbhyfvi",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上代码，简单示意C++多线程。"
				}
			]
		},
		{
			"ID": "20230601134901-4ve8qw1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-4ve8qw1",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在linux下使用g++直接编译该cpp文件会报错，报错信息如下："
				}
			]
		},
		{
			"ID": "20230601134901-j1258sc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-j1258sc",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/9e9ac3e697b547ca81c230383575b9ab-20230601134901-t1zwhls.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-j2v89wx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-j2v89wx",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "会报 undefined reference to `pthread_create’ 的错误信息，解决办法如下："
				}
			]
		},
		{
			"ID": "20230601134901-uoklkdt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-uoklkdt",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 g++ -o MultiThreadDump MultiThread.cpp -lpthread 编译，编译参数上带上-lpthread即可。"
				}
			]
		},
		{
			"ID": "20230601134901-0uescwi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-0uescwi",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/84632f2b3dcd443794f46edda0005cc0-20230601134901-5kk142d.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-4sjhn2y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-4sjhn2y",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行./MultiThreadDump"
				}
			]
		},
		{
			"ID": "20230601134901-bwwlozp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-bwwlozp",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/eb2d5be2deb34bc689e6291d76dc98df-20230601134901-k4b289m.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-3mhaaxv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-3mhaaxv",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于上面代码里在count等于5的时候，会delete一个未初始化的指针，肯定会coredump。"
				}
			]
		},
		{
			"ID": "20230601134901-s9fxm6a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-s9fxm6a",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/298510806cd84f548d2ef92452cb4254-20230601134901-dlv2zaf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-4scxf7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-4scxf7o",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，gdb打开coredump文件，能看到5个线程LWP的信息。"
				}
			]
		},
		{
			"ID": "20230601134901-zdpx9m6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-zdpx9m6",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如何，查看每个线程的堆栈信息呢？"
				}
			]
		},
		{
			"ID": "20230601134901-z6kazcm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-z6kazcm",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，info threads查看所有线程正在运行的指令信息"
				}
			]
		},
		{
			"ID": "20230601134901-qn9bk08",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-qn9bk08",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/1c19ef86d0fd4989bf643833b58a6eec-20230601134901-5rdhym6.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-aohuoyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-aohuoyt",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "thread apply all bt"
				},
				{
					"Type": "NodeText",
					"Data": "​打开所有线程的堆栈信息"
				}
			]
		},
		{
			"ID": "20230601134901-tattnoi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-tattnoi",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/cc7fff97adc14b9d84ce535f447688f2-20230601134901-xfvosck.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-0ia04pm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-0ia04pm",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看指定线程堆栈信息：threadapply threadID bt,如："
				}
			]
		},
		{
			"ID": "20230601134901-74xiutm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230601134901-74xiutm",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "thread apply 5 bt\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230601134901-vhm5wvx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-vhm5wvx",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/4676c06bac1647cbbb502aa024486809-20230601134901-15af4l4.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-wy1gbyo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-wy1gbyo",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进入指定线程栈空间"
				}
			]
		},
		{
			"ID": "20230601134901-nnpw6fq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-nnpw6fq",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "thread threadID如下："
				}
			]
		},
		{
			"ID": "20230601134901-xm6j5cr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-xm6j5cr",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/2777a8dee387437a94daaff9c9c2a232-20230601134901-iibjubf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230601134901-lfxsnom",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-lfxsnom",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上截图所示，可以跳转到指定的线程中，并查看所在线程的正在运行的堆栈信息和寄存器信息。"
				}
			]
		},
		{
			"ID": "20230601134901-4tw9m55",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230601134901-4tw9m55",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总结："
				}
			]
		},
		{
			"ID": "20230601134901-2mcqe7n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-2mcqe7n",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如上，简单介绍了3种不同情况下的gdb调试coredump文件的情况，基本涵盖了调试coredump问题时的大部分会用到的gdb命令。"
				}
			]
		},
		{
			"ID": "20230601134901-2g2x82j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-2g2x82j",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "gdb调试coredump，大部分时候还是只能从core文件找出core的直观原因，但是更根本的原因一般还是需要结合代码一起分析当时进程的运行上下文场景，才能推测出程序代码问题所在。"
				}
			]
		},
		{
			"ID": "20230601134901-0vahiep",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230601134901-0vahiep",
				"updated": "20230601134901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此gdb调试coredump也是需要经验的积累，只有有一定的功底和对于基础知识的掌握才能在一堆二进制符号的core文件中找出问题的所在。"
				}
			]
		}
	]
}