{
	"ID": "20230531163239-v0m7bee",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230531163239-v0m7bee",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230531163239-j0y05tv\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230531163239-n2dzk0p\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230531163239-fmhatkf\u0026quot;,\u0026quot;focusStart\u0026quot;:15,\u0026quot;focusEnd\u0026quot;:15}",
		"title": "Linux Kdump 机制详解",
		"updated": "20230531163325"
	},
	"Children": [
		{
			"ID": "20230531163239-j0y05tv",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230531163239-j0y05tv",
				"updated": "20230531163239"
			}
		},
		{
			"ID": "20230531163239-m5nvxp0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-m5nvxp0",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-nwlbse7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-nwlbse7",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-ru1paxm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-ru1paxm",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242",
									"TextMarkTextContent": "https://blog.csdn.net/pwl999/article/details/118418242"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-yjcv5d9",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230531163239-yjcv5d9",
				"updated": "20230531163239"
			}
		},
		{
			"ID": "20230531163239-85pmqrr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230531163239-85pmqrr",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "文章目录"
				}
			]
		},
		{
			"ID": "20230531163239-ymey8bx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-ymey8bx",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-k2v0vgq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-k2v0vgq",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-ywmorlr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-ywmorlr",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#1__1",
									"TextMarkTextContent": "1. 简介"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-rtxw0h9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-rtxw0h9",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-o7sscq0",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230531163239-o7sscq0",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"ID": "20230531163239-l780kse",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-l780kse",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-cnrjs9w",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-cnrjs9w",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#11__12",
													"TextMarkTextContent": "1.1 安装"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-m7r4jdz",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-m7r4jdz",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-lppitag",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-lppitag",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#12__kdump_61",
													"TextMarkTextContent": "1.2 触发 kdump"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-wikoh5t",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-wikoh5t",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-veubcpj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-veubcpj",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#13__kdump_92",
													"TextMarkTextContent": "1.3 调试 kdump"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-s1v0yli",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-s1v0yli",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-0rfl7qi",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230531163239-0rfl7qi",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"ID": "20230531163239-2nm5ms9",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230531163239-2nm5ms9",
														"updated": "20230531163239"
													},
													"Children": [
														{
															"ID": "20230531163239-f64yhy8",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230531163239-f64yhy8",
																"updated": "20230531163239"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#131__debuginfo_vmlinux_102",
																	"TextMarkTextContent": "1.3.1 安装 debuginfo vmlinux"
																}
															]
														}
													]
												},
												{
													"ID": "20230531163239-fc0sn76",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230531163239-fc0sn76",
														"updated": "20230531163239"
													},
													"Children": [
														{
															"ID": "20230531163239-fmhatkf",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230531163239-fmhatkf",
																"updated": "20230531163239"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#132__kernel_120",
																	"TextMarkTextContent": "1.3.2 编译 kernel"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-osn8f9f",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-osn8f9f",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-xuveytk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-xuveytk",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#14_kdumptoolsservice__154",
													"TextMarkTextContent": "1.4 kdump-tools.service 流程分析"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-kyp59dy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-kyp59dy",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-k8cqc4q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-k8cqc4q",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#2__241",
									"TextMarkTextContent": "2. 原理分析"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-prgxi48",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-prgxi48",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-dqxinye",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230531163239-dqxinye",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"ID": "20230531163239-bs47y0c",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-bs47y0c",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-b44wz3t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-b44wz3t",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#21_elf_core__257",
													"TextMarkTextContent": "2.1 elf core 文件格式"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-wijwmzp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-wijwmzp",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-l11ywd6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-l11ywd6",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#3_prockcore_420",
									"TextMarkTextContent": "3. `/proc/kcore`"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-nc2wfrl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-nc2wfrl",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-dvdhjyj",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230531163239-dvdhjyj",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"ID": "20230531163239-16skt9b",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-16skt9b",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-yh27qgp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-yh27qgp",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#31__426",
													"TextMarkTextContent": "3.1 准备数据"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-srim558",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-srim558",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-06ojsee",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-06ojsee",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#32__elf_core_548",
													"TextMarkTextContent": "3.2 读取 elf core"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-c6hk9py",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-c6hk9py",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-xap7o6u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-xap7o6u",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#4_procvmcore_811",
									"TextMarkTextContent": "4. `/proc/vmcore`"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-zwcerzr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-zwcerzr",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-xq9czl5",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230531163239-xq9czl5",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"ID": "20230531163239-rlk3tov",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-rlk3tov",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-h08kdgr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-h08kdgr",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#41__elf_header__normal_kernel_821",
													"TextMarkTextContent": "4.1 准备 elf header (运行在 normal kernel)"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-fjpqjxe",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-fjpqjxe",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-hiqynfm",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230531163239-hiqynfm",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"ID": "20230531163239-s8aaiqv",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230531163239-s8aaiqv",
														"updated": "20230531163239"
													},
													"Children": [
														{
															"ID": "20230531163239-kuwshkw",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230531163239-kuwshkw",
																"updated": "20230531163239"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#411_crash_notes__974",
																	"TextMarkTextContent": "4.1.1 crash_notes 数据的更新"
																}
															]
														}
													]
												},
												{
													"ID": "20230531163239-f6nkt3m",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230531163239-f6nkt3m",
														"updated": "20230531163239"
													},
													"Children": [
														{
															"ID": "20230531163239-jrhi6lj",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230531163239-jrhi6lj",
																"updated": "20230531163239"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#412_vmcoreinfo_note__1014",
																	"TextMarkTextContent": "4.1.2 vmcoreinfo_note 数据的更新"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-9lq2g00",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-9lq2g00",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-yzqbhfj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-yzqbhfj",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#42__cmdline__normal_kernel_1177",
													"TextMarkTextContent": "4.2 准备 cmdline (运行在 normal kernel)"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-2hnc78d",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-2hnc78d",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-pkcr5ia",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-pkcr5ia",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#43__crash_kernel__normal_kernel_1216",
													"TextMarkTextContent": "4.3 启动 crash kernel (运行在 normal kernel)"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-6s6gj14",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-6s6gj14",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-8f4klmu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-8f4klmu",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#44__elfheadr__crash_kernel_1224",
													"TextMarkTextContent": "4.4 接收 elfheadr (运行在 crash kernel)"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-tf64yph",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-tf64yph",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-ttjk7ks",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-ttjk7ks",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#45__elfheadr__crash_kernel_1244",
													"TextMarkTextContent": "4.5 解析整理 elfheadr (运行在 crash kernel)"
												}
											]
										}
									]
								},
								{
									"ID": "20230531163239-wcdc1q5",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230531163239-wcdc1q5",
										"updated": "20230531163239"
									},
									"Children": [
										{
											"ID": "20230531163239-x9ns3pz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230531163239-x9ns3pz",
												"updated": "20230531163239"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#46__elf_core__crash_kernel_1424",
													"TextMarkTextContent": "4.6 读取 elf core (运行在 crash kernel)"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-pqgqqh2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-pqgqqh2",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-cjwmtr0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-cjwmtr0",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/118418242#_1551",
									"TextMarkTextContent": "参考资料"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-amgns6p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-amgns6p",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 简介"
				}
			]
		},
		{
			"ID": "20230531163239-q742nyy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-q742nyy",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kdump 提供了一种机制在内核出现故障的时候把系统的所有内存信息和寄存器信息 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=dump\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "dump"
				},
				{
					"Type": "NodeText",
					"Data": " 出来成一个文件，后续通过 gdb/crash 等工具进行分析和调试。和用户态程序的 coredump 机制类似。它的主要流程如下图所示："
				}
			]
		},
		{
			"ID": "20230531163239-ay1i43w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-ay1i43w",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20210702161536697-20230531163239-qrp65f8.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n可以看到它的核心原理是保留一段内存并且预先加载了一个备用的 kernel，在主 kernel 出现故障时跳转到备用 kernel，在备用 kernel 中把主 kernel 使用的内存和发生故障时的寄存器信息 dump 到一个磁盘文件中供后续分析。这个文件的格式是 elf core 文件格式。"
				}
			]
		},
		{
			"ID": "20230531163239-huo3af4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-huo3af4",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kdump 主要还是用来捕捉纯软件的故障，在嵌入式领域还需要加上对硬件故障的捕捉，仿照其原理并进行加强和改造，就能构造出自己的 coredump 机制。"
				}
			]
		},
		{
			"ID": "20230531163239-wjv7h78",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-wjv7h78",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面就来详细的分析整个 kdump 机制的详细原理。"
				}
			]
		},
		{
			"ID": "20230531163239-d05hzb4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-d05hzb4",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1 安装"
				}
			]
		},
		{
			"ID": "20230531163239-j9tg4tj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-j9tg4tj",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前的 kdump 安装需要手工的一个个安装 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kexec-tools"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kdump-tools"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crash"
				},
				{
					"Type": "NodeText",
					"Data": "​，手工配置 grub cmdline 参数。在现在的 ubuntu 中只需要安装一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "linux-crashdump"
				},
				{
					"Type": "NodeText",
					"Data": "​ 软件包就自动帮你搞定："
				}
			]
		},
		{
			"ID": "20230531163239-7m1vxwl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-7m1vxwl",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo apt-get install linux-crashdump\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-wtca7c7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-wtca7c7",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "安装完后，可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kdump-config"
				},
				{
					"Type": "NodeText",
					"Data": "​ 命令检查系统是否配置正确："
				}
			]
		},
		{
			"ID": "20230531163239-hyli4aq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-hyli4aq",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ kdump-config show\nDUMP_MODE:        kdump\nUSE_KDUMP:        1\nKDUMP_SYSCTL:     kernel.panic_on_oops=1\nKDUMP_COREDIR:    /var/crash\t\t// kdump 文件的存储目录\ncrashkernel addr: 0x\n   /var/lib/kdump/vmlinuz: symbolic link to /boot/vmlinuz-5.8.18+\nkdump initrd: \n   /var/lib/kdump/initrd.img: symbolic link to /var/lib/kdump/initrd.img-5.8.18+\ncurrent state:    ready to kdump\t// 显示 ready 状态，说明系统 kdmup 机制已经准备就绪\n\nkexec command:\n  /sbin/kexec -p --command-line=\"BOOT_IMAGE=/boot/vmlinuz-5.8.18+ root=UUID=9ee42fe2-4e73-4703-8b6d-bb238ffdb003 ro find_preseed=/preseed.cfg auto noprompt priority=critical locale=en_US quiet reset_devices systemd.unit=kdump-tools-dump.service nr_cpus=1 irqpoll nousb ata_piix.prefer_ms_hyperv=0\" --initrd=/var/lib/kdump/initrd.img /var/lib/kdump/vmlinuz\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-y2metxa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-y2metxa",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "linux-crashdump"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的本质还是由一个个分离的软件包组成的："
				}
			]
		},
		{
			"ID": "20230531163239-s6lhjii",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-s6lhjii",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo apt-get install linux-crashdump -d\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nThe following additional packages will be installed:\n  crash efibootmgr grub-common grub-efi-arm64 grub-efi-arm64-bin\n  grub-efi-arm64-signed grub2-common kdump-tools kexec-tools libfreetype6\n  libsnappy1v5 makedumpfile os-prober\nSuggested packages:\n  multiboot-doc xorriso desktop-base\nRecommended packages:\n  secureboot-db\nThe following NEW packages will be installed:\n  crash efibootmgr grub-common grub-efi-arm64 grub-efi-arm64-bin\n  grub-efi-arm64-signed grub2-common kdump-tools kexec-tools libfreetype6\n  libsnappy1v5 linux-crashdump makedumpfile os-prober\n0 upgraded, 14 newly installed, 0 to remove and 67 not upgraded.\nNeed to get 6611 kB of archives.\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-zgc7yc9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-zgc7yc9",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2 触发 kdump"
				}
			]
		},
		{
			"ID": "20230531163239-s3hmc88",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-s3hmc88",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 kdump 就绪以后我们手工触发一次 panic ："
				}
			]
		},
		{
			"ID": "20230531163239-iyc8024",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-iyc8024",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo bash\n# echo c \u003e /proc/sysrq-trigger\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-9g7af1i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-9g7af1i",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在系统 kdump 完成，重新启动以后。我们在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/var/crash"
				},
				{
					"Type": "NodeText",
					"Data": "​ 目录下可以找到 kdump 生成的内存转存储文件："
				}
			]
		},
		{
			"ID": "20230531163239-xd5shpn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-xd5shpn",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ ls -l /var/crash/202107011353/\ntotal 65324\n-rw------- 1 root whoopsie   119480 Jul  1 13:53 dmesg.202107011353  \t// 系统 kernel log 信息\n-rw------- 1 root whoopsie 66766582 Jul  1 13:53 dump.202107011353\t\t// 内存转存储文件，压缩格式\n$ sudo file /var/crash/202107011353/dump.202107011353 \n/var/crash/202107011353/dump.202107011353: Kdump compressed dump v6, system Linux, node ubuntu, release 5.8.18+, version #18 SMP Thu Jul 1 11:24:39 CST 2021, machine x86_64, domain (none)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-c1st4lr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-c1st4lr",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认生成的 dump 文件是经过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "makedumpfile"
				},
				{
					"Type": "NodeText",
					"Data": "​ 压缩过的，或者我们修改一些配置生成原始的 elf core 文件："
				}
			]
		},
		{
			"ID": "20230531163239-jo8r5ao",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-jo8r5ao",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ ls -l /var/crash/202107011132/\ntotal 1785584\n-rw------- 1 root whoopsie     117052 Jul  1 11:32 dmesg.202107011132\t// 系统 kernel log 信息\n-r-----r-- 1 root whoopsie 1979371520 Jul  1 11:32 vmcore.202107011132\t// 内存转存储文件，原始 Elf 格式\n$ file /var/crash/202107011132/vmcore.202107011132 \n/var/crash/202107011132/vmcore.202107011132: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-ikg1fb4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-ikg1fb4",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.3 调试 kdump"
				}
			]
		},
		{
			"ID": "20230531163239-8u2ybvv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-8u2ybvv",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crash"
				},
				{
					"Type": "NodeText",
					"Data": "​ 工具可以很方便对 kdump 文件进行分析， crash 是对 gdb 进行了一些包装，生成了更多的调试内核的快捷命令。同样可以利用 gdb 和 trace32 工具进行分析。"
				}
			]
		},
		{
			"ID": "20230531163239-t2d1rtw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-t2d1rtw",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo crash /usr/lib/debug/boot/vmlinux-5.8.0-43-generic /var/crash/202106170338/dump.202106170338\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-i7dqeqh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-i7dqeqh",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "值得注意的是，调试需要带 debuginfo 信息的 vmlinux 文件，需要额外安装。"
				}
			]
		},
		{
			"ID": "20230531163239-b3d3rqo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230531163239-b3d3rqo",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.3.1 安装 debuginfo vmlinux"
				}
			]
		},
		{
			"ID": "20230531163239-6yyfa0w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-6yyfa0w",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考ubuntu文档 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://wiki.ubuntu.com/Kernel/CrashdumpRecipe",
					"TextMarkTextContent": "How to use linux-crashdump to capture a kernel oops/panic"
				},
				{
					"Type": "NodeText",
					"Data": " 进行安装："
				}
			]
		},
		{
			"ID": "20230531163239-m8hmulr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-m8hmulr",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 添加 debuginfo 包源仓库\n$ sudo tee /etc/apt/sources.list.d/ddebs.list \u003c\u003c EOF\ndeb http://ddebs.ubuntu.com/ $(lsb_release -cs)          main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ $(lsb_release -cs)-security main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ $(lsb_release -cs)-updates  main restricted universe multiverse\ndeb http://ddebs.ubuntu.com/ $(lsb_release -cs)-proposed main restricted universe multiverse\nEOF\n\n$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01\n$ sudo apt-get update\n$ sudo apt-get install linux-image-$(uname -r)-dbgsym\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-iq589ab",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230531163239-iq589ab",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.3.2 编译 kernel"
				}
			]
		},
		{
			"ID": "20230531163239-j7lfwq6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-j7lfwq6",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果找不到带 debuginfo 信息的 vmlinux 文件，也可以自己编译内核来进行调试。"
				}
			]
		},
		{
			"ID": "20230531163239-folxhy1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-folxhy1",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-emrs5ur",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-emrs5ur",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-uz3wude",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-uz3wude",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1、去掉"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "/etc/apt/sources.list"
								},
								{
									"Type": "NodeText",
									"Data": "​文件中关于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "deb-src"
								},
								{
									"Type": "NodeText",
									"Data": "​的注释，下载当前内核源码："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-sclbt56",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-sclbt56",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo apt-get update\n$ sudo apt-get source linux-image-unsigned-$(uname -r)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-12qww5y",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-12qww5y",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-n568o6b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-n568o6b",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-ot5d6hn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-ot5d6hn",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2、参考"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel",
									"TextMarkTextContent": "Ubuntu BuildYourOwnKernel"
								},
								{
									"Type": "NodeText",
									"Data": "安装相关工具："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-vvrb5d0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-vvrb5d0",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo apt-get build-dep linux linux-image-$(uname -r)\n$ sudo apt-get install libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-r2xdrzl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-r2xdrzl",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-7h4no6z",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-7h4no6z",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-2klurlb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-2klurlb",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3、内核编译和安装："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-321rkh1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-321rkh1",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel",
					"TextMarkTextContent": "Ubuntu BuildYourOwnKernel"
				},
				{
					"Type": "NodeText",
					"Data": "中使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "debian/rules"
				},
				{
					"Type": "NodeText",
					"Data": "​的方式进行内核编译和打包。也可以使用以下的简便方式来进行编译安装："
				}
			]
		},
		{
			"ID": "20230531163239-tl6qk6e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-tl6qk6e",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 编译\n$ make menuconfig\n$ make bzImage modules\n// 安装\n$ make INSTALL_MOD_STRIP=1 modules_install \n$ sudo mkinitramfs /lib/modules/4.14.134+ -o /boot/initrd.img-4.14.134-xenomai\n$ sudo cp arch/x86/boot/bzImage /boot/vmlinuz-4.14.134-xenomai\n$ sudo cp System.map /boot/System.map-4.14.134-xenomai\n$ sudo update-grub2\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-3c6m73h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-3c6m73h",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.4 kdump-tools.service 流程分析"
				}
			]
		},
		{
			"ID": "20230531163239-38v77f9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-38v77f9",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在前面我们说过可以把 kdump 默认的压缩格式改成原生 ELF Core 文件格式，本节我们就来实现这个需求。"
				}
			]
		},
		{
			"ID": "20230531163239-p0m7q9m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-p0m7q9m",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "把"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​文件从内存拷贝到磁盘是 crash kernel 中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kdump-tools.service"
				},
				{
					"Type": "NodeText",
					"Data": "​ 服务完成的，我们来详细分析一下其中的流程："
				}
			]
		},
		{
			"ID": "20230531163239-tv77r60",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-tv77r60",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-zdq13yo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-zdq13yo",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-1t4ljjl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-1t4ljjl",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1、首先从 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kdump-config"
								},
								{
									"Type": "NodeText",
									"Data": "​ 配置中可以看到，第二份 crash kernel 启动后 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "systemd"
								},
								{
									"Type": "NodeText",
									"Data": "​ 只需要启动一个服务 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kdump-tools-dump.service"
								},
								{
									"Type": "NodeText",
									"Data": "​："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-dggshzw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-dggshzw",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# kdump-config show\nDUMP_MODE:        kdump\nUSE_KDUMP:        1\nKDUMP_SYSCTL:     kernel.panic_on_oops=1\nKDUMP_COREDIR:    /var/crash\ncrashkernel addr: 0x73000000\n   /var/lib/kdump/vmlinuz: symbolic link to /boot/vmlinuz-5.8.0-43-generic\nkdump initrd: \n   /var/lib/kdump/initrd.img: symbolic link to /var/lib/kdump/initrd.img-5.8.0-43-generic\ncurrent state:    ready to kdump\n\nkexec command:\n  /sbin/kexec -p --command-line=\"BOOT_IMAGE=/boot/vmlinuz-5.8.0-43-generic root=UUID=9ee42fe2-4e73-4703-8b6d-bb238ffdb003 ro find_preseed=/preseed.cfg auto noprompt priority=critical locale=en_US quiet reset_devices systemd.unit=kdump-tools-dump.service nr_cpus=1 irqpoll nousb ata_piix.prefer_ms_hyperv=0\" --initrd=/var/lib/kdump/initrd.img /var/lib/kdump/vmlinuz\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-c430gin",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-c430gin",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-fcyvy59",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-fcyvy59",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-qgt3gid",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-qgt3gid",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kdump-tools-dump.service"
								},
								{
									"Type": "NodeText",
									"Data": "​ 服务本质是调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kdump-tools start"
								},
								{
									"Type": "NodeText",
									"Data": "​ 脚本："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-knef23u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-knef23u",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# systemctl cat kdump-tools-dump.service\n# /lib/systemd/system/kdump-tools-dump.service\n[Unit]\nDescription=Kernel crash dump capture service\nWants=network-online.target dbus.socket systemd-resolved.service\nAfter=network-online.target dbus.socket systemd-resolved.service\n\n[Service]\nType=oneshot\nStandardOutput=syslog+console\nEnvironmentFile=/etc/default/kdump-tools\nExecStart=/etc/init.d/kdump-tools start\nExecStop=/etc/init.d/kdump-tools stop\nRemainAfterExit=yes\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-n2dzk0p",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-n2dzk0p",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-qyqqatx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-qyqqatx",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-vt4pgf5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-vt4pgf5",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kdump-tools"
								},
								{
									"Type": "NodeText",
									"Data": "​ 调用了 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kdump-config savecore"
								},
								{
									"Type": "NodeText",
									"Data": "​："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-fx3s3j7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-fx3s3j7",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# vim /etc/init.d/kdump-tools\n\nKDUMP_SCRIPT=/usr/sbin/kdump-config\n\n                echo -n \"Starting $DESC: \"\n                $KDUMP_SCRIPT savecore\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-8wcyo89",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-8wcyo89",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-sqbcufw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-sqbcufw",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-37oqjo5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-37oqjo5",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "kdump-config"
								},
								{
									"Type": "NodeText",
									"Data": "​ 调用了 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "makedumpfile -c -d 31 /proc/vmcore dump.xxxxxx"
								},
								{
									"Type": "NodeText",
									"Data": "​："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-m54hjq8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-m54hjq8",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "MAKEDUMP_ARGS=${MAKEDUMP_ARGS:=\"-c -d 31\"}\nvmcore_file=/proc/vmcore\n\n        makedumpfile $MAKEDUMP_ARGS $vmcore_file $KDUMP_CORETEMP\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-9ucvde5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-9ucvde5",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kdump-tools-dump.service 默认调用 makedumpfile 生成压缩的 dump 文件。但是我们想分析原始的 elf 格式的 vmcore 文件，怎么办？"
				}
			]
		},
		{
			"ID": "20230531163239-moc85lx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-moc85lx",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-a4ofr3g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-a4ofr3g",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-089nwtw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-089nwtw",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4.1、首先我们修改 /usr/sbin/kdump-config 文件中的 MAKEDUMP_ARGS 参数让其出错。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-em4dk03",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-em4dk03",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "MAKEDUMP_ARGS=${MAKEDUMP_ARGS:=\"-xxxxx -c -d 31\"}      // 其中 -xxxxx 是随便加的选项\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-z04pnzg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-z04pnzg",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-tb42cgm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-tb42cgm",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-m9u3ig6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-m9u3ig6",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4.2、然后 kdump-config 就会调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "cp /proc/vmcore vmcore.xxxxxx"
								},
								{
									"Type": "NodeText",
									"Data": "​ 命令来生成原始 elf 格式的 vmcore 文件了"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-080q998",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-080q998",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "        log_action_msg \"running makedumpfile $MAKEDUMP_ARGS $vmcore_file $KDUMP_CORETEMP\"\n        makedumpfile $MAKEDUMP_ARGS $vmcore_file $KDUMP_CORETEMP\t\t// 先调用 makedumpfile 生成压缩格式的 dump 文件\n        ERROR=$?\n        if [ $ERROR -ne 0 ] ; then\t\t\t\t\t\t\t\t\t\t// 如果 makedumpfile 调用失败\n                log_failure_msg \"$NAME: makedumpfile failed, falling back to 'cp'\"\n                logger -t $NAME \"makedumpfile failed, falling back to 'cp'\"\n                KDUMP_CORETEMP=\"$KDUMP_STAMPDIR/vmcore-incomplete\"\n                KDUMP_COREFILE=\"$KDUMP_STAMPDIR/vmcore.$KDUMP_STAMP\"\n                cp $vmcore_file $KDUMP_CORETEMP\t\t\t\t\t\t\t// 再尝试使用 cp 拷贝原始的 vmcore elf 文件\n                ERROR=$?\n        fi\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-rkgyxvp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-rkgyxvp",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. 原理分析"
				}
			]
		},
		{
			"ID": "20230531163239-gxw5hhx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-gxw5hhx",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kexec 实现了crash kernel 的加载。核心分为两部分："
				}
			]
		},
		{
			"ID": "20230531163239-6bd4yst",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-6bd4yst",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-r266dsr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-r266dsr",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-6f0a07d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-6f0a07d",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "kexec_file_load()/kexec_load()。负责在起始时就把备份的 kernel 和 initrd 加载好到内存。"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-q8lmjtn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-q8lmjtn",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-szvi3ro",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-szvi3ro",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "__crash_kexec()。负责在故障时跳转到备份 kernel 中。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-cutdofn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-cutdofn",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kdump 主要实现把 vmcore 文件从内存拷贝到磁盘，并进行一些瘦身。"
				}
			]
		},
		{
			"ID": "20230531163239-q8l52d7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-q8l52d7",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本次并不打算对 kexec 加载内核和地址转换流程 以及 kdump 的拷贝裁剪 进行详细的解析，我们只关注其中的两个重要文件 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/kcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​。其中："
				}
			]
		},
		{
			"ID": "20230531163239-gt9hs9z",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-gt9hs9z",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-lrmf8u9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-lrmf8u9",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-ww5rbhv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-ww5rbhv",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "/proc/kcore"
								},
								{
									"Type": "NodeText",
									"Data": "​。是在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "normal kernel"
								},
								{
									"Type": "NodeText",
									"Data": "​ 中把 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "normal kernel"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的内存模拟成一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "elf core"
								},
								{
									"Type": "NodeText",
									"Data": "​ 文件，可以使用gdb 对当前系统进行在线调试，因为是自己调试自己会存在一些限制。"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-iusmczw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-iusmczw",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-wkezy6g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-wkezy6g",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "/proc/vmcore"
								},
								{
									"Type": "NodeText",
									"Data": "​。是在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "crash kernel"
								},
								{
									"Type": "NodeText",
									"Data": "​ 中把 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "normal kernel"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的内存模拟成一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "elf core"
								},
								{
									"Type": "NodeText",
									"Data": "​ 文件，因为这时 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "normal kernel"
								},
								{
									"Type": "NodeText",
									"Data": "​ 已经停止运行，所以可以无限制的进行调试。我们 kdump 最后得到的 dump 文件，就是把 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "/proc/vmcore"
								},
								{
									"Type": "NodeText",
									"Data": "​ 文件从内存简单拷贝到了磁盘，或者再加上点裁剪和压缩。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-cowqvx6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-cowqvx6",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以可以看到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/kcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这两个文件是整个机制的核心，我们重点分析这两部分的实现。"
				}
			]
		},
		{
			"ID": "20230531163239-gi8hilp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-gi8hilp",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 elf core 文件格式"
				}
			]
		},
		{
			"ID": "20230531163239-e3hzv2o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-e3hzv2o",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://refspecs.linuxfoundation.org/elf/elf.pdf",
					"TextMarkTextContent": "ELF"
				},
				{
					"Type": "NodeText",
					"Data": " 文件格式，我们熟知它有三种格式 .o文件(ET_REL)、.so文件(ET_EXEC)、exe文件(ET_DYN)。但是关于它的第四种格式 core文件(ET_CORE) 一直很神秘，也很神奇 gdb 一调试就能恢复到故障现场。"
				}
			]
		},
		{
			"ID": "20230531163239-zzuzn5h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-zzuzn5h",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下是 elf core 文件的大致格式：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/202107021615491-20230531163239-azp51uv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230531163239-htkyv9c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-htkyv9c",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到 elf core 文件只关注运行是状态，所以它只有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "segment"
				},
				{
					"Type": "NodeText",
					"Data": "​ 信息，没有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "section"
				},
				{
					"Type": "NodeText",
					"Data": "​ 信息。其主要包含两种类型的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "segment"
				},
				{
					"Type": "NodeText",
					"Data": "​ 信息："
				}
			]
		},
		{
			"ID": "20230531163239-zzv345h",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-zzv345h",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-4ys6gzw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-4ys6gzw",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-9ow2gd4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-9ow2gd4",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "PT_LOAD"
								},
								{
									"Type": "NodeText",
									"Data": "​。每个 segemnt 用来记录一段 memory 区域，还记录了这段 memory 对应的物理地址、虚拟地址和长度。"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-wxt8qbi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-wxt8qbi",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-i2p94q6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-i2p94q6",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "PT_NOTE"
								},
								{
									"Type": "NodeText",
									"Data": "​。这个是 elf core 中新增的 segment，记录了解析 memory 区域的关键信息。PT_NOTE segment 被分成了多个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "elf_note"
								},
								{
									"Type": "NodeText",
									"Data": "​结构，其中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NT_PRSTATUS"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类型的记录了复位前 CPU 的寄存器信息，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NT_TASKSTRUCT"
								},
								{
									"Type": "NodeText",
									"Data": "​ 记录了进程的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "task_struct"
								},
								{
									"Type": "NodeText",
									"Data": "​ 信息，还有一个最关键0类型的自定义 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "VMCOREINFO"
								},
								{
									"Type": "NodeText",
									"Data": "​ 结论记录了内核的一些关键信息。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-kc9dz69",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-kc9dz69",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "elf core 文件的大部分内容用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PT_LOAD"
				},
				{
					"Type": "NodeText",
					"Data": "​ segemnt 来记录 memeory 信息，但是怎么利用这些内存信息的钥匙记录在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PT_NOTE"
				},
				{
					"Type": "NodeText",
					"Data": "​ segemnt 当中。"
				}
			]
		},
		{
			"ID": "20230531163239-biuxsjk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-biuxsjk",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们来看一个具体 vmcore 文件的例子："
				}
			]
		},
		{
			"ID": "20230531163239-g3kzga6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-g3kzga6",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-xbareuu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-xbareuu",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-xbr6tyb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-xbr6tyb",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1、首先我们查询 elf header 信息："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-wycgie1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-wycgie1",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo readelf -e vmcore.202107011132 \nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              CORE (Core file)  // 可以看到文件类型是 ET_CORE\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x0\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          0 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         6\n  Size of section headers:           0 (bytes)\n  Number of section headers:         0\n  Section header string table index: 0\n\nThere are no sections in this file.\n\n// 可以看到包含了 PT_NOTE 和 PT_LOAD 两种类型的 segment\nProgram Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  NOTE           0x0000000000001000 0x0000000000000000 0x0000000000000000\n                 0x0000000000001318 0x0000000000001318         0x0\n  LOAD           0x0000000000003000 0xffffffffb7200000 0x0000000006c00000\n                 0x000000000202c000 0x000000000202c000  RWE    0x0\n  LOAD           0x000000000202f000 0xffff903a00001000 0x0000000000001000\n                 0x000000000009d800 0x000000000009d800  RWE    0x0\n  LOAD           0x00000000020cd000 0xffff903a00100000 0x0000000000100000\n                 0x0000000072f00000 0x0000000072f00000  RWE    0x0\n  LOAD           0x0000000074fcd000 0xffff903a7f000000 0x000000007f000000\n                 0x0000000000ee0000 0x0000000000ee0000  RWE    0x0\n  LOAD           0x0000000075ead000 0xffff903a7ff00000 0x000000007ff00000\n                 0x0000000000100000 0x0000000000100000  RWE    0x0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-6ffc1in",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-6ffc1in",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-1hsx8sr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-1hsx8sr",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-f7rtfls",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-f7rtfls",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2、可以进一步查看 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "PT_NOTE"
								},
								{
									"Type": "NodeText",
									"Data": "​ 存储的具体内容："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-y58v8lk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-y58v8lk",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo readelf -n vmcore.202107011132 \n\nDisplaying notes found at file offset 0x00001000 with length 0x00001318:\n  Owner                Data size \tDescription\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)  // 因为系统有8个CPU，所以保存了8份 prstatus 信息\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  VMCOREINFO           0x000007dd\tUnknown note type: (0x00000000)\t  // 自定义的VMCOREINFO信息\n   description data: 4f 53 52 45 4c 45 41 53 45 3d 35 2e 38 2e 31 38 2b 0a 50 41 47 45 53 49 5a 45 3d 34 30 39 36 0a 53 59 4d 42 4f 4c 28 69 6e 69 74 5f 75 74 73 5f 6e 73 29 3d 66 66 66 66 66 66 66 66 ...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-9fxhqhh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-9fxhqhh",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-hc0guwl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-hc0guwl",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-1m2mbwj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-1m2mbwj",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3、可以进一步解析 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "VMCOREINFO"
								},
								{
									"Type": "NodeText",
									"Data": "​ 存储的信息，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "description data"
								},
								{
									"Type": "NodeText",
									"Data": "​后面是一段16进制的码流转换以后得到："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-qpxh8kc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-qpxh8kc",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "OSRELEASE=5.8.0-43-generic\nPAGESIZE=4096\nSYMBOL(init_uts_ns)=ffffffffa5014620\nSYMBOL(node_online_map)=ffffffffa5276720\nSYMBOL(swapper_pg_dir)=ffffffffa500a000\nSYMBOL(_stext)=ffffffffa3a00000\nSYMBOL(vmap_area_list)=ffffffffa50f2560\nSYMBOL(mem_section)=ffff91673ffd2000\nLENGTH(mem_section)=2048\nSIZE(mem_section)=16\nOFFSET(mem_section.section_mem_map)=0\nSIZE(page)=64\nSIZE(pglist_data)=171968\nSIZE(zone)=1472\nSIZE(free_area)=88\nSIZE(list_head)=16\nSIZE(nodemask_t)=128\nOFFSET(page.flags)=0\nOFFSET(page._refcount)=52\nOFFSET(page.mapping)=24\nOFFSET(page.lru)=8\nOFFSET(page._mapcount)=48\nOFFSET(page.private)=40\nOFFSET(page.compound_dtor)=16\nOFFSET(page.compound_order)=17\nOFFSET(page.compound_head)=8\nOFFSET(pglist_data.node_zones)=0\nOFFSET(pglist_data.nr_zones)=171232\nOFFSET(pglist_data.node_start_pfn)=171240\nOFFSET(pglist_data.node_spanned_pages)=171256\nOFFSET(pglist_data.node_id)=171264\nOFFSET(zone.free_area)=192\nOFFSET(zone.vm_stat)=1280\nOFFSET(zone.spanned_pages)=120\nOFFSET(free_area.free_list)=0\nOFFSET(list_head.next)=0\nOFFSET(list_head.prev)=8\nOFFSET(vmap_area.va_start)=0\nOFFSET(vmap_area.list)=40\nLENGTH(zone.free_area)=11\nSYMBOL(log_buf)=ffffffffa506a6e0\nSYMBOL(log_buf_len)=ffffffffa506a6dc\nSYMBOL(log_first_idx)=ffffffffa55f55d8\nSYMBOL(clear_idx)=ffffffffa55f55a4\nSYMBOL(log_next_idx)=ffffffffa55f55c8\nSIZE(printk_log)=16\nOFFSET(printk_log.ts_nsec)=0\nOFFSET(printk_log.len)=8\nOFFSET(printk_log.text_len)=10\nOFFSET(printk_log.dict_len)=12\nLENGTH(free_area.free_list)=5\nNUMBER(NR_FREE_PAGES)=0\nNUMBER(PG_lru)=4\nNUMBER(PG_private)=13\nNUMBER(PG_swapcache)=10\nNUMBER(PG_swapbacked)=19\nNUMBER(PG_slab)=9\nNUMBER(PG_hwpoison)=23\nNUMBER(PG_head_mask)=65536\nNUMBER(PAGE_BUDDY_MAPCOUNT_VALUE)=-129\nNUMBER(HUGETLB_PAGE_DTOR)=2\nNUMBER(PAGE_OFFLINE_MAPCOUNT_VALUE)=-257\nNUMBER(phys_base)=1073741824\nSYMBOL(init_top_pgt)=ffffffffa500a000\nNUMBER(pgtable_l5_enabled)=0\nSYMBOL(node_data)=ffffffffa5271da0\nLENGTH(node_data)=1024\nKERNELOFFSET=22a00000\nNUMBER(KERNEL_IMAGE_SIZE)=1073741824\nNUMBER(sme_mask)=0\nCRASHTIME=1623937823\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-z5n7bv9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-z5n7bv9",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考资料：\n1."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://www.gabriel.urdhr.fr/2015/05/29/core-file/",
					"TextMarkTextContent": "Anatomy of an ELF core file"
				},
				{
					"Type": "NodeText",
					"Data": "\n2."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://static1.squarespace.com/static/556340ece4b0869396f21099/t/558498e6e4b016fed75f80be/1434753254369/2014_11_Ryan-ONeill_Extended-Core-Format-Snapshots.pdf",
					"TextMarkTextContent": "Extending the ELF Core Format for Forensics Snapshots"
				},
				{
					"Type": "NodeText",
					"Data": "\n3."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://lief.quarkslab.com/doc/latest/tutorials/12_elf_coredump.html",
					"TextMarkTextContent": "ELF Coredump"
				},
				{
					"Type": "NodeText",
					"Data": "\n4."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://schlafwandler.github.io/posts/dumping-/proc/kcore/",
					"TextMarkTextContent": "Dumping /proc/kcore in 2019"
				},
				{
					"Type": "NodeText",
					"Data": "\n5."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://stackoverflow.com/questions/5986366/elf-core-file-format",
					"TextMarkTextContent": "readelf -n"
				}
			]
		},
		{
			"ID": "20230531163239-ihoctrv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-ihoctrv",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/kcore"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230531163239-72sfh9y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-72sfh9y",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有些同学在清理磁盘空间的常常会碰到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/kcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件，因为它显示出来的体积非常的大，有时高达128T。但是实际上她没有占用任何磁盘空间，它是一个内存文件系统中的文件。它也没有占用多少内存空间，除了一些控制头部分占用少量内存，大块的空间都是模拟的，只有在用户读操作的时候才会从对应的内存空间去读取的。"
				}
			]
		},
		{
			"ID": "20230531163239-511xo3l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-511xo3l",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上一节已经介绍了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/kcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是把当前系统的内存模拟成一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "elf core"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件，可以使用gdb 对当前系统进行在线调试。那本机我们就来看看具体的模拟过程。"
				}
			]
		},
		{
			"ID": "20230531163239-lbmsuyq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-lbmsuyq",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1 准备数据"
				}
			]
		},
		{
			"ID": "20230531163239-7ada8gw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-7ada8gw",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初始化就是构建kclist_head链表的一个过程，链表中每一个成员对应一个 PT_LOAD segment。在读操作的时候再用elf的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PT_LOAD segment"
				},
				{
					"Type": "NodeText",
					"Data": "​ 呈现这些成员。"
				}
			]
		},
		{
			"ID": "20230531163239-w3hfi7r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-w3hfi7r",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static int __init proc_kcore_init(void)\n{\n\t/* (1) 创建 /proc/kcore 文件 */\n\tproc_root_kcore = proc_create(\"kcore\", S_IRUSR, NULL, \u0026kcore_proc_ops);\n\tif (!proc_root_kcore) {\n\t\tpr_err(\"couldn't create /proc/kcore\\n\");\n\t\treturn 0; /* Always returns 0. */\n\t}\n\t/* Store text area if it's special */\n\t/* (2) 将内核代码段 _text 加入kclist_head链表，kclist_head链表中每一个成员对应一个 PT_LOAD segment */\n\tproc_kcore_text_init();\n\t/* Store vmalloc area */\n\t/* (3) 将 VMALLOC 段内存加入kclist_head链表 */\n\tkclist_add(\u0026kcore_vmalloc, (void *)VMALLOC_START,\n\t\tVMALLOC_END - VMALLOC_START, KCORE_VMALLOC);\n\t/* (4) 将 MODULES_VADDR 模块内存加入kclist_head链表 */\n\tadd_modules_range();\n\t/* Store direct-map area from physical memory map */\n\t/* (5) 遍历系统内存布局表，将有效内存加入kclist_head链表 */\n\tkcore_update_ram();\n\tregister_hotmemory_notifier(\u0026kcore_callback_nb);\n\n\treturn 0;\n}\n\n↓\n\nstatic int kcore_update_ram(void)\n{\n\tLIST_HEAD(list);\n\tLIST_HEAD(garbage);\n\tint nphdr;\n\tsize_t phdrs_len, notes_len, data_offset;\n\tstruct kcore_list *tmp, *pos;\n\tint ret = 0;\n\n\tdown_write(\u0026kclist_lock);\n\tif (!xchg(\u0026kcore_need_update, 0))\n\t\tgoto out;\n\n\t/* (5.1) 遍历系统内存布局表，将符合`IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY`内存加入list链表 */\n\tret = kcore_ram_list(\u0026list);\n\tif (ret) {\n\t\t/* Couldn't get the RAM list, try again next time. */\n\t\tWRITE_ONCE(kcore_need_update, 1);\n\t\tlist_splice_tail(\u0026list, \u0026garbage);\n\t\tgoto out;\n\t}\n\n\t/* (5.2) 删除掉原有 kclist_head 链表中的 KCORE_RAM/KCORE_VMEMMAP 区域，因为全局链表中已经覆盖了  */\n\tlist_for_each_entry_safe(pos, tmp, \u0026kclist_head, list) {\n\t\tif (pos-\u003etype == KCORE_RAM || pos-\u003etype == KCORE_VMEMMAP)\n\t\t\tlist_move(\u0026pos-\u003elist, \u0026garbage);\n\t}\n\t/* (5.3) 将原有 kclist_head 链表 和全局链表 list 拼接到一起 */\n\tlist_splice_tail(\u0026list, \u0026kclist_head);\n\n\t/* (5.4) 更新 kclist_head 链表的成员个数，一个成员代表一个 PT_LOAD segment。\n\t\t\t计算 PT_NOTE segment 的长度\n\t\t\t计算 `/proc/kcore` 文件的长度，这个长度是个虚值，最大是虚拟地址的最大范围\n\t */\n\tproc_root_kcore-\u003esize = get_kcore_size(\u0026nphdr, \u0026phdrs_len, \u0026notes_len,\n\t\t\t\t\t       \u0026data_offset);\n\nout:\n\tup_write(\u0026kclist_lock);\n\t/* (5.5) 释放掉上面删除的链表成员占用的空间 */\n\tlist_for_each_entry_safe(pos, tmp, \u0026garbage, list) {\n\t\tlist_del(\u0026pos-\u003elist);\n\t\tkfree(pos);\n\t}\n\treturn ret;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-qoz5k48",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-qoz5k48",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中的一个关键从遍历系统内存布局表，关键代码如下："
				}
			]
		},
		{
			"ID": "20230531163239-fue6iy2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-fue6iy2",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kcore_ram_list() → walk_system_ram_range():\n\nint walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,\n\t\t\t  void *arg, int (*func)(unsigned long, unsigned long, void *))\n{\n\tresource_size_t start, end;\n\tunsigned long flags;\n\tstruct resource res;\n\tunsigned long pfn, end_pfn;\n\tint ret = -EINVAL;\n\n\tstart = (u64) start_pfn \u003c\u003c PAGE_SHIFT;\n\tend = ((u64)(start_pfn + nr_pages) \u003c\u003c PAGE_SHIFT) - 1;\n\t/* (5.1.1) 从 iomem_resource 链表中查找符合 IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY 的资源段 */\n\tflags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;\n\twhile (start \u003c end \u0026\u0026\n\t       !find_next_iomem_res(start, end, flags, IORES_DESC_NONE,\n\t\t\t\t    false, \u0026res)) {\n\t\tpfn = PFN_UP(res.start);\n\t\tend_pfn = PFN_DOWN(res.end + 1);\n\t\tif (end_pfn \u003e pfn)\n\t\t\tret = (*func)(pfn, end_pfn - pfn, arg);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tstart = res.end + 1;\n\t}\n\treturn ret;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-swqzyyf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-swqzyyf",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实就相当于以下命令："
				}
			]
		},
		{
			"ID": "20230531163239-aik1xuj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-aik1xuj",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ sudo cat /proc/iomem | grep \"System RAM\"\n00001000-0009e7ff : System RAM\n00100000-7fedffff : System RAM\n7ff00000-7fffffff : System RAM\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-npf4vql",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-npf4vql",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2 读取 elf core"
				}
			]
		},
		{
			"ID": "20230531163239-8a3c8rg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-8a3c8rg",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "准备好数据以后，还是在读 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/kcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件时，以 elf core 的格式呈现。"
				}
			]
		},
		{
			"ID": "20230531163239-kv528vw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-kv528vw",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static const struct proc_ops kcore_proc_ops = {\n\t.proc_read\t= read_kcore,\n\t.proc_open\t= open_kcore,\n\t.proc_release\t= release_kcore,\n\t.proc_lseek\t= default_llseek,\n};\n\n↓\n\nstatic ssize_t\nread_kcore(struct file *file, char __user *buffer, size_t buflen, loff_t *fpos)\n{\n\tchar *buf = file-\u003eprivate_data;\n\tsize_t phdrs_offset, notes_offset, data_offset;\n\tsize_t phdrs_len, notes_len;\n\tstruct kcore_list *m;\n\tsize_t tsz;\n\tint nphdr;\n\tunsigned long start;\n\tsize_t orig_buflen = buflen;\n\tint ret = 0;\n\n\tdown_read(\u0026kclist_lock);\n\n\t/* (1) 获取到PT_LOAD segment个数、PT_NOTE segment 的长度等信息，开始动态构造 elf core 文件了 */\n\tget_kcore_size(\u0026nphdr, \u0026phdrs_len, \u0026notes_len, \u0026data_offset);\n\tphdrs_offset = sizeof(struct elfhdr);\n\tnotes_offset = phdrs_offset + phdrs_len;\n\n\t/* ELF file header. */\n\t/* (2) 构造 ELF 文件头，并拷贝给给用户态读内存 */\n\tif (buflen \u0026\u0026 *fpos \u003c sizeof(struct elfhdr)) {\n\t\tstruct elfhdr ehdr = {\n\t\t\t.e_ident = {\n\t\t\t\t[EI_MAG0] = ELFMAG0,\n\t\t\t\t[EI_MAG1] = ELFMAG1,\n\t\t\t\t[EI_MAG2] = ELFMAG2,\n\t\t\t\t[EI_MAG3] = ELFMAG3,\n\t\t\t\t[EI_CLASS] = ELF_CLASS,\n\t\t\t\t[EI_DATA] = ELF_DATA,\n\t\t\t\t[EI_VERSION] = EV_CURRENT,\n\t\t\t\t[EI_OSABI] = ELF_OSABI,\n\t\t\t},\n\t\t\t.e_type = ET_CORE,\n\t\t\t.e_machine = ELF_ARCH,\n\t\t\t.e_version = EV_CURRENT,\n\t\t\t.e_phoff = sizeof(struct elfhdr),\n\t\t\t.e_flags = ELF_CORE_EFLAGS,\n\t\t\t.e_ehsize = sizeof(struct elfhdr),\n\t\t\t.e_phentsize = sizeof(struct elf_phdr),\n\t\t\t.e_phnum = nphdr,\n\t\t};\n\n\t\ttsz = min_t(size_t, buflen, sizeof(struct elfhdr) - *fpos);\n\t\tif (copy_to_user(buffer, (char *)\u0026ehdr + *fpos, tsz)) {\n\t\t\tret = -EFAULT;\n\t\t\tgoto out;\n\t\t}\n\n\t\tbuffer += tsz;\n\t\tbuflen -= tsz;\n\t\t*fpos += tsz;\n\t}\n\n\t/* ELF program headers. */\n\t/* (3) 构造 ELF program 头，并拷贝给给用户态读内存 */\n\tif (buflen \u0026\u0026 *fpos \u003c phdrs_offset + phdrs_len) {\n\t\tstruct elf_phdr *phdrs, *phdr;\n\n\t\tphdrs = kzalloc(phdrs_len, GFP_KERNEL);\n\t\tif (!phdrs) {\n\t\t\tret = -ENOMEM;\n\t\t\tgoto out;\n\t\t}\n\n\t\t/* (3.1) PT_NOTE segment 不需要物理地址和虚拟地址 */\n\t\tphdrs[0].p_type = PT_NOTE;\n\t\tphdrs[0].p_offset = notes_offset;\n\t\tphdrs[0].p_filesz = notes_len;\n\n\t\tphdr = \u0026phdrs[1];\n\t\t/* (3.2) 逐个计算 PT_LOAD segment 的物理地址、虚拟地址和长度 */\n\t\tlist_for_each_entry(m, \u0026kclist_head, list) {\n\t\t\tphdr-\u003ep_type = PT_LOAD;\n\t\t\tphdr-\u003ep_flags = PF_R | PF_W | PF_X;\n\t\t\tphdr-\u003ep_offset = kc_vaddr_to_offset(m-\u003eaddr) + data_offset;\n\t\t\tif (m-\u003etype == KCORE_REMAP)\n\t\t\t\tphdr-\u003ep_vaddr = (size_t)m-\u003evaddr;\n\t\t\telse\n\t\t\t\tphdr-\u003ep_vaddr = (size_t)m-\u003eaddr;\n\t\t\tif (m-\u003etype == KCORE_RAM || m-\u003etype == KCORE_REMAP)\n\t\t\t\tphdr-\u003ep_paddr = __pa(m-\u003eaddr);\n\t\t\telse if (m-\u003etype == KCORE_TEXT)\n\t\t\t\tphdr-\u003ep_paddr = __pa_symbol(m-\u003eaddr);\n\t\t\telse\n\t\t\t\tphdr-\u003ep_paddr = (elf_addr_t)-1;\n\t\t\tphdr-\u003ep_filesz = phdr-\u003ep_memsz = m-\u003esize;\n\t\t\tphdr-\u003ep_align = PAGE_SIZE;\n\t\t\tphdr++;\n\t\t}\n\n\t\ttsz = min_t(size_t, buflen, phdrs_offset + phdrs_len - *fpos);\n\t\tif (copy_to_user(buffer, (char *)phdrs + *fpos - phdrs_offset,\n\t\t\t\t tsz)) {\n\t\t\tkfree(phdrs);\n\t\t\tret = -EFAULT;\n\t\t\tgoto out;\n\t\t}\n\t\tkfree(phdrs);\n\n\t\tbuffer += tsz;\n\t\tbuflen -= tsz;\n\t\t*fpos += tsz;\n\t}\n\n\t/* ELF note segment. */\n\t/* (4) 构造 PT_NOTE segment，并拷贝给给用户态读内存 */\n\tif (buflen \u0026\u0026 *fpos \u003c notes_offset + notes_len) {\n\t\tstruct elf_prstatus prstatus = {};\n\t\tstruct elf_prpsinfo prpsinfo = {\n\t\t\t.pr_sname = 'R',\n\t\t\t.pr_fname = \"vmlinux\",\n\t\t};\n\t\tchar *notes;\n\t\tsize_t i = 0;\n\n\t\tstrlcpy(prpsinfo.pr_psargs, saved_command_line,\n\t\t\tsizeof(prpsinfo.pr_psargs));\n\n\t\tnotes = kzalloc(notes_len, GFP_KERNEL);\n\t\tif (!notes) {\n\t\t\tret = -ENOMEM;\n\t\t\tgoto out;\n\t\t}\n\n\t\t/* (4.1) 添加 NT_PRSTATUS */\n\t\tappend_kcore_note(notes, \u0026i, CORE_STR, NT_PRSTATUS, \u0026prstatus,\n\t\t\t\t  sizeof(prstatus));\n\t\t/* (4.2) 添加 NT_PRPSINFO */\n\t\tappend_kcore_note(notes, \u0026i, CORE_STR, NT_PRPSINFO, \u0026prpsinfo,\n\t\t\t\t  sizeof(prpsinfo));\n\t\t/* (4.3) 添加 NT_TASKSTRUCT */\n\t\tappend_kcore_note(notes, \u0026i, CORE_STR, NT_TASKSTRUCT, current,\n\t\t\t\t  arch_task_struct_size);\n\t\t/*\n\t\t * vmcoreinfo_size is mostly constant after init time, but it\n\t\t * can be changed by crash_save_vmcoreinfo(). Racing here with a\n\t\t * panic on another CPU before the machine goes down is insanely\n\t\t * unlikely, but it's better to not leave potential buffer\n\t\t * overflows lying around, regardless.\n\t\t * Vmcoreinfo_size在初始化后基本保持不变，但可以通过crash_save_vmcoreinfo()修改。在机器宕机之前，在另一个CPU上出现恐慌是不太可能的，但无论如何，最好不要让潜在的缓冲区溢出到处存在。\n\t\t */\n\t\t/* (4.4) 添加 VMCOREINFO */\n\t\tappend_kcore_note(notes, \u0026i, VMCOREINFO_NOTE_NAME, 0,\n\t\t\t\t  vmcoreinfo_data,\n\t\t\t\t  min(vmcoreinfo_size, notes_len - i));\n\n\t\ttsz = min_t(size_t, buflen, notes_offset + notes_len - *fpos);\n\t\tif (copy_to_user(buffer, notes + *fpos - notes_offset, tsz)) {\n\t\t\tkfree(notes);\n\t\t\tret = -EFAULT;\n\t\t\tgoto out;\n\t\t}\n\t\tkfree(notes);\n\n\t\tbuffer += tsz;\n\t\tbuflen -= tsz;\n\t\t*fpos += tsz;\n\t}\n\n\t/*\n\t * Check to see if our file offset matches with any of\n\t * the addresses in the elf_phdr on our list.\n\t */\n\tstart = kc_offset_to_vaddr(*fpos - data_offset);\n\tif ((tsz = (PAGE_SIZE - (start \u0026 ~PAGE_MASK))) \u003e buflen)\n\t\ttsz = buflen;\n\n\tm = NULL;\n\t/* (5) 构造 PT_LOAD segment，并拷贝给给用户态读内存 */\n\twhile (buflen) {\n\t\t/*\n\t\t * If this is the first iteration or the address is not within\n\t\t * the previous entry, search for a matching entry.\n\t\t */\n\t\tif (!m || start \u003c m-\u003eaddr || start \u003e= m-\u003eaddr + m-\u003esize) {\n\t\t\tlist_for_each_entry(m, \u0026kclist_head, list) {\n\t\t\t\tif (start \u003e= m-\u003eaddr \u0026\u0026\n\t\t\t\t    start \u003c m-\u003eaddr + m-\u003esize)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (\u0026m-\u003elist == \u0026kclist_head) {\n\t\t\tif (clear_user(buffer, tsz)) {\n\t\t\t\tret = -EFAULT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tm = NULL;\t/* skip the list anchor */\n\t\t} else if (!pfn_is_ram(__pa(start) \u003e\u003e PAGE_SHIFT)) {\n\t\t\tif (clear_user(buffer, tsz)) {\n\t\t\t\tret = -EFAULT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t} else if (m-\u003etype == KCORE_VMALLOC) {\n\t\t\tvread(buf, (char *)start, tsz);\n\t\t\t/* we have to zero-fill user buffer even if no read */\n\t\t\tif (copy_to_user(buffer, buf, tsz)) {\n\t\t\t\tret = -EFAULT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t} else if (m-\u003etype == KCORE_USER) {\n\t\t\t/* User page is handled prior to normal kernel page: */\n\t\t\tif (copy_to_user(buffer, (char *)start, tsz)) {\n\t\t\t\tret = -EFAULT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t} else {\n\t\t\tif (kern_addr_valid(start)) {\n\t\t\t\t/*\n\t\t\t\t * Using bounce buffer to bypass the\n\t\t\t\t * hardened user copy kernel text checks.\n\t\t\t\t */\n\t\t\t\tif (copy_from_kernel_nofault(buf, (void *)start,\n\t\t\t\t\t\ttsz)) {\n\t\t\t\t\tif (clear_user(buffer, tsz)) {\n\t\t\t\t\t\tret = -EFAULT;\n\t\t\t\t\t\tgoto out;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (copy_to_user(buffer, buf, tsz)) {\n\t\t\t\t\t\tret = -EFAULT;\n\t\t\t\t\t\tgoto out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (clear_user(buffer, tsz)) {\n\t\t\t\t\tret = -EFAULT;\n\t\t\t\t\tgoto out;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbuflen -= tsz;\n\t\t*fpos += tsz;\n\t\tbuffer += tsz;\n\t\tstart += tsz;\n\t\ttsz = (buflen \u003e PAGE_SIZE ? PAGE_SIZE : buflen);\n\t}\n\nout:\n\tup_read(\u0026kclist_lock);\n\tif (ret)\n\t\treturn ret;\n\treturn orig_buflen - buflen;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-nx2yhtf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-nx2yhtf",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230531163239-benol5i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-benol5i",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​是在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crash kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中把 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "normal kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的内存模拟成一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "elf core"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件。"
				}
			]
		},
		{
			"ID": "20230531163239-p5g5wmy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-p5g5wmy",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它的文件格式构造是和上一节的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/kcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是类似的，不同的是它的数据准备工作是分成两部分完成的："
				}
			]
		},
		{
			"ID": "20230531163239-3kvy2nz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-3kvy2nz",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-y37unde",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-y37unde",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-pknsdg3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-pknsdg3",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "normal kernel"
								},
								{
									"Type": "NodeText",
									"Data": "​ 负责事先把 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "elf header"
								},
								{
									"Type": "NodeText",
									"Data": "​ 准备好。"
								}
							]
						}
					]
				},
				{
					"ID": "20230531163239-g213vim",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-g213vim",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-zscy0ve",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-zscy0ve",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "crash kernel"
								},
								{
									"Type": "NodeText",
									"Data": "​ 负责把传递过来的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "elf header"
								},
								{
									"Type": "NodeText",
									"Data": "​ 封装成 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "/proc/vmcore"
								},
								{
									"Type": "NodeText",
									"Data": "​ 文件，并且保存到磁盘。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-wl1m3ez",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-wl1m3ez",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面我们就来详细分析具体的过程。"
				}
			]
		},
		{
			"ID": "20230531163239-0rqedxt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-0rqedxt",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.1 准备 elf "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=header\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "header"
				},
				{
					"Type": "NodeText",
					"Data": " (运行在 normal kernel)"
				}
			]
		},
		{
			"ID": "20230531163239-3ph6xe2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-3ph6xe2",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在系统发生故障时状态是很不稳定的，时间也是很紧急的，所以我们在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "normal kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中就尽可能早的把 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vomcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件的 elf header 数据准备好。虽然 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "normal kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 不会呈现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​，只会在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crash kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中呈现。"
				}
			]
		},
		{
			"ID": "20230531163239-nsea4dy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-nsea4dy",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 kexec_tools 使用 kexec_file_load() 系统调用加载 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crash kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时，就顺带把 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的 elf header 需要的大部分数据准备好了："
				}
			]
		},
		{
			"ID": "20230531163239-s8zfdi9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-s8zfdi9",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kexec_file_load() → kimage_file_alloc_init() → kimage_file_prepare_segments() → arch_kexec_kernel_image_load() → image-\u003efops-\u003eload() → kexec_bzImage64_ops.load() → bzImage64_load() → crash_load_segments() → prepare_elf_headers() → crash_prepare_elf64_headers()：\n\nstatic int prepare_elf_headers(struct kimage *image, void **addr,\n\t\t\t\t\tunsigned long *sz)\n{\n\tstruct crash_mem *cmem;\n\tint ret;\n\n\t/* (1) 遍历系统内存布局表统计有效内存区域的个数，根据个数分配 cmem 空间 */\n\tcmem = fill_up_crash_elf_data();\n\tif (!cmem)\n\t\treturn -ENOMEM;\n\n\t/* (2) 再次遍历系统内存布局表统计有效内存区域，记录到 cmem 空间 */\n\tret = walk_system_ram_res(0, -1, cmem, prepare_elf64_ram_headers_callback);\n\tif (ret)\n\t\tgoto out;\n\n\t/* Exclude unwanted mem ranges */\n\t/* (3) 排除掉一些不会使用的内存区域 */\n\tret = elf_header_exclude_ranges(cmem);\n\tif (ret)\n\t\tgoto out;\n\n\t/* By default prepare 64bit headers */\n\t/* (4) 开始构造 elf header */\n\tret =  crash_prepare_elf64_headers(cmem, IS_ENABLED(CONFIG_X86_64), addr, sz);\n\nout:\n\tvfree(cmem);\n\treturn ret;\n}\n\n↓\n\nint crash_prepare_elf64_headers(struct crash_mem *mem, int kernel_map,\n\t\t\t  void **addr, unsigned long *sz)\n{\n\tElf64_Ehdr *ehdr;\n\tElf64_Phdr *phdr;\n\tunsigned long nr_cpus = num_possible_cpus(), nr_phdr, elf_sz;\n\tunsigned char *buf;\n\tunsigned int cpu, i;\n\tunsigned long long notes_addr;\n\tunsigned long mstart, mend;\n\n\t/* extra phdr for vmcoreinfo elf note */\n\tnr_phdr = nr_cpus + 1;\n\tnr_phdr += mem-\u003enr_ranges;\n\n\t/*\n\t * kexec-tools creates an extra PT_LOAD phdr for kernel text mapping\n\t * area (for example, ffffffff80000000 - ffffffffa0000000 on x86_64).\n\t * I think this is required by tools like gdb. So same physical\n\t * memory will be mapped in two elf headers. One will contain kernel\n\t * text virtual addresses and other will have __va(physical) addresses.\n\t */\n\n\tnr_phdr++;\n\telf_sz = sizeof(Elf64_Ehdr) + nr_phdr * sizeof(Elf64_Phdr);\n\telf_sz = ALIGN(elf_sz, ELF_CORE_HEADER_ALIGN);\n\n\tbuf = vzalloc(elf_sz);\n\tif (!buf)\n\t\treturn -ENOMEM;\n\n\t/* (4.1) 构造 ELF 文件头 */\n\tehdr = (Elf64_Ehdr *)buf;\n\tphdr = (Elf64_Phdr *)(ehdr + 1);\n\tmemcpy(ehdr-\u003ee_ident, ELFMAG, SELFMAG);\n\tehdr-\u003ee_ident[EI_CLASS] = ELFCLASS64;\n\tehdr-\u003ee_ident[EI_DATA] = ELFDATA2LSB;\n\tehdr-\u003ee_ident[EI_VERSION] = EV_CURRENT;\n\tehdr-\u003ee_ident[EI_OSABI] = ELF_OSABI;\n\tmemset(ehdr-\u003ee_ident + EI_PAD, 0, EI_NIDENT - EI_PAD);\n\tehdr-\u003ee_type = ET_CORE;\n\tehdr-\u003ee_machine = ELF_ARCH;\n\tehdr-\u003ee_version = EV_CURRENT;\n\tehdr-\u003ee_phoff = sizeof(Elf64_Ehdr);\n\tehdr-\u003ee_ehsize = sizeof(Elf64_Ehdr);\n\tehdr-\u003ee_phentsize = sizeof(Elf64_Phdr);\n\n\t/* Prepare one phdr of type PT_NOTE for each present cpu */\n\t/* (4.2) 构造 ELF program 头，\n\t\t\t每个 cpu 独立构造一个 PT_LOAD segment\n\t\t\tsegment 的数据存放在 per_cpu_ptr(crash_notes, cpu) 变量当中\n\t\t\t注意 crash_notes 中目前还没有数据，当前只是记录了物理地址。只有在 crash 发生以后，才会实际往里面存储数据\n\t */\n\tfor_each_present_cpu(cpu) {\n\t\tphdr-\u003ep_type = PT_NOTE;\n\t\tnotes_addr = per_cpu_ptr_to_phys(per_cpu_ptr(crash_notes, cpu));\n\t\tphdr-\u003ep_offset = phdr-\u003ep_paddr = notes_addr;\n\t\tphdr-\u003ep_filesz = phdr-\u003ep_memsz = sizeof(note_buf_t);\n\t\t(ehdr-\u003ee_phnum)++;\n\t\tphdr++;\n\t}\n\n\t/* Prepare one PT_NOTE header for vmcoreinfo */\n\t/* (4.3) 构造 ELF program 头，VMCOREINFO 独立构造一个 PT_LOAD segment\n\t\t\t注意当前只是记录了 vmcoreinfo_note 的物理地址，实际数据也是分几部分更新的\n\t */\n\tphdr-\u003ep_type = PT_NOTE;\n\tphdr-\u003ep_offset = phdr-\u003ep_paddr = paddr_vmcoreinfo_note();\n\tphdr-\u003ep_filesz = phdr-\u003ep_memsz = VMCOREINFO_NOTE_SIZE;\n\t(ehdr-\u003ee_phnum)++;\n\tphdr++;\n\n\t/* Prepare PT_LOAD type program header for kernel text region */\n\t/* (4.4) 构造 ELF program 头，内核代码段对应的 PT_LOAD segment */\n\tif (kernel_map) {\n\t\tphdr-\u003ep_type = PT_LOAD;\n\t\tphdr-\u003ep_flags = PF_R|PF_W|PF_X;\n\t\tphdr-\u003ep_vaddr = (unsigned long) _text;\n\t\tphdr-\u003ep_filesz = phdr-\u003ep_memsz = _end - _text;\n\t\tphdr-\u003ep_offset = phdr-\u003ep_paddr = __pa_symbol(_text);\n\t\tehdr-\u003ee_phnum++;\n\t\tphdr++;\n\t}\n\n\t/* Go through all the ranges in mem-\u003eranges[] and prepare phdr */\n\t/* (4.5) 遍历 cmem，把系统中的有效内存创建成 PT_LOAD segment */\n\tfor (i = 0; i \u003c mem-\u003enr_ranges; i++) {\n\t\tmstart = mem-\u003eranges[i].start;\n\t\tmend = mem-\u003eranges[i].end;\n\n\t\tphdr-\u003ep_type = PT_LOAD;\n\t\tphdr-\u003ep_flags = PF_R|PF_W|PF_X;\n\t\tphdr-\u003ep_offset  = mstart;\n\n\t\tphdr-\u003ep_paddr = mstart;\n\t\tphdr-\u003ep_vaddr = (unsigned long) __va(mstart);\n\t\tphdr-\u003ep_filesz = phdr-\u003ep_memsz = mend - mstart + 1;\n\t\tphdr-\u003ep_align = 0;\n\t\tehdr-\u003ee_phnum++;\n\t\tphdr++;\n\t\tpr_debug(\"Crash PT_LOAD elf header. phdr=%p vaddr=0x%llx, paddr=0x%llx, sz=0x%llx e_phnum=%d p_offset=0x%llx\\n\",\n\t\t\tphdr, phdr-\u003ep_vaddr, phdr-\u003ep_paddr, phdr-\u003ep_filesz,\n\t\t\tehdr-\u003ee_phnum, phdr-\u003ep_offset);\n\t}\n\n\t*addr = buf;\n\t*sz = elf_sz;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-b4ijhrw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230531163239-b4ijhrw",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.1.1 crash_notes 数据的更新"
				}
			]
		},
		{
			"ID": "20230531163239-krkqnxa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-krkqnxa",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只有在发生 panic 以后，才会往 crash_notes 中保存实际的 cpu 寄存器数据。其更新过程如下："
				}
			]
		},
		{
			"ID": "20230531163239-b4ac988",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-b4ac988",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "__crash_kexec() → machine_crash_shutdown() → crash_save_cpu()：\nipi_cpu_crash_stop() → crash_save_cpu()：\n\nvoid crash_save_cpu(struct pt_regs *regs, int cpu)\n{\n\tstruct elf_prstatus prstatus;\n\tu32 *buf;\n\n\tif ((cpu \u003c 0) || (cpu \u003e= nr_cpu_ids))\n\t\treturn;\n\n\t/* Using ELF notes here is opportunistic.\n\t * I need a well defined structure format\n\t * for the data I pass, and I need tags\n\t * on the data to indicate what information I have\n\t * squirrelled away.  ELF notes happen to provide\n\t * all of that, so there is no need to invent something new.\n\t */\n\tbuf = (u32 *)per_cpu_ptr(crash_notes, cpu);\n\tif (!buf)\n\t\treturn;\n\t/* (1) 清零 */\n\tmemset(\u0026prstatus, 0, sizeof(prstatus));\n\t/* (2) 保存 pid */\n\tprstatus.pr_pid = current-\u003epid;\n\t/* (3) 保存 寄存器 */\n\telf_core_copy_kernel_regs(\u0026prstatus.pr_reg, regs);\n\t/* (4) 以 elf_note 格式存储到 crash_notes 中 */\n\tbuf = append_elf_note(buf, KEXEC_CORE_NOTE_NAME, NT_PRSTATUS,\n\t\t\t      \u0026prstatus, sizeof(prstatus));\n\t/* (5) 追加一个全零的 elf_note 当作结尾 */\n\tfinal_note(buf);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-besovyi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230531163239-besovyi",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.1.2 vmcoreinfo_note 数据的更新"
				}
			]
		},
		{
			"ID": "20230531163239-skwtxx4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-skwtxx4",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vmcoreinfo_note 分成两部分来更新："
				}
			]
		},
		{
			"ID": "20230531163239-s7w6uwr",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-s7w6uwr",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-yrn4s1m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-yrn4s1m",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-fc390w4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-fc390w4",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1、第一部分在系统初始化的时候准备好了大部分的数据："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-j196tnb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-j196tnb",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static int __init crash_save_vmcoreinfo_init(void)\n{\n\t/* (1.1) 分配 vmcoreinfo_data 空间 */\n\tvmcoreinfo_data = (unsigned char *)get_zeroed_page(GFP_KERNEL);\n\tif (!vmcoreinfo_data) {\n\t\tpr_warn(\"Memory allocation for vmcoreinfo_data failed\\n\");\n\t\treturn -ENOMEM;\n\t}\n\n\t/* (1.2) 分配 vmcoreinfo_note 空间 */\n\tvmcoreinfo_note = alloc_pages_exact(VMCOREINFO_NOTE_SIZE,\n\t\t\t\t\t\tGFP_KERNEL | __GFP_ZERO);\n\tif (!vmcoreinfo_note) {\n\t\tfree_page((unsigned long)vmcoreinfo_data);\n\t\tvmcoreinfo_data = NULL;\n\t\tpr_warn(\"Memory allocation for vmcoreinfo_note failed\\n\");\n\t\treturn -ENOMEM;\n\t}\n\n\t/* (2.1) 把系统的各种关键信息使用 VMCOREINFO_xxx 一系列宏，以字符串的形式保持到 vmcoreinfo_data  */\n\tVMCOREINFO_OSRELEASE(init_uts_ns.name.release);\n\tVMCOREINFO_PAGESIZE(PAGE_SIZE);\n\n\tVMCOREINFO_SYMBOL(init_uts_ns);\n\tVMCOREINFO_SYMBOL(node_online_map);\n#ifdef CONFIG_MMU\n\tVMCOREINFO_SYMBOL_ARRAY(swapper_pg_dir);\n#endif\n\tVMCOREINFO_SYMBOL(_stext);\n\tVMCOREINFO_SYMBOL(vmap_area_list);\n\n#ifndef CONFIG_NEED_MULTIPLE_NODES\n\tVMCOREINFO_SYMBOL(mem_map);\n\tVMCOREINFO_SYMBOL(contig_page_data);\n#endif\n#ifdef CONFIG_SPARSEMEM\n\tVMCOREINFO_SYMBOL_ARRAY(mem_section);\n\tVMCOREINFO_LENGTH(mem_section, NR_SECTION_ROOTS);\n\tVMCOREINFO_STRUCT_SIZE(mem_section);\n\tVMCOREINFO_OFFSET(mem_section, section_mem_map);\n#endif\n\tVMCOREINFO_STRUCT_SIZE(page);\n\tVMCOREINFO_STRUCT_SIZE(pglist_data);\n\tVMCOREINFO_STRUCT_SIZE(zone);\n\tVMCOREINFO_STRUCT_SIZE(free_area);\n\tVMCOREINFO_STRUCT_SIZE(list_head);\n\tVMCOREINFO_SIZE(nodemask_t);\n\tVMCOREINFO_OFFSET(page, flags);\n\tVMCOREINFO_OFFSET(page, _refcount);\n\tVMCOREINFO_OFFSET(page, mapping);\n\tVMCOREINFO_OFFSET(page, lru);\n\tVMCOREINFO_OFFSET(page, _mapcount);\n\tVMCOREINFO_OFFSET(page, private);\n\tVMCOREINFO_OFFSET(page, compound_dtor);\n\tVMCOREINFO_OFFSET(page, compound_order);\n\tVMCOREINFO_OFFSET(page, compound_head);\n\tVMCOREINFO_OFFSET(pglist_data, node_zones);\n\tVMCOREINFO_OFFSET(pglist_data, nr_zones);\n#ifdef CONFIG_FLAT_NODE_MEM_MAP\n\tVMCOREINFO_OFFSET(pglist_data, node_mem_map);\n#endif\n\tVMCOREINFO_OFFSET(pglist_data, node_start_pfn);\n\tVMCOREINFO_OFFSET(pglist_data, node_spanned_pages);\n\tVMCOREINFO_OFFSET(pglist_data, node_id);\n\tVMCOREINFO_OFFSET(zone, free_area);\n\tVMCOREINFO_OFFSET(zone, vm_stat);\n\tVMCOREINFO_OFFSET(zone, spanned_pages);\n\tVMCOREINFO_OFFSET(free_area, free_list);\n\tVMCOREINFO_OFFSET(list_head, next);\n\tVMCOREINFO_OFFSET(list_head, prev);\n\tVMCOREINFO_OFFSET(vmap_area, va_start);\n\tVMCOREINFO_OFFSET(vmap_area, list);\n\tVMCOREINFO_LENGTH(zone.free_area, MAX_ORDER);\n\tlog_buf_vmcoreinfo_setup();\n\tVMCOREINFO_LENGTH(free_area.free_list, MIGRATE_TYPES);\n\tVMCOREINFO_NUMBER(NR_FREE_PAGES);\n\tVMCOREINFO_NUMBER(PG_lru);\n\tVMCOREINFO_NUMBER(PG_private);\n\tVMCOREINFO_NUMBER(PG_swapcache);\n\tVMCOREINFO_NUMBER(PG_swapbacked);\n\tVMCOREINFO_NUMBER(PG_slab);\n#ifdef CONFIG_MEMORY_FAILURE\n\tVMCOREINFO_NUMBER(PG_hwpoison);\n#endif\n\tVMCOREINFO_NUMBER(PG_head_mask);\n#define PAGE_BUDDY_MAPCOUNT_VALUE\t(~PG_buddy)\n\tVMCOREINFO_NUMBER(PAGE_BUDDY_MAPCOUNT_VALUE);\n#ifdef CONFIG_HUGETLB_PAGE\n\tVMCOREINFO_NUMBER(HUGETLB_PAGE_DTOR);\n#define PAGE_OFFLINE_MAPCOUNT_VALUE\t(~PG_offline)\n\tVMCOREINFO_NUMBER(PAGE_OFFLINE_MAPCOUNT_VALUE);\n#endif\n\n\t/* (2.2) 补充一些架构相关的 vmcoreinfo */\n\tarch_crash_save_vmcoreinfo();\n\n\t/* (3) 把 vmcoreinfo_data 中保存的数据以 elf_note 的形式保存到 vmcoreinfo_note 中 */\n\tupdate_vmcoreinfo_note();\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-yzcoirf",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230531163239-yzcoirf",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"ID": "20230531163239-z8r4b7k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230531163239-z8r4b7k",
						"updated": "20230531163239"
					},
					"Children": [
						{
							"ID": "20230531163239-n421653",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230531163239-n421653",
								"updated": "20230531163239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2、第二部分在 panic 发生后追加了 数据："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230531163239-amzrcv2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-amzrcv2",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "__crash_kexec() → crash_save_vmcoreinfo()：\n\nvoid crash_save_vmcoreinfo(void)\n{\n\tif (!vmcoreinfo_note)\n\t\treturn;\n\n\t/* Use the safe copy to generate vmcoreinfo note if have */\n\tif (vmcoreinfo_data_safecopy)\n\t\tvmcoreinfo_data = vmcoreinfo_data_safecopy;\n\n\t/* (1) 补充 \"CRASHTIME=xxx\" 信息 */\n\tvmcoreinfo_append_str(\"CRASHTIME=%lld\\n\", ktime_get_real_seconds());\n\tupdate_vmcoreinfo_note();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-l8baxaf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-l8baxaf",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vmcoreinfo 对应 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "readelf -n xxx"
				},
				{
					"Type": "NodeText",
					"Data": "​ 读出的数据："
				}
			]
		},
		{
			"ID": "20230531163239-3j08rb9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-3j08rb9",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ readelf -n vmcore.202106170650 \n\nDisplaying notes found at file offset 0x00001000 with length 0x00000ac8:\n  Owner                Data size \tDescription\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  CORE                 0x00000150\tNT_PRSTATUS (prstatus structure)\n  VMCOREINFO           0x000007e6\tUnknown note type: (0x00000000)\n   description data: 4f 53 52 45 4c 45 41 53 45 3d 35 2e 38 2e 30\n\n// description data 对应 ascii：\nOSRELEASE=5.8.0-43-generic\nPAGESIZE=4096\nSYMBOL(init_uts_ns)=ffffffffa5014620\nSYMBOL(node_online_map)=ffffffffa5276720\nSYMBOL(swapper_pg_dir)=ffffffffa500a000\nSYMBOL(_stext)=ffffffffa3a00000\nSYMBOL(vmap_area_list)=ffffffffa50f2560\nSYMBOL(mem_section)=ffff91673ffd2000\nLENGTH(mem_section)=2048\nSIZE(mem_section)=16\nOFFSET(mem_section.section_mem_map)=0\nSIZE(page)=64\nSIZE(pglist_data)=171968\nSIZE(zone)=1472\nSIZE(free_area)=88\n...\nCRASHTIME=1623937823\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-33dhkjy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-33dhkjy",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.2 准备 cmdline (运行在 normal kernel)"
				}
			]
		},
		{
			"ID": "20230531163239-di4ji39",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-di4ji39",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "准备好的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "elf header"
				},
				{
					"Type": "NodeText",
					"Data": "​ 数据怎么传递给 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "crash kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 呢？是通过 cmdline 来进行传递的："
				}
			]
		},
		{
			"ID": "20230531163239-c8yllb2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-c8yllb2",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kexec_file_load() → kimage_file_alloc_init() → kimage_file_prepare_segments() → arch_kexec_kernel_image_load() → image-\u003efops-\u003eload() → kexec_bzImage64_ops.load() → bzImage64_load() → setup_cmdline():\n\nstatic int setup_cmdline(struct kimage *image, struct boot_params *params,\n\t\t\t unsigned long bootparams_load_addr,\n\t\t\t unsigned long cmdline_offset, char *cmdline,\n\t\t\t unsigned long cmdline_len)\n{\n\tchar *cmdline_ptr = ((char *)params) + cmdline_offset;\n\tunsigned long cmdline_ptr_phys, len = 0;\n\tuint32_t cmdline_low_32, cmdline_ext_32;\n\n    /* (1) 在 crask kernel 的 cmdline 中追加参数：\"elfcorehdr=0x%lx \" */\n\tif (image-\u003etype == KEXEC_TYPE_CRASH) {\n\t\tlen = sprintf(cmdline_ptr,\n\t\t\t\"elfcorehdr=0x%lx \", image-\u003earch.elf_load_addr);\n\t}\n\tmemcpy(cmdline_ptr + len, cmdline, cmdline_len);\n\tcmdline_len += len;\n\n\tcmdline_ptr[cmdline_len - 1] = '\\0';\n\n\tpr_debug(\"Final command line is: %s\\n\", cmdline_ptr);\n\tcmdline_ptr_phys = bootparams_load_addr + cmdline_offset;\n\tcmdline_low_32 = cmdline_ptr_phys \u0026 0xffffffffUL;\n\tcmdline_ext_32 = cmdline_ptr_phys \u003e\u003e 32;\n\n\tparams-\u003ehdr.cmd_line_ptr = cmdline_low_32;\n\tif (cmdline_ext_32)\n\t\tparams-\u003eext_cmd_line_ptr = cmdline_ext_32;\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-ek0k3rs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-ek0k3rs",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.3 启动 crash kernel (运行在 normal kernel)"
				}
			]
		},
		{
			"ID": "20230531163239-zromhj8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-zromhj8",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "normal kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 发生 panic 以后会 跳转到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "carsh kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​："
				}
			]
		},
		{
			"ID": "20230531163239-5k9gd93",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-5k9gd93",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "die() → crash_kexec() → __crash_kexec() → machine_kexec()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-rf5ktto",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-rf5ktto",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.4 接收 elfheadr (运行在 crash kernel)"
				}
			]
		},
		{
			"ID": "20230531163239-0t76d8r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-0t76d8r",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "carsh kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中首先会接收到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "normal kernel"
				},
				{
					"Type": "NodeText",
					"Data": "​ 在 cmdline 中传递过来的 vmcore 文件的 elf header 信息："
				}
			]
		},
		{
			"ID": "20230531163239-04lbvav",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-04lbvav",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static int __init setup_elfcorehdr(char *arg)\n{\n\tchar *end;\n\tif (!arg)\n\t\treturn -EINVAL;\n\telfcorehdr_addr = memparse(arg, \u0026end);\n\tif (*end == '@') {\n\t\telfcorehdr_size = elfcorehdr_addr;\n\t\telfcorehdr_addr = memparse(end + 1, \u0026end);\n\t}\n\treturn end \u003e arg ? 0 : -EINVAL;\n}\nearly_param(\"elfcorehdr\", setup_elfcorehdr);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-9cofgwp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-9cofgwp",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.5 解析整理 elfheadr (运行在 crash kernel)"
				}
			]
		},
		{
			"ID": "20230531163239-a05dxss",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-a05dxss",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后会读取 vmcore 文件的 elf header 信息，并进行解析和整理："
				}
			]
		},
		{
			"ID": "20230531163239-ofag86f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-ofag86f",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static int __init vmcore_init(void)\n{\n\tint rc = 0;\n\n\t/* Allow architectures to allocate ELF header in 2nd kernel */\n\trc = elfcorehdr_alloc(\u0026elfcorehdr_addr, \u0026elfcorehdr_size);\n\tif (rc)\n\t\treturn rc;\n\t/*\n\t * If elfcorehdr= has been passed in cmdline or created in 2nd kernel,\n\t * then capture the dump.\n\t */\n\tif (!(is_vmcore_usable()))\n\t\treturn rc;\n\t/* (1) 解析 normal kernel 传递过来的 elf header 信息 */\n\trc = parse_crash_elf_headers();\n\tif (rc) {\n\t\tpr_warn(\"Kdump: vmcore not initialized\\n\");\n\t\treturn rc;\n\t}\n\telfcorehdr_free(elfcorehdr_addr);\n\telfcorehdr_addr = ELFCORE_ADDR_ERR;\n\n\t/* (2) 创建 /proc/vmcore 文件接口 */\n\tproc_vmcore = proc_create(\"vmcore\", S_IRUSR, NULL, \u0026vmcore_proc_ops);\n\tif (proc_vmcore)\n\t\tproc_vmcore-\u003esize = vmcore_size;\n\treturn 0;\n}\nfs_initcall(vmcore_init);\n\n↓\nparse_crash_elf_headers()\n↓\n\nstatic int __init parse_crash_elf64_headers(void)\n{\n\tint rc=0;\n\tElf64_Ehdr ehdr;\n\tu64 addr;\n\n\taddr = elfcorehdr_addr;\n\n\t/* Read Elf header */\n\t/* (1.1) 读出传递过来的 elf header 信息\n\t\t\t注意：涉及到读另一个系统的内存，我们需要对物理地址进行ioremap_cache() 建立映射以后才能读取\n\t\t\t后续的很多地方都是以这种方式来读取\n\t */\n\trc = elfcorehdr_read((char *)\u0026ehdr, sizeof(Elf64_Ehdr), \u0026addr);\n\tif (rc \u003c 0)\n\t\treturn rc;\n\n\t/* Do some basic Verification. */\n\t/* (1.2) 对读出的 elf header 信息进行一些合法性判断，防止被破坏 */\n\tif (memcmp(ehdr.e_ident, ELFMAG, SELFMAG) != 0 ||\n\t\t(ehdr.e_type != ET_CORE) ||\n\t\t!vmcore_elf64_check_arch(\u0026ehdr) ||\n\t\tehdr.e_ident[EI_CLASS] != ELFCLASS64 ||\n\t\tehdr.e_ident[EI_VERSION] != EV_CURRENT ||\n\t\tehdr.e_version != EV_CURRENT ||\n\t\tehdr.e_ehsize != sizeof(Elf64_Ehdr) ||\n\t\tehdr.e_phentsize != sizeof(Elf64_Phdr) ||\n\t\tehdr.e_phnum == 0) {\n\t\tpr_warn(\"Warning: Core image elf header is not sane\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\t/* Read in all elf headers. */\n\t/* (1.3) 在crash kernel 上分配两个buffer，准备吧数据读到本地\n\t\t\telfcorebuf 用来存储 elf header + elf program header\n\t\t\telfnotes_buf 用来存储 PT_NOTE segment\n\t */\n\telfcorebuf_sz_orig = sizeof(Elf64_Ehdr) +\n\t\t\t\tehdr.e_phnum * sizeof(Elf64_Phdr);\n\telfcorebuf_sz = elfcorebuf_sz_orig;\n\telfcorebuf = (void *)__get_free_pages(GFP_KERNEL | __GFP_ZERO,\n\t\t\t\t\t      get_order(elfcorebuf_sz_orig));\n\tif (!elfcorebuf)\n\t\treturn -ENOMEM;\n\taddr = elfcorehdr_addr;\n\t/* (1.4) 把整个 elf header + elf program header 读取到 elfcorebuf */\n\trc = elfcorehdr_read(elfcorebuf, elfcorebuf_sz_orig, \u0026addr);\n\tif (rc \u003c 0)\n\t\tgoto fail;\n\n\t/* Merge all PT_NOTE headers into one. */\n\t/* (1.5) 整理数据把多个 PT_NOTE 合并成一个，并且把 PT_NOTE 数据拷贝到 elfnotes_buf */\n\trc = merge_note_headers_elf64(elfcorebuf, \u0026elfcorebuf_sz,\n\t\t\t\t      \u0026elfnotes_buf, \u0026elfnotes_sz);\n\tif (rc)\n\t\tgoto fail;\n\t/* (1.6) 逐个调试 PT_LOAD segment 控制头，让每个 segment 符合 page 对齐 */\n\trc = process_ptload_program_headers_elf64(elfcorebuf, elfcorebuf_sz,\n\t\t\t\t\t\t  elfnotes_sz, \u0026vmcore_list);\n\tif (rc)\n\t\tgoto fail;\n\n\t/* (1.7) 配合上一步的 page 对齐调整，计算 vmcore_list 链表中的 offset 偏移 */\n\tset_vmcore_list_offsets(elfcorebuf_sz, elfnotes_sz, \u0026vmcore_list);\n\treturn 0;\nfail:\n\tfree_elfcorebuf();\n\treturn rc;\n}\n\n↓\n\nstatic int __init merge_note_headers_elf64(char *elfptr, size_t *elfsz,\n\t\t\t\t\t   char **notes_buf, size_t *notes_sz)\n{\n\tint i, nr_ptnote=0, rc=0;\n\tchar *tmp;\n\tElf64_Ehdr *ehdr_ptr;\n\tElf64_Phdr phdr;\n\tu64 phdr_sz = 0, note_off;\n\n\tehdr_ptr = (Elf64_Ehdr *)elfptr;\n\n\t/* (1.5.1) 更新每个独立 PT_NOTE 的长度，去除尾部全零 elf_note  */\n\trc = update_note_header_size_elf64(ehdr_ptr);\n\tif (rc \u003c 0)\n\t\treturn rc;\n\n\t/* (1.5.2) 计算 所有 PT_NOTE 数据加起来的总长度 */\n\trc = get_note_number_and_size_elf64(ehdr_ptr, \u0026nr_ptnote, \u0026phdr_sz);\n\tif (rc \u003c 0)\n\t\treturn rc;\n\n\t*notes_sz = roundup(phdr_sz, PAGE_SIZE);\n\t*notes_buf = vmcore_alloc_buf(*notes_sz);\n\tif (!*notes_buf)\n\t\treturn -ENOMEM;\n\n\t/* (1.5.3) 把所有 PT_NOTE 数据拷贝到一起，拷贝到 notes_buf 中 */\n\trc = copy_notes_elf64(ehdr_ptr, *notes_buf);\n\tif (rc \u003c 0)\n\t\treturn rc;\n\n\t/* Prepare merged PT_NOTE program header. */\n\t/* (1.5.4) 创建一个新的 PT_NOTE 控制结构来寻址 notes_buf */\n\tphdr.p_type    = PT_NOTE;\n\tphdr.p_flags   = 0;\n\tnote_off = sizeof(Elf64_Ehdr) +\n\t\t\t(ehdr_ptr-\u003ee_phnum - nr_ptnote +1) * sizeof(Elf64_Phdr);\n\tphdr.p_offset  = roundup(note_off, PAGE_SIZE);\n\tphdr.p_vaddr   = phdr.p_paddr = 0;\n\tphdr.p_filesz  = phdr.p_memsz = phdr_sz;\n\tphdr.p_align   = 0;\n\n\t/* Add merged PT_NOTE program header*/\n\t/* (1.5.5) 拷贝新的 PT_NOTE 控制结构 */\n\ttmp = elfptr + sizeof(Elf64_Ehdr);\n\tmemcpy(tmp, \u0026phdr, sizeof(phdr));\n\ttmp += sizeof(phdr);\n\n\t/* Remove unwanted PT_NOTE program headers. */\n\t/* (1.5.6) 移除掉已经无用的 PT_NOTE 控制结构 */\n\ti = (nr_ptnote - 1) * sizeof(Elf64_Phdr);\n\t*elfsz = *elfsz - i;\n\tmemmove(tmp, tmp+i, ((*elfsz)-sizeof(Elf64_Ehdr)-sizeof(Elf64_Phdr)));\n\tmemset(elfptr + *elfsz, 0, i);\n\t*elfsz = roundup(*elfsz, PAGE_SIZE);\n\n\t/* Modify e_phnum to reflect merged headers. */\n\tehdr_ptr-\u003ee_phnum = ehdr_ptr-\u003ee_phnum - nr_ptnote + 1;\n\n\t/* Store the size of all notes.  We need this to update the note\n\t * header when the device dumps will be added.\n\t */\n\telfnotes_orig_sz = phdr.p_memsz;\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-xxo1u65",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-xxo1u65",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.6 读取 elf core (运行在 crash kernel)"
				}
			]
		},
		{
			"ID": "20230531163239-rbnx44a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-rbnx44a",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "经过上一节的解析 elf 头数据基本已准备好，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "elfcorebuf"
				},
				{
					"Type": "NodeText",
					"Data": "​ 用来存储 elf header + elf program header，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "elfnotes_buf"
				},
				{
					"Type": "NodeText",
					"Data": "​ 用来存储 PT_NOTE segment。"
				}
			]
		},
		{
			"ID": "20230531163239-muhdc1b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-muhdc1b",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在可以通过对 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/proc/vmcore"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件的读操作来读取 elf core 数据了："
				}
			]
		},
		{
			"ID": "20230531163239-3bpike8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230531163239-3bpike8",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static const struct proc_ops vmcore_proc_ops = {\n\t.proc_read\t= read_vmcore,\n\t.proc_lseek\t= default_llseek,\n\t.proc_mmap\t= mmap_vmcore,\n};\n\n↓\nread_vmcore()\n↓\n\nstatic ssize_t __read_vmcore(char *buffer, size_t buflen, loff_t *fpos,\n\t\t\t     int userbuf)\n{\n\tssize_t acc = 0, tmp;\n\tsize_t tsz;\n\tu64 start;\n\tstruct vmcore *m = NULL;\n\n\tif (buflen == 0 || *fpos \u003e= vmcore_size)\n\t\treturn 0;\n\n\t/* trim buflen to not go beyond EOF */\n\tif (buflen \u003e vmcore_size - *fpos)\n\t\tbuflen = vmcore_size - *fpos;\n\n\t/* Read ELF core header */\n\t/* (1) 从 elfcorebuf 中读取 elf header + elf program header，并拷贝给给用户态读内存 */\n\tif (*fpos \u003c elfcorebuf_sz) {\n\t\ttsz = min(elfcorebuf_sz - (size_t)*fpos, buflen);\n\t\tif (copy_to(buffer, elfcorebuf + *fpos, tsz, userbuf))\n\t\t\treturn -EFAULT;\n\t\tbuflen -= tsz;\n\t\t*fpos += tsz;\n\t\tbuffer += tsz;\n\t\tacc += tsz;\n\n\t\t/* leave now if filled buffer already */\n\t\tif (buflen == 0)\n\t\t\treturn acc;\n\t}\n\n\t/* Read Elf note segment */\n\t/* (2) 从 elfnotes_buf 中读取 PT_NOTE segment，并拷贝给给用户态读内存 */\n\tif (*fpos \u003c elfcorebuf_sz + elfnotes_sz) {\n\t\tvoid *kaddr;\n\n\t\t/* We add device dumps before other elf notes because the\n\t\t * other elf notes may not fill the elf notes buffer\n\t\t * completely and we will end up with zero-filled data\n\t\t * between the elf notes and the device dumps. Tools will\n\t\t * then try to decode this zero-filled data as valid notes\n\t\t * and we don't want that. Hence, adding device dumps before\n\t\t * the other elf notes ensure that zero-filled data can be\n\t\t * avoided.\n\t\t */\n#ifdef CONFIG_PROC_VMCORE_DEVICE_DUMP\n\t\t/* Read device dumps */\n\t\tif (*fpos \u003c elfcorebuf_sz + vmcoredd_orig_sz) {\n\t\t\ttsz = min(elfcorebuf_sz + vmcoredd_orig_sz -\n\t\t\t\t  (size_t)*fpos, buflen);\n\t\t\tstart = *fpos - elfcorebuf_sz;\n\t\t\tif (vmcoredd_copy_dumps(buffer, start, tsz, userbuf))\n\t\t\t\treturn -EFAULT;\n\n\t\t\tbuflen -= tsz;\n\t\t\t*fpos += tsz;\n\t\t\tbuffer += tsz;\n\t\t\tacc += tsz;\n\n\t\t\t/* leave now if filled buffer already */\n\t\t\tif (!buflen)\n\t\t\t\treturn acc;\n\t\t}\n#endif /* CONFIG_PROC_VMCORE_DEVICE_DUMP */\n\n\t\t/* Read remaining elf notes */\n\t\ttsz = min(elfcorebuf_sz + elfnotes_sz - (size_t)*fpos, buflen);\n\t\tkaddr = elfnotes_buf + *fpos - elfcorebuf_sz - vmcoredd_orig_sz;\n\t\tif (copy_to(buffer, kaddr, tsz, userbuf))\n\t\t\treturn -EFAULT;\n\n\t\tbuflen -= tsz;\n\t\t*fpos += tsz;\n\t\tbuffer += tsz;\n\t\tacc += tsz;\n\n\t\t/* leave now if filled buffer already */\n\t\tif (buflen == 0)\n\t\t\treturn acc;\n\t}\n\n\t/* (3) 从 vmcore_list 链表中读取 PT_LOAD segment，并拷贝给给用户态读内存\n\t\t\t对物理地址进行ioremap_cache() 建立映射以后才能读取\n\t*/\n\tlist_for_each_entry(m, \u0026vmcore_list, list) {\n\t\tif (*fpos \u003c m-\u003eoffset + m-\u003esize) {\n\t\t\ttsz = (size_t)min_t(unsigned long long,\n\t\t\t\t\t    m-\u003eoffset + m-\u003esize - *fpos,\n\t\t\t\t\t    buflen);\n\t\t\tstart = m-\u003epaddr + *fpos - m-\u003eoffset;\n\t\t\ttmp = read_from_oldmem(buffer, tsz, \u0026start,\n\t\t\t\t\t       userbuf, mem_encrypt_active());\n\t\t\tif (tmp \u003c 0)\n\t\t\t\treturn tmp;\n\t\t\tbuflen -= tsz;\n\t\t\t*fpos += tsz;\n\t\t\tbuffer += tsz;\n\t\t\tacc += tsz;\n\n\t\t\t/* leave now if filled buffer already */\n\t\t\tif (buflen == 0)\n\t\t\t\treturn acc;\n\t\t}\n\t}\n\n\treturn acc;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230531163239-lxyveuo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230531163239-lxyveuo",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考资料"
				}
			]
		},
		{
			"ID": "20230531163239-0k9uifd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230531163239-0k9uifd",
				"updated": "20230531163239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://events.static.linuxfound.org/sites/events/files/slides/kdump_usage_and_internals.pdf",
					"TextMarkTextContent": "kdump: usage and internals"
				},
				{
					"Type": "NodeText",
					"Data": "\n2."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/pwl999/article/details/78225485",
					"TextMarkTextContent": "Linux kdump(系统临终快照)"
				},
				{
					"Type": "NodeText",
					"Data": "\n3."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://wiki.ubuntu.com/Kernel/CrashdumpRecipe",
					"TextMarkTextContent": "How to use linux-crashdump to capture a kernel oops/panic"
				},
				{
					"Type": "NodeText",
					"Data": "\n4."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://www.kernel.org/doc/html/v5.8/admin-guide/kdump/kdump.html",
					"TextMarkTextContent": "Documentation for Kdump - The kexec-based Crash Dumping Solution"
				},
				{
					"Type": "NodeText",
					"Data": "\n5."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://lucasvr.gobolinux.org/etc/Debugging%20the%20kernel%20with%20Crash%20tool.pdf#:~:text=About%20Crash%20The%20Crash%20Utility%20is%20a%20tool,files%20%28kdump%29%20Provides%20a%20couple%20of%20useful%20features",
					"TextMarkTextContent": "Debugging the Linux kernel with the Crash Utility"
				},
				{
					"Type": "NodeText",
					"Data": "\n6."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://eastrivervillage.com/kexec-tools-with-the-hidden-purgatory/",
					"TextMarkTextContent": "kexec - A travel to the purgatory"
				},
				{
					"Type": "NodeText",
					"Data": "\n7."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/hzj_001/article/details/99703510",
					"TextMarkTextContent": "vmcore分析和实战"
				},
				{
					"Type": "NodeText",
					"Data": "\n8."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://blog.chinaunix.net/uid-14528823-id-4432077.html",
					"TextMarkTextContent": "Crash工具实战-结构体解析(skb相关解析)"
				},
				{
					"Type": "NodeText",
					"Data": "\n9."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://access.redhat.com/solutions/2786591",
					"TextMarkTextContent": "Crash工具实战-解析链表"
				}
			]
		}
	]
}