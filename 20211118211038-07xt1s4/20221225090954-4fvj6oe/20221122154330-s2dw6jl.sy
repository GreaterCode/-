{
	"ID": "20221122154330-s2dw6jl",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221122154330-s2dw6jl",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20221122154330-rsfjrqo\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20221122154330-rnah9x9\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20221122154330-rsfjrqo\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "Kubernetes 中数据包的生命周期 -- 第 2 部分",
		"updated": "20221122154330"
	},
	"Children": [
		{
			"ID": "20221122154330-rsfjrqo",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20221122154330-rsfjrqo"
			}
		},
		{
			"ID": "20221122154330-39h3vnh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221122154330-39h3vnh"
			},
			"Children": [
				{
					"ID": "20221122154330-81zt82q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-81zt82q"
					},
					"Children": [
						{
							"ID": "20221122154330-kz1rmct",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-kz1rmct"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://mp.weixin.qq.com/s?__biz=MzkxOTIwMDgxMg==\u0026mid=2247485797\u0026idx=1\u0026sn=5108be4e09af4360a63e842da9ba2b81\u0026chksm=c1a4fc26f6d37530e7ecb527d8a88670202ba3e952f5ff686cebe9d8423a451b689a6b1880d7\u0026cur_album_id=2342519043662004229\u0026scene=189#wechat_redirect",
									"TextMarkTextContent": "https://mp.weixin.qq.com/s?__biz=MzkxOTIwMDgxMg==\u0026amp;mid=2247485797\u0026amp;idx=1\u0026amp;sn=5108be4e09af4360a63e842da9ba2b81\u0026amp;chksm=c1a4fc26f6d37530e7ecb527d8a88670202ba3e952f5ff686cebe9d8423a451b689a6b1880d7\u0026amp;cur_album_id=2342519043662004229\u0026amp;scene=189#wechat_redirect - 微信公众平台"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-8bhyi0x",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-8bhyi0x"
					},
					"Children": [
						{
							"ID": "20221122154330-6bd4r4s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-6bd4r4s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Calico 的安装、模块（Felix, BIRD, Confd）和路由模式介绍。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-uasx1ud",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-uasx1ud"
					},
					"Children": [
						{
							"ID": "20221122154330-2o1er52",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-2o1er52"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2022-11-22 15:43:30"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-7u8xkx2",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20221122154330-7u8xkx2"
			}
		},
		{
			"ID": "20221122154330-ce7jyg1",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221122154330-ce7jyg1"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221122154330-ege26kl",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221122154330-ege26kl"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "本文翻译自："
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "Life of a Packet in Kubernetes — Part 2 [1]"
						},
						{
							"Type": "NodeText",
							"Data": "\n作者：Dinesh Kumar Ramasamy\n本文在原文的基础上做了适当的修改，如有疑问请查阅原文。"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-g66umha",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-g66umha"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正如我们在第 1 部分中所讨论的，CNI 插件在 Kubernetes 网络中起着至关重要的作用。当前有许多第三方 CNI 插件可供使用，Calico 便是其中之一。凭借着良好的易用性以及对多种网络架构的支持，Calico 获得了许多工程师的青睐。"
				}
			]
		},
		{
			"ID": "20221122154330-r2udz90",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-r2udz90"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calico 支持广泛的平台，包括 Kubernetes，OpenShift，Docker EE, OpenStack 和裸金属服务。calico-node 在 Kubernetes 集群中的每个 Master 和 Worker 节点上以容器的方式运行。calico-cni 插件直接与 Kubernetes 的 kubelet 进行集成，能够发现哪些 Pod 被创建，并将它们添加到 Calico 网络中。"
				}
			]
		},
		{
			"ID": "20221122154330-yapu3cl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-yapu3cl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们将讨论 Calico 的安装、模块（Felix, BIRD, Confd）和路由模式。"
				}
			]
		},
		{
			"ID": "20221122154330-h7d1mm9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-h7d1mm9"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "不包括什么？"
				},
				{
					"Type": "NodeText",
					"Data": " Network Policy（网络策略），在第 3 部分的文章中将会进行介绍，因此本文暂时跳过。"
				}
			]
		},
		{
			"ID": "20221122154330-q3epyx7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221122154330-q3epyx7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CNI 要求"
				}
			]
		},
		{
			"ID": "20221122154330-jnkukdv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221122154330-jnkukdv"
			},
			"Children": [
				{
					"ID": "20221122154330-7bvcwre",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-7bvcwre"
					},
					"Children": [
						{
							"ID": "20221122154330-073txr9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-073txr9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1.创建 veth-pair 并接入到容器中。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-f9tzvel",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-f9tzvel"
					},
					"Children": [
						{
							"ID": "20221122154330-3twnfho",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-3twnfho"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2.确认正确的 Pod CIDR。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-5oqmsud",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-5oqmsud"
					},
					"Children": [
						{
							"ID": "20221122154330-0m90e80",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-0m90e80"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3.创建 CNI 配置文件。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-3vfbjsm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-3vfbjsm"
					},
					"Children": [
						{
							"ID": "20221122154330-poqz7so",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-poqz7so"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4.分配和管理 IP 地址。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-b65s3f7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-b65s3f7"
					},
					"Children": [
						{
							"ID": "20221122154330-4jkhmmq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-4jkhmmq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "5.在容器内添加默认路由。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-vsezmk8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-vsezmk8"
					},
					"Children": [
						{
							"ID": "20221122154330-0lcj3bd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-0lcj3bd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "6.将路由通告给所有的对等节点（peer node）。（不适用于 VxLan）"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-joony1j",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-joony1j"
					},
					"Children": [
						{
							"ID": "20221122154330-8muyh8l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-8muyh8l"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "7.在宿主机中添加路由。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-m4o88mk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-m4o88mk"
					},
					"Children": [
						{
							"ID": "20221122154330-ddxmj0s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-ddxmj0s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "8.执行网络策略。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-h3w20qr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-h3w20qr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除此之外，还有许多其他要求，但以上是基本要求。让我们看看 Master 和 Worker 节点中的路由表。每个节点中都包含一个带有 IP 地址和默认路由的容器。"
				}
			]
		},
		{
			"ID": "20221122154330-ex8w4fx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-ex8w4fx"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-ykp39mw"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-qhahl2r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-qhahl2r"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过查看路由表，可以很明显地发现 Pod 能够通过 L3 网络相互通信，因为路由是完美的。哪个模块负责添加这些路由条目，以及它是如何得到远程的路由？另外，为什么容器的默认网关是 169.254.1.1？让我们一会儿再谈。"
				}
			]
		},
		{
			"ID": "20221122154330-h0dfzjk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-h0dfzjk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calico 的核心组件是 Bird, Felix, ConfD, Etcd 和 Kubernetes API Server。数据存储用于保存配置信息（IP 地址池，端点信息，网络策略等等）。在我们的示例中，将使用 Kubernetes 作为 Calico 的数据存储。"
				}
			]
		},
		{
			"ID": "20221122154330-efzp3s2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221122154330-efzp3s2"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221122154330-lhc1d2v",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221122154330-lhc1d2v"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Calico 有两种数据存储可供选择："
						}
					]
				},
				{
					"ID": "20221122154330-z2q4p8e",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221122154330-z2q4p8e"
					},
					"Children": [
						{
							"ID": "20221122154330-v1a0zjc",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122154330-v1a0zjc"
							},
							"Children": [
								{
									"ID": "20221122154330-vo94lcm",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122154330-vo94lcm"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "etcd"
										},
										{
											"Type": "NodeText",
											"Data": " - 直接连接 Etcd 集群，优点是："
										}
									]
								},
								{
									"ID": "20221122154330-kq356dy",
									"Type": "NodeList",
									"ListData": {},
									"Properties": {
										"id": "20221122154330-kq356dy"
									},
									"Children": [
										{
											"ID": "20221122154330-q93b7qc",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122154330-q93b7qc"
											},
											"Children": [
												{
													"ID": "20221122154330-xjo3ot1",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122154330-xjo3ot1"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "1.可以在非 Kubernetes 平台（例如 OpenStack） 上运行 Calico。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122154330-iyrwj94",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122154330-iyrwj94"
											},
											"Children": [
												{
													"ID": "20221122154330-b8u1sq4",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122154330-b8u1sq4"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "2.分离 Kubernetes 和 Calico 资源的存储，便于单独扩展数据存储。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122154330-f0qqy67",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122154330-f0qqy67"
											},
											"Children": [
												{
													"ID": "20221122154330-z8sf239",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122154330-z8sf239"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "3.允许在多个 Kubernetes 集群之上运行一个 Calico 集群，实现跨集群的网络互通。"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20221122154330-nffxojn",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122154330-nffxojn"
							},
							"Children": [
								{
									"ID": "20221122154330-fso39xt",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122154330-fso39xt"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "Kubernetes"
										},
										{
											"Type": "NodeText",
											"Data": " - 连接 Kubernetes API Server，优点是："
										}
									]
								}
							]
						},
						{
							"ID": "20221122154330-kph0stu",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122154330-kph0stu"
							},
							"Children": [
								{
									"ID": "20221122154330-h0d6mq5",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122154330-h0d6mq5"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "1.无需额外的存储，更易于管理。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122154330-xixz259",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122154330-xixz259"
							},
							"Children": [
								{
									"ID": "20221122154330-2m9715v",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122154330-2m9715v"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "2.可以使用过 Kubernetes RBAC 来控制对 Calico 资源的访问。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122154330-h0kyhj4",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122154330-h0kyhj4"
							},
							"Children": [
								{
									"ID": "20221122154330-u5p31ad",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122154330-u5p31ad"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "3.可以使用 Kubernetes 审计日志对 Calico 资源的更改进行审计。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-1s46p0q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221122154330-1s46p0q"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模块和功能"
				}
			]
		},
		{
			"ID": "20221122154330-lw5i6pf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-lw5i6pf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calico 的架构图如下所示，详细的架构说明参见： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Component architecture [2]"
				},
				{
					"Type": "NodeText",
					"Data": " ，本文只介绍 BIRD, ConfD 和 Felix 这 3 个主要模块。"
				}
			]
		},
		{
			"ID": "20221122154330-tsgbr2y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-tsgbr2y"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-z6h7z7m"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-rnah9x9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221122154330-rnah9x9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BIRD (BGP)"
				}
			]
		},
		{
			"ID": "20221122154330-pf5ovi9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-pf5ovi9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BIRD 是每个节点的 BGP 守护进程，运行在 calico-node 容器中。BIRD 负责从 Felix 获取路由并与其他节点上的 BGP Peer 交换路由信息。常见的拓扑是点对点的网络，建立全互联的 BGP 连接关系。"
				}
			]
		},
		{
			"ID": "20221122154330-n73wba1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-n73wba1"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-0x33jgn"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-qku2c8w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-qku2c8w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于大规模部署，这可能会变得混乱。可以通过将某些节点配置为 Route Reflectors（路由反射器）来完成路由的传播，以减少 BGP 连接的数量。每个 BGP 节点只与路由反射器建立 Peer 连接关系，发送到路由反射器的路由通告随后会反射到所有其他的 BGP 节点。关于路由反射器的详情，请参阅  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "BGP Route Reflection [3]"
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20221122154330-s6p3iqm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-s6p3iqm"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-1vnm9ch"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-ky4lzmi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-ky4lzmi"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BIRD 实例负责将路由传播到其他 BIRD 实例。默认配置是 BGP Mesh（全互联），可用于小型部署。在大规模部署中，建议使用路由反射器来避免性能问题。可以使用多个 RR（Route Reflectors）保证高可用，此外还可以在集群外部设置 RR（例如硬件路由器）。"
				}
			]
		},
		{
			"ID": "20221122154330-rpfzk38",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221122154330-rpfzk38"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ConfD"
				}
			]
		},
		{
			"ID": "20221122154330-w8m4djf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-w8m4djf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ConfD 是一个简单的配置管理工具，以守护进程的方式运行在 calico-node 容器中。ConfD 会监视 Calico 数据存储中的配置更改，并更新 BIRD 的配置文件。因此，每当网络发生变化时，BIRD 都可以检测到，并将路由传播到其他节点。"
				}
			]
		},
		{
			"ID": "20221122154330-sne1cog",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221122154330-sne1cog"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Felix"
				}
			]
		},
		{
			"ID": "20221122154330-b5cewi9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-b5cewi9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calico Felix 守护进程在 calico-node 容器中运行，负责为容器设置网络资源（IP地址、路由、Iptables 规则等等）。"
				}
			]
		},
		{
			"ID": "20221122154330-jlrm1mv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-jlrm1mv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让我们看一下包含所有 Calico 模块的 Kubernetes 集群。"
				}
			]
		},
		{
			"ID": "20221122154330-gpa9vjl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-gpa9vjl"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-pfhu3r6"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-gn8puc0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-gn8puc0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数据包是如何路由到对等节点的？"
				}
			]
		},
		{
			"ID": "20221122154330-k02xhvu",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221122154330-k02xhvu"
			},
			"Children": [
				{
					"ID": "20221122154330-34re0qz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-34re0qz"
					},
					"Children": [
						{
							"ID": "20221122154330-5a3aryw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-5a3aryw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1.在 Master 节点中的 Pod 尝试 ping 10.0.2.11。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-e64xc3i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-e64xc3i"
					},
					"Children": [
						{
							"ID": "20221122154330-de9z8vx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-de9z8vx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2.Pod 向网关发送 ARP 请求。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-vy3c8yr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-vy3c8yr"
					},
					"Children": [
						{
							"ID": "20221122154330-79sslug",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-79sslug"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3.从 ARP 响应中获取 MAC 地址。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-s0pybhb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-s0pybhb"
					},
					"Children": [
						{
							"ID": "20221122154330-bak8es2",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20221122154330-bak8es2"
							},
							"Children": [
								{
									"ID": "20221122154330-ayuqvai",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20221122154330-ayuqvai"
									},
									"Children": [
										{
											"ID": "20221122154330-t3wyqiv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221122154330-t3wyqiv"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "等等"
												},
												{
													"Type": "NodeText",
													"Data": " ，是谁发送了 ARP 响应？"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-vx42pkp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-vx42pkp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发生了什么？容器的路由为什么可以指向一个不存在的 IP 地址（169.254.1.1）？让我们来看看正在发生的事情。一些读者可能已经注意到 169.254.1.1 是 IPv4 的链路本地地址（Link-local Address）。容器有一条指向链路本地地址的默认路由。容器期望这个 IP 地址可以通过其直连接口进行访问，在本例中为容器的 eth0 接口。当容器想要通过默认路由发送数据包时，它将尝试发送 ARP 请求以获取这个 IP 的 MAC 地址。"
				}
			]
		},
		{
			"ID": "20221122154330-rrzw9cg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-rrzw9cg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们捕获 ARP 响应，可以看到返回的是 veth 另一端（cali123）的 MAC 地址。我们在主机上查看所有网卡会发现，cali 所有网卡的 MAC 地址都是  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ee:ee:ee:ee:ee:ee"
				},
				{
					"Type": "NodeText",
					"Data": " 。所以你可能想知道主机到底是如何为一个不存在的 IP 地址响应 ARP 请求的。答案是代理 ARP（proxy-arp），Calico 本质上是利用了代理 ARP 撒了一个“善意的谎言”。如果我们检查主机端的 veth 接口，我们可以看到已经启用了 proxy-arp。"
				}
			]
		},
		{
			"ID": "20221122154330-7zn12dn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-7zn12dn"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ cat /proc/sys/net/ipv4/conf/cali123/proxy_arp  \n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-m6comw2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221122154330-m6comw2"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221122154330-nvrud0h",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221122154330-nvrud0h"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "代理 ARP 是 ARP 协议的一个变种， "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "当 ARP 请求目标跨网段时"
						},
						{
							"Type": "NodeText",
							"Data": " ，网关设备收到此 ARP 请求，会用自己的 MAC 地址返回给请求者，这便是代理 ARP（Proxy ARP）。"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-hy8gd62",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-hy8gd62"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让我们仔细看看 Worker 节点。"
				}
			]
		},
		{
			"ID": "20221122154330-4gip4o7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-4gip4o7"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-7u2oa8x"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-225as8k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-225as8k"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦数据包到达内核，它会根据路由表条目对数据包进行路由。"
				}
			]
		},
		{
			"ID": "20221122154330-ebvsoty",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-ebvsoty"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "传入流量"
				}
			]
		},
		{
			"ID": "20221122154330-k82r2mz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221122154330-k82r2mz"
			},
			"Children": [
				{
					"ID": "20221122154330-o4fpnp7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-o4fpnp7"
					},
					"Children": [
						{
							"ID": "20221122154330-g4i6sda",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-g4i6sda"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1.数据包到达 Worker 节点的内核。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-aqxs2lj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-aqxs2lj"
					},
					"Children": [
						{
							"ID": "20221122154330-hdszphj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-hdszphj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2.内核将数据包放入 cali123 接口。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-yr6zv28",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221122154330-yr6zv28"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "路由模式"
				}
			]
		},
		{
			"ID": "20221122154330-pbdhgjk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-pbdhgjk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calico 支持 3种路由模式；在本章节中，我们将了解每种方法的优缺点以及各自的使用场景。"
				}
			]
		},
		{
			"ID": "20221122154330-uk1b1ek",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221122154330-uk1b1ek"
			},
			"Children": [
				{
					"ID": "20221122154330-7as90hk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-7as90hk"
					},
					"Children": [
						{
							"ID": "20221122154330-e4eo5go",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-e4eo5go"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "IP-in-IP"
								},
								{
									"Type": "NodeText",
									"Data": " ：默认使用路由的模式，有封装。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-fmct8gd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-fmct8gd"
					},
					"Children": [
						{
							"ID": "20221122154330-b9ylsak",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-b9ylsak"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Direct/NoEncapMode"
								},
								{
									"Type": "NodeText",
									"Data": " ：无封装（首选）。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-a0cwwhd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-a0cwwhd"
					},
					"Children": [
						{
							"ID": "20221122154330-ssjqzu4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-ssjqzu4"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "VXLAN"
								},
								{
									"Type": "NodeText",
									"Data": " ：有封装（无 BGP）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-4w92cvo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221122154330-4w92cvo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "IP-in-IP （默认）"
				}
			]
		},
		{
			"ID": "20221122154330-n8kqb2v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-n8kqb2v"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "IP-in-IP 是一种简单的封装形式，通过将一个 IP 数据包放入另一个数据包中来实现。传输的数据包包含一个带有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "主机"
				},
				{
					"Type": "NodeText",
					"Data": "源和目标 IP 的外部标头和一个带有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Pod"
				},
				{
					"Type": "NodeText",
					"Data": " 源和目标 IP 的内部标头。"
				}
			]
		},
		{
			"ID": "20221122154330-ao2mr2c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-ao2mr2c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Azure 不支持 IP-IP（据我所知）；因此，我们无法在那种环境中使用 IP-IP。最好禁用 IP-IP 以获得更好的性能。"
				}
			]
		},
		{
			"ID": "20221122154330-u2axcn0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221122154330-u2axcn0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NoEncapMode（无封装模式）"
				}
			]
		},
		{
			"ID": "20221122154330-x8fpuzs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-x8fpuzs"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这种模式下，发送的数据包就好像它们直接来自 Pod。由于没有封装和解封装带来的开销，NoEncapMode 有着更好的性能。"
				}
			]
		},
		{
			"ID": "20221122154330-wtp06xw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-wtp06xw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "必须在 AWS 中禁用源 IP 检查才能启用此模式。"
				}
			]
		},
		{
			"ID": "20221122154330-rup95x3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221122154330-rup95x3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "VXLAN"
				}
			]
		},
		{
			"ID": "20221122154330-eg6lf8p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-eg6lf8p"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calico 3.7+ 版本支持 VXLAN 路由模式。"
				}
			]
		},
		{
			"ID": "20221122154330-dhdbz1r",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221122154330-dhdbz1r"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221122154330-1h4lsse",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221122154330-1h4lsse"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "VXLAN 的全称是 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "Virtual Extensible LAN（虚拟可扩展局域网）"
						},
						{
							"Type": "NodeText",
							"Data": " 。VXLAN 本质上是一种隧道技术，在源网络设备与目的网络设备之间的 IP 网络上，建立一条逻辑隧道，将用户侧报文经过特定的封装后通过这条隧道转发。从用户的角度来看，接入网络的服务器就像是连接到了一个虚拟的二层交换机的不同端口上，可以方便地通信。"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "VTEP（VXLAN Tunnel Endpoints，VXLAN 隧道端点）"
						},
						{
							"Type": "NodeText",
							"Data": " 是 VXLAN 网络的边缘设备，是 VXLAN 隧道的起点和终点，VXLAN 对用户原始数据帧的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "封装和解封装"
						},
						{
							"Type": "NodeText",
							"Data": "均在 VTEP 上进行。"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-gxzv0f6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-gxzv0f6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "VXLAN 非常适合不支持 IP-in-IP 的网络，例如 Azure 或任何其他不支持 BGP 的 DC（DataCenter, 数据中心）。"
				}
			]
		},
		{
			"ID": "20221122154330-3moxffb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-3moxffb"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-k7p44dj"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-nf9xzeq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221122154330-nf9xzeq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "演示 -- IPIP 和 UnEncapMode"
				}
			]
		},
		{
			"ID": "20221122154330-ous4nhm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-ous4nhm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在安装 Calico 之前检查集群状态，可以看到所有节点都处于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "NotReady"
				},
				{
					"Type": "NodeText",
					"Data": " 状态，这种情况是正常的，因为我们还没有安装任何 CNI，因此集群节点上的 kubelet 会检测并报告节点的状态为  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "NotReady"
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20221122154330-vays2ek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-vays2ek"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事实上，如果这个时候去部署一个非 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "hostNetwork"
				},
				{
					"Type": "NodeText",
					"Data": " 的 Pod，就会处于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Pending"
				},
				{
					"Type": "NodeText",
					"Data": " 的状态，因为集群的调度器不能找到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Ready"
				},
				{
					"Type": "NodeText",
					"Data": " 的节点来运行 Pod。但是，对于 Kubernetes 的系统组件，如 API Server、Kube-Scheduler、Kube-Controller-Manager 等，因为它们是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "hostNetwork"
				},
				{
					"Type": "NodeText",
					"Data": " 的 Pod，所以即使在未安装 CNI 组件的情况下也能正常运行。"
				}
			]
		},
		{
			"ID": "20221122154330-h97kpfh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-h97kpfh"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl get nodes\nNAME           STATUS     ROLES    AGE   VERSION\ncontrolplane   NotReady   master   40s   v1.18.0\nnode01         NotReady   \u003cnone\u003e   9s    v1.18.0master $ kubectl get pods --all-namespaces\nNAMESPACE     NAME                                   READY   STATUS    RESTARTS   AGE\nkube-system   coredns-66bff467f8-52tkd               0/1     Pending   0          32s\nkube-system   coredns-66bff467f8-g5gjb               0/1     Pending   0          32s\nkube-system   etcd-controlplane                      1/1     Running   0          34s\nkube-system   kube-apiserver-controlplane            1/1     Running   0          34s\nkube-system   kube-controller-manager-controlplane   1/1     Running   0          34s\nkube-system   kube-proxy-b2j4x                       1/1     Running   0          13s\nkube-system   kube-proxy-s46lv                       1/1     Running   0          32s\nkube-system   kube-scheduler-controlplane            1/1     Running   0          33s\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-pj0ljkt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-pj0ljkt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检查 CNI 的 bin 和 conf 目录，确保里面没有任何配置文件或者 Calico 的二进制文件，安装 Calico 时将会往该目录存放这些文件。"
				}
			]
		},
		{
			"ID": "20221122154330-9f178d6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-9f178d6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ cd /etc/cni\n-bash: cd: /etc/cni: No such file or directory\nmaster $ cd /opt/cni/bin\nmaster $ ls\nbridge  dhcp  flannel  host-device  host-local  ipvlan  loopback  macvlan  portmap  ptp  sample  tuning  vlan\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-8ti7syw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-8ti7syw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检查 Master/Worker 节点的路由。"
				}
			]
		},
		{
			"ID": "20221122154330-ratbqzf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-ratbqzf"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ ip route\ndefault via 172.17.0.1 dev ens3\n172.17.0.0/16 dev ens3 proto kernel scope link src 172.17.0.32\n172.18.0.0/24 dev docker0 proto kernel scope link src 172.18.0.1 linkdown\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-db8qpy5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-db8qpy5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下载并应用 calico.yaml 文件。"
				}
			]
		},
		{
			"ID": "20221122154330-fts6mai",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-fts6mai"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "curl https://docs.projectcalico.org/manifests/calico.yaml -O kubectl apply -f calico.yaml\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-irqzvid",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-irqzvid"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们来看看一些有用的配置参数。"
				}
			]
		},
		{
			"ID": "20221122154330-1yai16m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-1yai16m"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cni_network_config: |-\n    {\n      \"name\": \"k8s-pod-network\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\", # Calico 插件\n          \"log_level\": \"info\",\n          \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n          \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\": \"calico-ipam\" # Calico IPAM 插件，管理和分配 IP 地址\n          },\n          \"policy\": {\n              \"type\": \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          }\n        },\n        {\n          \"type\": \"portmap\",\n          \"snat\": true,\n          \"capabilities\": {\"portMappings\": true}\n        },\n        {\n          \"type\": \"bandwidth\",\n          \"capabilities\": {\"bandwidth\": true}\n        }\n      ]\n    }\n# Enable IPIP\n- name: CALICO_IPV4POOL_IPIP\n    value: \"Always\" # 设置为 Never 可以禁用 IP-IP\n# Enable or Disable VXLAN on the default IP pool.\n- name: CALICO_IPV4POOL_VXLAN\n    value: \"Never\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-ojxwgmu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-ojxwgmu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检查安装 Calico 后 Pod 和 Node 的状态，可以看到 Node 已经处于 Ready 状态，并且 Pod 正在初始化或者创建中。"
				}
			]
		},
		{
			"ID": "20221122154330-2mb9kgv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-2mb9kgv"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl get pods --all-namespaces\nNAMESPACE     NAME                                       READY   STATUS              RESTARTS   AGE\nkube-system   calico-kube-controllers-799fb94867-6qj77   0/1     ContainerCreating   0          21s\nkube-system   calico-node-bzttq                          0/1     PodInitializing     0          21s\nkube-system   calico-node-r6bwj                          0/1     PodInitializing     0          21s\nkube-system   coredns-66bff467f8-52tkd                   0/1     Pending             0          7m5s\nkube-system   coredns-66bff467f8-g5gjb                   0/1     ContainerCreating   0          7m5s\nkube-system   etcd-controlplane                          1/1     Running             0          7m7s\nkube-system   kube-apiserver-controlplane                1/1     Running             0          7m7s\nkube-system   kube-controller-manager-controlplane       1/1     Running             0          7m7s\nkube-system   kube-proxy-b2j4x                           1/1     Running             0          6m46s\nkube-system   kube-proxy-s46lv                           1/1     Running             0          7m5s\nkube-system   kube-scheduler-controlplane                1/1     Running             0          7m6s\nmaster $ kubectl get nodes\nNAME           STATUS   ROLES    AGE     VERSION\ncontrolplane   Ready    master   7m30s   v1.18.0\nnode01         Ready    \u003cnone\u003e   6m59s   v1.18.0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-y36zs1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-y36zs1c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让我们探索一下 CNI 的配置，因为这是 Kubelet 设置网络所需的。"
				}
			]
		},
		{
			"ID": "20221122154330-unvikuy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-unvikuy"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ cd /etc/cni/net.d/\nmaster $ ls\n10-calico.conflist  calico-kubeconfig\nmaster $\nmaster $\nmaster $ cat 10-calico.conflist\n{\n  \"name\": \"k8s-pod-network\",\n  \"cniVersion\": \"0.3.1\",\n  \"plugins\": [\n    {\n      \"type\": \"calico\",\n      \"log_level\": \"info\",\n      \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n      \"datastore_type\": \"kubernetes\",\n      \"nodename\": \"controlplane\",\n      \"mtu\": 1440,\n      \"ipam\": {\n          \"type\": \"calico-ipam\"\n      },\n      \"policy\": {\n          \"type\": \"k8s\"\n      },\n      \"kubernetes\": {\n          \"kubeconfig\": \"/etc/cni/net.d/calico-kubeconfig\"\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"snat\": true,\n      \"capabilities\": {\"portMappings\": true}\n    },\n    {\n      \"type\": \"bandwidth\",\n      \"capabilities\": {\"bandwidth\": true}\n    }\n  ]\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-lcysw7d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-lcysw7d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检查 CNI 的二进制文件。"
				}
			]
		},
		{
			"ID": "20221122154330-ffjrfxi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-ffjrfxi"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ ls\nbandwidth  bridge  calico  calico-ipam dhcp  flannel  host-device  host-local  install  ipvlan  loopback  macvlan  portmap  ptp  sample  tuning  vlan\nmaster $\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-okrh1u9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-okrh1u9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让我们安装 calicoctl 工具，从而更好地和 Calico 进行交互。"
				}
			]
		},
		{
			"ID": "20221122154330-3xomaid",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-3xomaid"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ cd /usr/local/bin/\nmaster $ curl -O -L https://github.com/projectcalico/calicoctl/releases/download/v3.16.3/calicoctl\nmaster $ chmod +x calicoctl\nmaster $ export DATASTORE_TYPE=kubernetes\nmaster $ export KUBECONFIG=~/.kube/config\n# 检查端点，当我们没有部署任何 Pod 时将会是空的\nmaster $ calicoctl get workloadendpoints\nWORKLOAD   NODE   NETWORKS   INTERFACE\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-wg2lcxr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-wg2lcxr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检查 BGP 对等节点状态，在 Master 节点上将会显示 Worker 节点。"
				}
			]
		},
		{
			"ID": "20221122154330-fex7tqe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-fex7tqe"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ calicoctl node status\nCalico process is running.\nIPv4 BGP status\n+--------------+-------------------+-------+----------+-------------+\n| PEER ADDRESS |     PEER TYPE     | STATE |  SINCE   |    INFO     |\n+--------------+-------------------+-------+----------+-------------+\n| 172.17.0.40  | node-to-node mesh | up    | 00:24:04 | Established |\n+--------------+-------------------+-------+----------+-------------+\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-sh3774p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-sh3774p"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建一个 2 副本的 busybox Pod，并添加 toleration（容忍），允许 Pod 调度到 Master 节点上。"
				}
			]
		},
		{
			"ID": "20221122154330-kzba9q7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-kzba9q7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cat \u003e busybox.yaml \u003c\u003c\"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: busybox-deployment\nspec:\n  selector:\n    matchLabels:\n      app: busybox\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: busybox\n    spec:\n      tolerations:\n      - key: \"node-role.kubernetes.io/master\"\n        operator: \"Exists\"\n        effect: \"NoSchedule\"\n      containers:\n      - name: busybox\n        image: busybox\n        command: [\"sleep\"]\n        args: [\"10000\"]\nEOF\nmaster $ kubectl apply -f busybox.yaml\ndeployment.apps/busybox-deployment created\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-wwyx6lx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-wwyx6lx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取 Pod 和 WorkloadEndpoints 状态。"
				}
			]
		},
		{
			"ID": "20221122154330-skdkccy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-skdkccy"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl get pods -o wide\nNAME                                 READY   STATUS    RESTARTS   AGE   IP                NODE           NOMINATED NODE   READINESS GATES\nbusybox-deployment-8c7dc8548-btnkv   1/1     Running   0          6s    192.168.196.131   node01         \u003cnone\u003e           \u003cnone\u003e\nbusybox-deployment-8c7dc8548-x6ljh   1/1     Running   0          6s    192.168.49.66     controlplane   \u003cnone\u003e           \u003cnone\u003e\nmaster $ calicoctl get workloadendpoints\nWORKLOAD                             NODE           NETWORKS             INTERFACE\nbusybox-deployment-8c7dc8548-btnkv   node01         192.168.196.131/32   calib673e730d42\nbusybox-deployment-8c7dc8548-x6ljh   controlplane   192.168.49.66/32     cali9861acf9f07\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-r3btb41",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-r3btb41"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取 Master 节点上 busybox Pod 的主机端 veth 对的详细信息。"
				}
			]
		},
		{
			"ID": "20221122154330-d7mm0ye",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-d7mm0ye"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ ifconfig cali9861acf9f07\ncali9861acf9f07: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e  mtu 1440\n        inet6 fe80::ecee:eeff:feee:eeee  prefixlen 64  scopeid 0x20\u003clink\u003e\n        ether ee:ee:ee:ee:ee:ee  txqueuelen 0  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 5  bytes 446 (446.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-i2fqikt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-i2fqikt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取 Master 节点 busybox Pod 的接口地址，路由和 ARP 信息。"
				}
			]
		},
		{
			"ID": "20221122154330-bg0im8b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-bg0im8b"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl exec busybox-deployment-8c7dc8548-x6ljh -- ifconfig\neth0      Link encap:Ethernet  HWaddr 92:7E:C4:15:B9:82\n          inet addr:192.168.49.66  Bcast:192.168.49.66  Mask:255.255.255.255\n          UP BROADCAST RUNNING MULTICAST  MTU:1440  Metric:1\n          RX packets:5 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:446 (446.0 B)  TX bytes:0 (0.0 B)\nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\nmaster $ kubectl exec busybox-deployment-8c7dc8548-x6ljh -- ip route\ndefault via 169.254.1.1 dev eth0\n169.254.1.1 dev eth0 scope link\nmaster $ kubectl exec busybox-deployment-8c7dc8548-x6ljh -- arp\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-s72rs9z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-s72rs9z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看 Master 节点的路由。"
				}
			]
		},
		{
			"ID": "20221122154330-r1etu7y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-r1etu7y"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ ip route\ndefault via 172.17.0.1 dev ens3\n172.17.0.0/16 dev ens3 proto kernel scope link src 172.17.0.32\n172.18.0.0/24 dev docker0 proto kernel scope link src 172.18.0.1 linkdown\nblackhole 192.168.49.64/26 proto bird\n192.168.49.65 dev calic22dbe57533 scope link\n192.168.49.66 dev cali9861acf9f07 scope link # Master 节点上连接 busybox Pod 的 veth 接口\n192.168.196.128/26 via 172.17.0.40 dev tunl0 proto bird onlink # 通往 Worker 节点上 Pod 的路由\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-061w1pp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-061w1pp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "尝试在 Master 节点的 Pod 上 ping Worker 节点的 Pod 以触发 ARP 请求。"
				}
			]
		},
		{
			"ID": "20221122154330-7sw47he",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-7sw47he"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl exec busybox-deployment-8c7dc8548-x6ljh -- ping 192.168.196.131 -c 1\nPING 192.168.196.131 (192.168.196.131): 56 data bytes\n64 bytes from 192.168.196.131: seq=0 ttl=62 time=0.823 ms# 查看 ARP 条目\nmaster $ kubectl exec busybox-deployment-8c7dc8548-x6ljh -- arp\n? (169.254.1.1) at ee:ee:ee:ee:ee:ee [ether]  on eth0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-tpx2iz8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-tpx2iz8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网关的 MAC 地址就是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "cali9861acf9f07"
				},
				{
					"Type": "NodeText",
					"Data": " 接口的。从现在开始，所有出访的流量都会直接打到内核，然后内核会根据路由将数据包传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "tunl0"
				},
				{
					"Type": "NodeText",
					"Data": " 接口。"
				}
			]
		},
		{
			"ID": "20221122154330-nut2wcd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-nut2wcd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ARP 代理的配置。"
				}
			]
		},
		{
			"ID": "20221122154330-wqggybd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-wqggybd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ cat /proc/sys/net/ipv4/conf/cali9861acf9f07/proxy_arp\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-3yxnocz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-3yxnocz"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "那么目的节点是如何处理数据包的？"
				}
			]
		},
		{
			"ID": "20221122154330-ju4kvuw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-ju4kvuw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "node01 $ ip route\ndefault via 172.17.0.1 dev ens3\n172.17.0.0/16 dev ens3 proto kernel scope link src 172.17.0.40\n172.18.0.0/24 dev docker0 proto kernel scope link src 172.18.0.1 linkdown\n192.168.49.64/26 via 172.17.0.32 dev tunl0 proto bird onlink # 通往 Master 节点上 Pod 的路由\nblackhole 192.168.196.128/26 proto bird\n192.168.196.129 dev calid4f00d97cb5 scope link\n192.168.196.130 dev cali257578b48b6 scope link\n192.168.196.131 dev calib673e730d42 scope link # Worker 节点上连接 busybox Pod 的 veth 接口\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-y9u5fs3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-y9u5fs3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目的节点的内核收到数据包后，会根据路由表将数据包发往正确的 veth 接口。如果我们捕获数据包，我们可以看到网络上的 IP-IP 协议。使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "tcpdump"
				},
				{
					"Type": "NodeText",
					"Data": " 工具进行抓包："
				}
			]
		},
		{
			"ID": "20221122154330-hx9lvex",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221122154330-hx9lvex"
			},
			"Children": [
				{
					"ID": "20221122154330-rmacsfp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-rmacsfp"
					},
					"Children": [
						{
							"ID": "20221122154330-vi175ch",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-vi175ch"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "-i"
								},
								{
									"Type": "NodeText",
									"Data": " ：抓包的接口，注意要在主机的接口，而不是在 tunl0 接口上抓包，在 tunl0 接口看到是还未封装前的数据包。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-2bdv3wx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-2bdv3wx"
					},
					"Children": [
						{
							"ID": "20221122154330-xif0h55",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-xif0h55"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "host"
								},
								{
									"Type": "NodeText",
									"Data": " ：根据 IP 地址过滤，IP-IP 外层的是地址是节点的 IP。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-eizf78q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-eizf78q"
					},
					"Children": [
						{
							"ID": "20221122154330-kapdr2o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-kapdr2o"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "-nn"
								},
								{
									"Type": "NodeText",
									"Data": " ：不解析主机名或端口名，可以加快抓包的速度。"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-lp8tnun",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-lp8tnun"
					},
					"Children": [
						{
							"ID": "20221122154330-f5sgnz4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-f5sgnz4"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "-w"
								},
								{
									"Type": "NodeText",
									"Data": " ：输出到文件。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-1nlgdwa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-1nlgdwa"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "另外需要注意不要通过 ICMP 的方式过滤数据包，因为外层是 IP-IP 协议，内层才可以看到 ICMP 协议。"
				}
			]
		},
		{
			"ID": "20221122154330-b1c6whb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-b1c6whb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "tcpdump -i \u003c节点接口\u003e host \u003c节点 IP\u003e -nn -w /tmp/ipip.pcap\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-wwvfoog",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-wwvfoog"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Wireshark 工具打开可以看到以下效果，下图我是在另一篇文章 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Calico Routing Modes [4]"
				},
				{
					"Type": "NodeText",
					"Data": " 中截取的，图中的 IP 地址和本示例中的环境是不一致的，这里主要为了是方便读者看一下效果。可以看到，Pod 的 IP 通过 IP-IP 协议封装在节点的 IP 中。"
				}
			]
		},
		{
			"ID": "20221122154330-xmziogy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-xmziogy"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154330-8uvkr6x"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-i7b8n46",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-i7b8n46"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Azure 不支持 IP-IP（据我所知）；因此，我们无法在那种环境中使用 IP-IP。最好禁用 IP-IP 以获得更好的性能。让我们尝试禁用它，看看效果如何。"
				}
			]
		},
		{
			"ID": "20221122154330-fua07wd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221122154330-fua07wd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "演示 -- UnEncapMode"
				}
			]
		},
		{
			"ID": "20221122154330-g7lxhib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-g7lxhib"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "禁用 IP-IP"
				},
				{
					"Type": "NodeText",
					"Data": " ：更改 ipPool 配置以禁用 IP-IP，先使用以下命令获取当前的配置。"
				}
			]
		},
		{
			"ID": "20221122154330-wnsx6zg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-wnsx6zg"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ calicoctl get ippool default-ipv4-ippool -o yaml \u003e ippool.yaml  \nmaster $ vi ippool.yaml\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-dtk1vfs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-dtk1vfs"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "编辑 ippool.yaml 文件，将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ipipMode"
				},
				{
					"Type": "NodeText",
					"Data": " 参数设置为 Never，然后使用 calicoctl 命令重新应用配置文件。"
				}
			]
		},
		{
			"ID": "20221122154330-dlni6we",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-dlni6we"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ calicoctl apply -f ippool.yaml\nSuccessfully applied 1 'IPPool' resource(s)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-va3a47n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-va3a47n"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重新检查路由。"
				}
			]
		},
		{
			"ID": "20221122154330-hkzf1y5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-hkzf1y5"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ ip route\ndefault via 172.17.0.1 dev ens3\n172.17.0.0/16 dev ens3 proto kernel scope link src 172.17.0.32\n172.18.0.0/24 dev docker0 proto kernel scope link src 172.18.0.1 linkdown\nblackhole 192.168.49.64/26 proto bird\n192.168.49.65 dev calic22dbe57533 scope link\n192.168.49.66 dev cali9861acf9f07 scope link\n192.168.196.128/26 via 172.17.0.40 dev ens3 proto bird # 通往 Worker 节点 Pod 的路由的出接口变成 ens33 了\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-it7swr7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-it7swr7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "路由的出接口不再是  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "tunel0"
				},
				{
					"Type": "NodeText",
					"Data": " ，而是变成了 Master 节点的管理接口。"
				}
			]
		},
		{
			"ID": "20221122154330-9zo4wf2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-9zo4wf2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让我们尝试 ping Worker 节点的 Pod 并确保一切正常。从现在开始，将不再涉及任何 IPIP 协议。"
				}
			]
		},
		{
			"ID": "20221122154330-97vo593",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-97vo593"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl exec busybox-deployment-8c7dc8548-x6ljh -- ping 192.168.196.131 -c 1\nPING 192.168.196.131 (192.168.196.131): 56 data bytes\n64 bytes from 192.168.196.131: seq=0 ttl=62 time=0.653 ms\n--- 192.168.196.131 ping statistics ---\n1 packets transmitted, 1 packets received, 0% packet loss\nround-trip min/avg/max = 0.653/0.653/0.653 ms\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-h8pul3g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-h8pul3g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NoEncapMode 模式下要求集群的节点在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "同一网段"
				},
				{
					"Type": "NodeText",
					"Data": "内才可以保证 Pod 之间的正常通信。因为如果跨网段的话，没有在 Pod IP 的外部封装节点 IP 的情况下，网关设备是不知道 Pod 的网段的，将会丢弃数据包。使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "tcpdump"
				},
				{
					"Type": "NodeText",
					"Data": " 工具抓包分析，由于没有额外的封装，可以直接通过 ICMP 协议进行过滤。"
				}
			]
		},
		{
			"ID": "20221122154330-p2mxubt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-p2mxubt"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "tcpdump -i \u003c节点接口\u003e icmp -nn -w /tmp/noencapmode.pcap\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-y6e711e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-y6e711e"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-tch2sxc"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-4bsbjtp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-4bsbjtp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calico 可以选择仅封装跨子网边界的流量，建议在 IP-IP 或者 VXLAN 模式中使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CrossSubnet"
				},
				{
					"Type": "NodeText",
					"Data": " 选择，以最大限度地减少封装开销，配置详情参见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Calico Overlay networking"
				},
				{
					"Type": "NodeText",
					"Data": " ** [5]** 。"
				}
			]
		},
		{
			"ID": "20221122154330-3kbz3xg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-3kbz3xg"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-vwhdao1"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-tl5dfvg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221122154330-tl5dfvg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "演示 -- VXLAN"
				}
			]
		},
		{
			"ID": "20221122154330-lofy659",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-lofy659"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重新初始化集群并下载 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "calico.yaml"
				},
				{
					"Type": "NodeText",
					"Data": " 文件，然后修改以下内容。"
				}
			]
		},
		{
			"ID": "20221122154330-qeyuz7c",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221122154330-qeyuz7c"
			},
			"Children": [
				{
					"ID": "20221122154330-ts3cjng",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221122154330-ts3cjng"
					},
					"Children": [
						{
							"ID": "20221122154330-tlgqcw8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-tlgqcw8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "livenessProbe"
								},
								{
									"Type": "NodeText",
									"Data": " 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "readinessProbe"
								},
								{
									"Type": "NodeText",
									"Data": " 中移除  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "bird"
								},
								{
									"Type": "NodeText",
									"Data": " 。因为在第 2 步中禁用 BIRD 会导致健康探测失败。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-4d4zqo1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-4d4zqo1"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "livenessProbe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -felix-live\n              #- -bird-live # 注释这条\n            periodSeconds: 10\n            initialDelaySeconds: 10\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -felix-ready\n              #- -bird-ready # 注释这条\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-vo1jkr9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-vo1jkr9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.修改 calico_backend 参数为  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "vxlan"
				},
				{
					"Type": "NodeText",
					"Data": " ，表示禁用 BIRD，因为我们不再需要 BGP。"
				}
			]
		},
		{
			"ID": "20221122154330-7o81raj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-7o81raj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-config\n  namespace: kube-system\ndata:\n  # Typha is disabled.\n  typha_service_name: \"none\"\n  # Configure the backend to use.\n  calico_backend: \"vxlan\" # 修改为 vxlan\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-bnrr1ze",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-bnrr1ze"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.禁用 IPIP。"
				}
			]
		},
		{
			"ID": "20221122154330-yhv3sy7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-yhv3sy7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# Enable IPIP\n- name: CALICO_IPV4POOL_IPIP\n    value: \"Never\" # 将参数设置为 Never 禁用 IPIP\n# Enable or Disable VXLAN on the default IP pool.\n- name: CALICO_IPV4POOL_VXLAN\n    value: \"Never\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-day26mf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-day26mf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "修改完毕后应用配置文件。"
				}
			]
		},
		{
			"ID": "20221122154330-cyj2s5r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-cyj2s5r"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ kubectl apply -f calico.yaml\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-evygqsu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-evygqsu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看 Master 节点的路由和接口。"
				}
			]
		},
		{
			"ID": "20221122154330-rmmdyup",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-rmmdyup"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ ip route\ndefault via 172.17.0.1 dev ens3\n172.17.0.0/16 dev ens3 proto kernel scope link src 172.17.0.15\n172.18.0.0/24 dev docker0 proto kernel scope link src 172.18.0.1 linkdown\n192.168.49.65 dev calif5cc38277c7 scope link\n192.168.49.66 dev cali840c047460a scope link\n192.168.196.128/26 via 192.168.196.128 dev vxlan.calico onlink # 通往 Worker 节点 Pod 的路由走 vxlan.calico 接口# 多了一个 vxlan.calico 接口用于封装和解封装 VXLAN 流量\nmaster $ ifconfig\nvxlan.calico: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e  mtu 1440\n        inet 192.168.196.128  netmask 255.255.255.255  broadcast 192.168.196.128\n        inet6 fe80::64aa:99ff:fe2f:dc24  prefixlen 64  scopeid 0x20\u003clink\u003e\n        ether 66:aa:99:2f:dc:24  txqueuelen 0  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 11 overruns 0  carrier 0  collisions 0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-zxdz6v1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-zxdz6v1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看 Pod 状态。"
				}
			]
		},
		{
			"ID": "20221122154330-mtuau0x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-mtuau0x"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl get pods -o wide\nNAME                                 READY   STATUS    RESTARTS   AGE   IP                NODE           NOMINATED NODE   READINESS GATES\nbusybox-deployment-8c7dc8548-8bxnw   1/1     Running   0          11s   192.168.49.67     controlplane   \u003cnone\u003e           \u003cnone\u003e\nbusybox-deployment-8c7dc8548-kmxst   1/1     Running   0          11s   192.168.196.130   node01         \u003cnone\u003e           \u003cnone\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-a8xusuh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-a8xusuh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看 Pod 的路由。"
				}
			]
		},
		{
			"ID": "20221122154330-cir3bar",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-cir3bar"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl exec busybox-deployment-8c7dc8548-8bxnw -- ip route\ndefault via 169.254.1.1 dev eth0\n169.254.1.1 dev eth0 scope link\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-wmub7mw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-wmub7mw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发起 ping 命令触发 ARP 请求。"
				}
			]
		},
		{
			"ID": "20221122154330-z6x847r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-z6x847r"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "master $ kubectl exec busybox-deployment-8c7dc8548-8bxnw -- arp\nmaster $ kubectl exec busybox-deployment-8c7dc8548-8bxnw -- ping 8.8.8.8\nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: seq=0 ttl=116 time=3.786 ms\n^C\nmaster $ kubectl exec busybox-deployment-8c7dc8548-8bxnw -- arp\n? (169.254.1.1) at ee:ee:ee:ee:ee:ee [ether]  on eth0\nmaster $\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-ve4zijd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-ve4zijd"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154329-9nvgquy"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "和前面介绍的 IP-IP 模式的概念类似，唯一的区别是数据包到达 vxlan.calico 接口后，会在数据包的外层封装节点 IP 和 MAC 地址。此外，VXLAN 协议使用 UDP 4789 端口。使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "tcpdump"
				},
				{
					"Type": "NodeText",
					"Data": " 工具抓包分析，可以在节点接口上根据 VXLAN 的 4789 端口进行过滤。"
				}
			]
		},
		{
			"ID": "20221122154330-gmir8ao",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221122154330-gmir8ao"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "tcpdump -i \u003c节点接口\u003e port 4789 -nn -w /tmp/vxlan.pcap\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221122154330-bkhl511",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122154330-bkhl511"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20221122154330-jatlkeo"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-x9p2kvy",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221122154330-x9p2kvy"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221122154330-g2pvzp6",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221122154330-g2pvzp6"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意: VXLAN 能够支持在某些 IP-IP 不支持的环境（例如 Azure）。和 IP-IP 模式相比，由于 VXLAN 封装数据包所使用的标头更大，因此会消耗更多的资源。除非你运行网络密集型的工作负载，否则通常不会注意到两者间性能的差异。"
						}
					]
				}
			]
		},
		{
			"ID": "20221122154330-3d35x4s",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221122154330-3d35x4s"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考资料"
				}
			]
		},
		{
			"ID": "20221122154330-dx03oyk",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221122154330-dx03oyk"
			},
			"Children": [
				{
					"ID": "20221122154330-wknuxeo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-wknuxeo"
					},
					"Children": [
						{
							"ID": "20221122154330-meio6zm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-meio6zm"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[1] 原文链接：https://dramasamy.medium.com/life-of-a-packet-in-kubernetes-part-2-a07f5bf0ff14"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-hplberx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-hplberx"
					},
					"Children": [
						{
							"ID": "20221122154330-lqj4rtb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-lqj4rtb"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[2] Component architecture: https://projectcalico.docs.tigera.io/reference/architecture/overview"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-lmreic0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-lmreic0"
					},
					"Children": [
						{
							"ID": "20221122154330-lj56tte",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-lj56tte"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[3] BGP Route Reflection: https://datatracker.ietf.org/doc/html/rfc4456"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-a01upt3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-a01upt3"
					},
					"Children": [
						{
							"ID": "20221122154330-uszf9ap",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-uszf9ap"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[4] Calico Routing Modes: https://octetz.com/docs/2020/2020-10-01-calico-routing-modes/"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-nntadtg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-nntadtg"
					},
					"Children": [
						{
							"ID": "20221122154330-g1v4d4p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-g1v4d4p"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[5] Calico Overlay networking: https://projectcalico.docs.tigera.io/networking/vxlan-ipip"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-0i4ayot",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-0i4ayot"
					},
					"Children": [
						{
							"ID": "20221122154330-150s5zo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-150s5zo"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[6] Calico 网络通信原理揭秘: https://zhuanlan.zhihu.com/p/75933393"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-aqsu1ec",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-aqsu1ec"
					},
					"Children": [
						{
							"ID": "20221122154330-popsfn7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-popsfn7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[7] 什么是VXLAN: https://support.huawei.com/enterprise/zh/doc/EDOC1100087027#ZH-CN_TOPIC_0254803606"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-zxfhz2r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-zxfhz2r"
					},
					"Children": [
						{
							"ID": "20221122154330-pw21i4d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-pw21i4d"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[8] 一文明白calico的IPIP网络模式: https://network.51cto.com/article/660965.html"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-ek3a5ns",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-ek3a5ns"
					},
					"Children": [
						{
							"ID": "20221122154330-law6mc8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-law6mc8"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[9] 使用 Go 从零开始实现 CNI：https://morven.life/posts/create-your-own-cni-with-golang/"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-i1fjo73",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-i1fjo73"
					},
					"Children": [
						{
							"ID": "20221122154330-r1wjwg3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-r1wjwg3"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[10] Switching from IP-in-IP to VXLAN： https://projectcalico.docs.tigera.io/getting-started/kubernetes/installation/config-options#customizing-calico-manifests"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-ittxt0g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-ittxt0g"
					},
					"Children": [
						{
							"ID": "20221122154330-abcekm8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-abcekm8"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[11] Troubleshooting Calico: https://github.com/apprenda/kismatic/blob/master/docs/troubleshooting-calico.md"
								}
							]
						}
					]
				},
				{
					"ID": "20221122154330-gaoswup",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221122154330-gaoswup"
					},
					"Children": [
						{
							"ID": "20221122154330-5kjw847",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221122154330-5kjw847"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "[12] The Calico datastore: https://projectcalico.docs.tigera.io/getting-started/kubernetes/hardway/the-calico-datastore"
								}
							]
						}
					]
				}
			]
		}
	]
}