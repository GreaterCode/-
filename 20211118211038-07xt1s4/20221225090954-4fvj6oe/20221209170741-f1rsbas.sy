{
	"ID": "20221209170741-f1rsbas",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221209170741-f1rsbas",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20221209170741-9bltj3b\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20221209172056-qx4s08f\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20221209170741-9bltj3b\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "Kubernetes针对资源紧缺处理方式的配置",
		"updated": "20221210031731"
	},
	"Children": [
		{
			"ID": "20221209170741-9bltj3b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209170741-9bltj3b",
				"updated": "20221209170816"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如何在资源紧缺的情况下，保证 Node 的稳定性，是 Kubelet 需要面对的一个重要的问题。尤其对于内存和磁盘这种不可压缩的资源，紧缺就相当于不稳定。"
				}
			]
		},
		{
			"ID": "20221209170947-pvp4hr3",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209170947-pvp4hr3",
				"updated": "20221209170959"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 驱逐策略"
				}
			]
		},
		{
			"ID": "20221209171014-1bst9m1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171014-1bst9m1",
				"updated": "20221209171014"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 能够监控资源消耗，来防止计算资源被耗尽。一旦出现资源紧缺的迹象，Kubelet 就会主动终止一或多个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://www.kubernetes.org.cn/tags/pod",
					"TextMarkTextContent": "Pod"
				},
				{
					"Type": "NodeText",
					"Data": " 的运行，以回收紧俏资源。当一个 Pod 被终止时，其中的容器会全部停止，Pod 状态会被置为 Failed。"
				}
			]
		},
		{
			"ID": "20221209171054-qy1i0qx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209171054-qy1i0qx",
				"updated": "20221209171105"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. 驱逐信号"
				}
			]
		},
		{
			"ID": "20221209171117-ecpndzd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171117-ecpndzd",
				"updated": "20221209171118"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下文中提到了一些信号，kubelet 能够利用这些信号作为决策依据来触发驱逐行为。描述列中的内容来自于 Kubelet summary API。"
				}
			]
		},
		{
			"ID": "20221209171203-hi44w4l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171203-hi44w4l",
				"updated": "20221209171204"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221209171204-083e0z1.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20221209171250-wcxezso",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171250-wcxezso",
				"updated": "20221209171250"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的每个信号都支持整数值或者百分比。百分比的分母部分就是各个信号的总量。kubelet 支持两种文件系统分区。"
				}
			]
		},
		{
			"ID": "20221209171250-hkcqcbl",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221209171250-hkcqcbl",
				"updated": "20221209171257"
			},
			"Children": [
				{
					"ID": "20221209171250-6uie07a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221209171250-6uie07a",
						"updated": "20221209171250"
					},
					"Children": [
						{
							"ID": "20221209171250-xqb8xsl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171250-xqb8xsl",
								"updated": "20221209171250"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "nodefs：保存 kubelet 的卷和守护进程日志等。"
								}
							]
						}
					]
				},
				{
					"ID": "20221209171250-td4ud7e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221209171250-td4ud7e",
						"updated": "20221209171257"
					},
					"Children": [
						{
							"ID": "20221209171250-f8dv4jl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171250-f8dv4jl",
								"updated": "20221209171257"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "tag",
									"TextMarkTextContent": "imagefs"
								},
								{
									"Type": "NodeText",
									"Data": "：在容器运行时，用于保存镜像以及可写入层。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209171250-9s6cotm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171250-9s6cotm",
				"updated": "20221209171250"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "imagefs 是可选的。Kubelet 能够利用 cAdvisor 自动发现这些文件系统。Kubelet 不关注其他的文件系统。所有其他类型的配置，例如保存在独立文件系统的卷和日志，都不被支持。"
				}
			]
		},
		{
			"ID": "20221209171250-dbgvi34",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171250-dbgvi34",
				"updated": "20221209171250"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为磁盘压力已经被驱逐策略接管，因此未来将会停止对现有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://kubernetes.io/docs/admin/garbage-collection/",
					"TextMarkTextContent": "垃圾收集"
				},
				{
					"Type": "NodeText",
					"Data": " 方式的支持。"
				}
			]
		},
		{
			"ID": "20221209171317-4wrbesq",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209171317-4wrbesq",
				"updated": "20221209171326"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. 驱逐阈值"
				}
			]
		},
		{
			"ID": "20221209171328-1fzb5cf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171328-1fzb5cf",
				"updated": "20221209171328"
			}
		},
		{
			"ID": "20221209171336-jkcn2jj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171336-jkcn2jj",
				"updated": "20221209171336"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦超出阈值，就会触发 kubelet 进行资源回收的动作。阈值的定义方式如下："
				}
			]
		},
		{
			"ID": "20221209171336-6qnqfuf",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209171336-6qnqfuf",
				"updated": "20221209171336"
			},
			"Children": [
				{
					"ID": "20221209171336-j6zqon4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171336-j6zqon4",
						"updated": "20221209171336"
					},
					"Children": [
						{
							"ID": "20221209171336-tnb6i2z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171336-tnb6i2z",
								"updated": "20221209171336"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "上面的表格中列出了可用的 eviction-signal."
								}
							]
						}
					]
				},
				{
					"ID": "20221209171336-f0a0ide",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171336-f0a0ide",
						"updated": "20221209171336"
					},
					"Children": [
						{
							"ID": "20221209171336-3jqsgcd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171336-3jqsgcd",
								"updated": "20221209171336"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "仅有一个 operator 可用：\u003c"
								}
							]
						}
					]
				},
				{
					"ID": "20221209171336-ot0y25u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171336-ot0y25u",
						"updated": "20221209171336"
					},
					"Children": [
						{
							"ID": "20221209171336-4s6ivf2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171336-4s6ivf2",
								"updated": "20221209171336"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "quantity 需要符合 Kubernetes 中的描述方式"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209171349-tcs1qmr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171349-tcs1qmr",
				"updated": "20221209171349"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如如果一个 Node 有 10Gi 内存，我们希望在可用内存不足 1Gi 时进行驱逐，就可以选取下面的一种方式来定义驱逐阈值："
				}
			]
		},
		{
			"ID": "20221209171349-urkyrzg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209171349-urkyrzg",
				"updated": "20221209171349"
			},
			"Children": [
				{
					"ID": "20221209171349-py98sx7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171349-py98sx7",
						"updated": "20221209171349"
					},
					"Children": [
						{
							"ID": "20221209171349-dgeti14",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171349-dgeti14",
								"updated": "20221209171349"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "memory.available\u003c10%"
								}
							]
						}
					]
				},
				{
					"ID": "20221209171349-ay76im6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171349-ay76im6",
						"updated": "20221209171349"
					},
					"Children": [
						{
							"ID": "20221209171349-g06vht6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171349-g06vht6",
								"updated": "20221209171349"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "memory.available\u003c1Gi"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209171412-ii5aso8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221209171412-ii5aso8",
				"updated": "20221209171420"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1 驱逐软阈值"
				}
			]
		},
		{
			"ID": "20221209171554-f0plwmq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171554-f0plwmq",
				"updated": "20221209171554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "软阈值需要和一个宽限期参数协同工作。当系统资源消耗达到软阈值时，这一状况的持续时间超过了宽限期之前，Kubelet 不会触发任何动作。如果没有定义宽限期，Kubelet 会拒绝启动。"
				}
			]
		},
		{
			"ID": "20221209171554-avcfpl0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171554-avcfpl0",
				"updated": "20221209171554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "另外还可以定义一个 Pod 结束的宽限期。如果定义了这一宽限期，那么 Kubelet 会使用pod.Spec.TerminationGracePeriodSeconds 和最大宽限期这两个值之间较小的那个（进行宽限），如果没有指定的话，kubelet 会不留宽限立即杀死 Pod。"
				}
			]
		},
		{
			"ID": "20221209171554-437dcbi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171554-437dcbi",
				"updated": "20221209171554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "软阈值的定义包括以下几个参数："
				}
			]
		},
		{
			"ID": "20221209171554-0i2y18e",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209171554-0i2y18e",
				"updated": "20221209171554"
			},
			"Children": [
				{
					"ID": "20221209171554-y141imo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171554-y141imo",
						"updated": "20221209171554"
					},
					"Children": [
						{
							"ID": "20221209171554-i7d9e2a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171554-i7d9e2a",
								"updated": "20221209171554"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "eviction-soft：描述一套驱逐阈值（例如 memory.available\u003c1.5Gi ），如果满足这一条件的持续时间超过宽限期，就会触发对 Pod 的驱逐动作。"
								}
							]
						}
					]
				},
				{
					"ID": "20221209171554-qnnlevq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171554-qnnlevq",
						"updated": "20221209171554"
					},
					"Children": [
						{
							"ID": "20221209171554-qyk3yck",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171554-qyk3yck",
								"updated": "20221209171554"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "eviction-soft-grace-period：包含一套驱逐宽限期（例如 memory.available=1m30s），用于定义达到软阈值之后，持续时间超过多久才进行驱逐。"
								}
							]
						}
					]
				},
				{
					"ID": "20221209171554-6pqee1m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171554-6pqee1m",
						"updated": "20221209171554"
					},
					"Children": [
						{
							"ID": "20221209171554-wlyjy1w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171554-wlyjy1w",
								"updated": "20221209171554"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "eviction-max-pod-grace-period：在因为达到软阈值之后，到驱逐一个 Pod 之前的最大宽限时间（单位是秒），"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209171421-is08kwr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221209171421-is08kwr",
				"updated": "20221209171433"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2 驱逐硬阈值"
				}
			]
		},
		{
			"ID": "20221209171741-qqjus98",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171741-qqjus98",
				"updated": "20221209171741"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "硬阈值没有宽限期，如果达到了硬阈值，kubelet 会立即杀掉 Pod 并进行资源回收。"
				}
			]
		},
		{
			"ID": "20221209171741-2sejke1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171741-2sejke1",
				"updated": "20221209171741"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "硬阈值的定义："
				}
			]
		},
		{
			"ID": "20221209171741-zongxj1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209171741-zongxj1",
				"updated": "20221209171741"
			},
			"Children": [
				{
					"ID": "20221209171741-dffti80",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209171741-dffti80",
						"updated": "20221209171741"
					},
					"Children": [
						{
							"ID": "20221209171741-fn31jy6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209171741-fn31jy6",
								"updated": "20221209171741"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "eviction-hard：描述一系列的驱逐阈值（比如说 memory.available\u003c1Gi），一旦达到这一阈值，就会触发对 Pod 的驱逐，缺省的硬阈值定义是："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209171741-vvn84r2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209171741-vvn84r2",
				"updated": "20221209171741"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "–eviction-hard=memory.available\u003c100Mi"
				}
			]
		},
		{
			"ID": "20221209171748-tosnm2y",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209171748-tosnm2y",
				"updated": "20221209171808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. 驱逐频率监控"
				}
			]
		},
		{
			"ID": "20221209172025-3unw0gr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172025-3unw0gr",
				"updated": "20221209172025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Housekeeping interval 参数定义一个时间间隔，Kubelet 每隔这一段就会对驱逐阈值进行评估。"
				}
			]
		},
		{
			"ID": "20221209172025-7gg9x4k",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209172025-7gg9x4k",
				"updated": "20221209172025"
			},
			"Children": [
				{
					"ID": "20221209172025-f351rm4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172025-f351rm4",
						"updated": "20221209172025"
					},
					"Children": [
						{
							"ID": "20221209172025-78e5uit",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172025-78e5uit",
								"updated": "20221209172025"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "housekeeping-interval：容器检查的时间间隔。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209172029-z0roqtl",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209172029-z0roqtl",
				"updated": "20221209172046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5. 节点状况"
				}
			]
		},
		{
			"ID": "20221209172056-qfjagpj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172056-qfjagpj",
				"updated": "20221209172056"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 会把驱逐信号跟节点状况对应起来。"
				}
			]
		},
		{
			"ID": "20221209172056-qx4s08f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172056-qx4s08f",
				"updated": "20221209172056"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果触发了硬阈值，或者符合软阈值的时间持续了与其对应的宽限期，Kubelet 就会认为当前节点压力太大，下面的节点状态定义描述了这种对应关系。"
				}
			]
		},
		{
			"ID": "20221209172111-25cumrr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172111-25cumrr",
				"updated": "20221209172113"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221209172113-3tbfsrg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20221209172115-jwyl3mg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172115-jwyl3mg",
				"updated": "20221209172121"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 会持续报告节点状态的更新过程，这一频率由参数 –node-status-update-frequency 指定，缺省情况下取值为 10s。"
				}
			]
		},
		{
			"ID": "20221209172703-k0i7tqi",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209172703-k0i7tqi",
				"updated": "20221209172706"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6. 节点状况波动"
				}
			]
		},
		{
			"ID": "20221209172247-my58ov2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172247-my58ov2",
				"updated": "20221209172247"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果一个节点的状况在软阈值的上下波动，但是又不会超过他的宽限期，将会导致该节点的状态持续的在是否之间徘徊，最终会影响降低调度的决策过程。"
				}
			]
		},
		{
			"ID": "20221209172247-4b5807l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172247-4b5807l",
				"updated": "20221209172247"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要防止这种状况，下面的标志可以用来通知 Kubelet，在脱离压力状态之前，必须等待。"
				}
			]
		},
		{
			"ID": "20221209172247-46o6hhg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172247-46o6hhg",
				"updated": "20221209172247"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "eviction-pressure-transition-period 定义了在跳出压力状态之前要等待的时间。"
				}
			]
		},
		{
			"ID": "20221209172247-q9nhzbg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172247-q9nhzbg",
				"updated": "20221209172350"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 在把压力状态设置为 False 之前，会确认在周期之内，该节点没有达到逐出阈值。"
				}
			]
		},
		{
			"ID": "20221209172713-1turs2y",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209172713-1turs2y",
				"updated": "20221209172717"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7. 回收节点级别资源"
				}
			]
		},
		{
			"ID": "20221209172410-0is8zjg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172410-0is8zjg",
				"updated": "20221209172410"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果达到了驱逐阈值，并且超出了宽限期，那么 Kubelet 会开始回收超出限量的资源，直到驱逐信号量回到阈值以内。"
				}
			]
		},
		{
			"ID": "20221209172410-6200fsv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172410-6200fsv",
				"updated": "20221209172410"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 在驱逐用户 Pod 之前，会尝试回收节点级别的资源。如果服务器为容器定义了独立的 imagefs，他的回收过程会有所不同。"
				}
			]
		},
		{
			"ID": "20221209172430-wc0iwcd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221209172430-wc0iwcd",
				"updated": "20221209172430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有 Imagefs"
				}
			]
		},
		{
			"ID": "20221209172430-f8jshv2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172430-f8jshv2",
				"updated": "20221209172430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 nodefs 文件系统到达了驱逐阈值，kubelet 会按照下面的顺序来清理空间。"
				}
			]
		},
		{
			"ID": "20221209172430-zj6ohns",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209172430-zj6ohns",
				"updated": "20221209172512"
			},
			"Children": [
				{
					"ID": "20221209172512-bwe96s1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172512-bwe96s1",
						"updated": "20221209172512"
					},
					"Children": [
						{
							"ID": "20221209172512-6crao94",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172512-6crao94",
								"updated": "20221209172512"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除死掉的 Pod/容器"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209172430-shq2pwo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172430-shq2pwo",
				"updated": "20221209172430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 imagefs 文件系统到达了驱逐阈值，kubelet 会按照下面的顺序来清理空间。"
				}
			]
		},
		{
			"ID": "20221209172430-rdfh763",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209172430-rdfh763",
				"updated": "20221209172516"
			},
			"Children": [
				{
					"ID": "20221209172516-x29nxzx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172516-x29nxzx",
						"updated": "20221209172516"
					},
					"Children": [
						{
							"ID": "20221209172516-jk4it0n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172516-jk4it0n",
								"updated": "20221209172516"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删掉所有无用镜像"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209172453-a4gh8sc",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221209172453-a4gh8sc",
				"updated": "20221209172453"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "没有 Imagefs"
				}
			]
		},
		{
			"ID": "20221209172453-pp9ft4r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172453-pp9ft4r",
				"updated": "20221209172453"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 nodefs 文件系统到达了驱逐阈值，kubelet 会按照下面的顺序来清理空间。"
				}
			]
		},
		{
			"ID": "20221209172453-97kuyhr",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221209172453-97kuyhr",
				"updated": "20221209172453"
			},
			"Children": [
				{
					"ID": "20221209172453-ibcnft7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221209172453-ibcnft7",
						"updated": "20221209172453"
					},
					"Children": [
						{
							"ID": "20221209172453-i3fsuew",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172453-i3fsuew",
								"updated": "20221209172453"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除死掉的 Pod/容器"
								}
							]
						}
					]
				},
				{
					"ID": "20221209172453-4tpql8j",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221209172453-4tpql8j",
						"updated": "20221209172453"
					},
					"Children": [
						{
							"ID": "20221209172453-cxvnppy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172453-cxvnppy",
								"updated": "20221209172453"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删掉所有无用镜像"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209172805-xzod6bm",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221209172805-xzod6bm",
				"updated": "20221209172812"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8. 驱逐用户Pod"
				}
			]
		},
		{
			"ID": "20221209172821-nkwry3g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172821-nkwry3g",
				"updated": "20221209172821"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 Kubelet 无法获取到足够的资源，就会开始驱逐 Pod。"
				}
			]
		},
		{
			"ID": "20221209172821-i00atsk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172821-i00atsk",
				"updated": "20221209172821"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 会按照下面的标准对 Pod 的驱逐行为进行评判："
				}
			]
		},
		{
			"ID": "20221209172821-4b4bum0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209172821-4b4bum0",
				"updated": "20221209172821"
			},
			"Children": [
				{
					"ID": "20221209172821-mbh4rys",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172821-mbh4rys",
						"updated": "20221209172821"
					},
					"Children": [
						{
							"ID": "20221209172821-8jqv0b9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172821-8jqv0b9",
								"updated": "20221209172821"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "根据服务质量"
								}
							]
						}
					]
				},
				{
					"ID": "20221209172821-0sed3dc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172821-0sed3dc",
						"updated": "20221209172821"
					},
					"Children": [
						{
							"ID": "20221209172821-9xnhnfc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172821-9xnhnfc",
								"updated": "20221209172821"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "根据 Pod 调度请求的被耗尽资源的消耗量"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209172833-qs6i5sr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172833-qs6i5sr",
				"updated": "20221209172833"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来，Pod 按照下面的顺序进行驱逐："
				}
			]
		},
		{
			"ID": "20221209172833-l6uq1vm",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209172833-l6uq1vm",
				"updated": "20221209172833"
			},
			"Children": [
				{
					"ID": "20221209172833-y2j8973",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172833-y2j8973",
						"updated": "20221209172833"
					},
					"Children": [
						{
							"ID": "20221209172833-gc8mhoh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172833-gc8mhoh",
								"updated": "20221209172833"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "BestEffort：消耗最多紧缺资源的 Pod 最先失败。"
								}
							]
						}
					]
				},
				{
					"ID": "20221209172833-f5mqqux",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172833-f5mqqux",
						"updated": "20221209172833"
					},
					"Children": [
						{
							"ID": "20221209172833-1v9l2on",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172833-1v9l2on",
								"updated": "20221209172833"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Burstable：相对请求（request）最多紧缺资源的 Pod 最先被驱逐，如果没有 Pod 超出他们的请求，策略会瞄准紧缺资源消耗量最大的 Pod。"
								}
							]
						}
					]
				},
				{
					"ID": "20221209172833-gv5kzih",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172833-gv5kzih",
						"updated": "20221209172833"
					},
					"Children": [
						{
							"ID": "20221209172833-6fzan6o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172833-6fzan6o",
								"updated": "20221209172833"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Guaranteed：相对请求（request）最多紧缺资源的 Pod 最先被驱逐，如果没有 Pod 超出他们的请求，策略会瞄准紧缺资源消耗量最大的 Pod。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209172902-8i3y55g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-8i3y55g",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Guaranteed Pod 绝不会因为其他 Pod 的资源消费被驱逐。如果系统进程（例如 kubelet、docker、journald 等）消耗了超出 system-reserved 或者 kube-reserved 的资源，而且这一节点上只运行了 Guaranteed Pod，那么为了保证节点的稳定性并降低异常消费对其他 Guaranteed Pod 的影响，必须选择一个 Guaranteed Pod 进行驱逐。"
				}
			]
		},
		{
			"ID": "20221209172902-r9l26r8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-r9l26r8",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本地磁盘是一个 BestEffort 资源。如有必要，kubelet 会在 DiskPressure 的情况下，kubelet 会按照 QoS 进行评估。如果 Kubelet 判定缺乏 inode 资源，就会通过驱逐最低 QoS 的 Pod 的方式来回收 inodes。如果 kubelet 判定缺乏磁盘空间，就会通过在相同 QoS 的 Pods 中，选择消耗最多磁盘空间的 Pod 进行驱逐。"
				}
			]
		},
		{
			"ID": "20221209172902-cew49jl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221209172902-cew49jl",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有 Imagefs"
				}
			]
		},
		{
			"ID": "20221209172902-t6g7sgr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-t6g7sgr",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 nodefs 触发了驱逐，Kubelet 会用 nodefs 的使用对 Pod 进行排序 – Pod 中所有容器的本地卷和日志。"
				}
			]
		},
		{
			"ID": "20221209172902-0z81iey",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-0z81iey",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 imagefs 触发了驱逐，Kubelet 会根据 Pod 中所有容器的消耗的可写入层进行排序。"
				}
			]
		},
		{
			"ID": "20221209172902-42pdesy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221209172902-42pdesy",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "没有 Imagefs"
				}
			]
		},
		{
			"ID": "20221209172902-nqj1szp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-nqj1szp",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 nodefs 触发了驱逐，Kubelet 会对各个 Pod 的所有容器的总体磁盘消耗进行排序 —— 本地卷 + 日志 + 写入层。"
				}
			]
		},
		{
			"ID": "20221209172902-jy3p2bi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-jy3p2bi",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在某些场景下，驱逐 Pod 可能只回收了很少的资源。这就导致了 kubelet 反复触发驱逐阈值。另外回收资源例如磁盘资源，是需要消耗时间的。"
				}
			]
		},
		{
			"ID": "20221209172902-s6mwok9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-s6mwok9",
				"updated": "20221210020456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要缓和这种状况，Kubelet 能够对每种资源定义 minimum-reclaim（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "表示每一次eviction必须至少回收多少资源"
				},
				{
					"Type": "NodeText",
					"Data": "）。kubelet 一旦发现了资源压力，就会试着回收至少 minimum-reclaim 的资源，使得资源消耗量回到期望范围。"
				}
			]
		},
		{
			"ID": "20221209172902-32fafi2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-32fafi2",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如下面的配置："
				}
			]
		},
		{
			"ID": "20221209172902-b5ihyrv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221209172902-b5ihyrv",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--eviction-hard=memory.available\u003c500Mi,nodefs.available\u003c1Gi,imagefs.available\u003c100Gi\n--eviction-minimum-reclaim=\"memory.available=0Mi,nodefs.available=500Mi,imagefs.available=2Gi\"`\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221209172902-ello061",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221209172902-ello061",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"ID": "20221209172902-h2qtnkv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172902-h2qtnkv",
						"updated": "20221209172902"
					},
					"Children": [
						{
							"ID": "20221209172902-26390ll",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172902-26390ll",
								"updated": "20221209172902"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 memory.available 被触发，Kubelet 会启动回收，让 memory.available 至少有 500Mi。"
								}
							]
						}
					]
				},
				{
					"ID": "20221209172902-irl97ro",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172902-irl97ro",
						"updated": "20221209172902"
					},
					"Children": [
						{
							"ID": "20221209172902-wzr57at",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172902-wzr57at",
								"updated": "20221209172902"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果是 nodefs.available，Kubelet 就要想法子让 nodefs.available 回到至少 1.5Gi。"
								}
							]
						}
					]
				},
				{
					"ID": "20221209172902-ean8ahp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221209172902-ean8ahp",
						"updated": "20221209172902"
					},
					"Children": [
						{
							"ID": "20221209172902-9961aq6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221209172902-9961aq6",
								"updated": "20221209172902"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "而对于 imagefs.available， kubelet 就要回收到最少 102Gi。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221209172902-0b0kpcc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221209172902-0b0kpcc",
				"updated": "20221209172902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缺省情况下，所有资源的 eviction-minimum-reclaim 为 0。"
				}
			]
		},
		{
			"ID": "20221210021644-01zac5d",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221210021644-01zac5d",
				"updated": "20221210021700"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "9.  调度器"
				}
			]
		},
		{
			"ID": "20221210021706-b8kwy39",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021706-b8kwy39",
				"updated": "20221210021711"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在节点资源紧缺的情况下，节点会报告这一状况。调度器以此为信号，不再继续向此节点部署新的 Pod。"
				}
			]
		},
		{
			"ID": "20221210021728-q3taui6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021728-q3taui6",
				"updated": "20221210021729"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221210021729-8h2mdtg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20221210021730-b91xhhb",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221210021730-b91xhhb",
				"updated": "20221210021742"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "10. 节点OOM行为"
				}
			]
		},
		{
			"ID": "20221210021748-iyzufpi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021748-iyzufpi",
				"updated": "20221210021748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果节点在 Kubelet 能够回收内存之前，遭遇到了系统的 OOM (内存不足)，节点就依赖oom_killer 进行响应了。"
				}
			]
		},
		{
			"ID": "20221210021748-9p7ry7b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021748-9p7ry7b",
				"updated": "20221210021748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kubelet 根据 Pod 的 QoS 为每个容器设置了一个 oom_score_adj 值。"
				}
			]
		},
		{
			"ID": "20221210021845-ggcy6ro",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021845-ggcy6ro",
				"updated": "20221210021846"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221210021846-929as61.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20221210021814-rguipdd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021814-rguipdd",
				"updated": "20221210021814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 kubelet 无法在系统 OOM 之前回收足够的内存，oom_killer 就会根据根据内存使用比率来计算 oom_score，得出结果和 oom_score_adj 相加，最后得分最高的 Pod 会被首先驱逐。"
				}
			]
		},
		{
			"ID": "20221210021814-sgyazzg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021814-sgyazzg",
				"updated": "20221210021814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这一行为的思路是，QoS 最低，相对于调度的 Reqeust 来说又消耗最多内存的 Pod 会被首先清除，来保障内存的回收。"
				}
			]
		},
		{
			"ID": "20221210021814-ho73d6w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021814-ho73d6w",
				"updated": "20221210021814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跟 Pod 驱逐不同，如果一个 Pod 的容器被 OOM 杀掉，他是可能被 kubelet 根据 RestartPolicy重启的。"
				}
			]
		},
		{
			"ID": "20221210021909-ewnew4i",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221210021909-ewnew4i",
				"updated": "20221210021929"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "11. 最佳实践"
				}
			]
		},
		{
			"ID": "20221210021949-1e0k1lo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221210021949-1e0k1lo",
				"updated": "20221210021949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可调度的资源和驱逐策略"
				}
			]
		},
		{
			"ID": "20221210021949-jcgh3cp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021949-jcgh3cp",
				"updated": "20221210021949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们想象如下的场景："
				}
			]
		},
		{
			"ID": "20221210021949-3910se6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221210021949-3910se6",
				"updated": "20221210021957"
			},
			"Children": [
				{
					"ID": "20221210021949-qkwot8v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221210021949-qkwot8v",
						"updated": "20221210021949"
					},
					"Children": [
						{
							"ID": "20221210021949-pyqbmza",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221210021949-pyqbmza",
								"updated": "20221210021949"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "节点内存容量：10Gi"
								}
							]
						}
					]
				},
				{
					"ID": "20221210021949-gwwpp3z",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221210021949-gwwpp3z",
						"updated": "20221210021956"
					},
					"Children": [
						{
							"ID": "20221210021949-mt5gw3h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221210021949-mt5gw3h",
								"updated": "20221210021956"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "u",
									"TextMarkTextContent": "保留"
								},
								{
									"Type": "NodeText",
									"Data": " 10% 的内存容量给系统服务（内核，kubelet 等）。"
								}
							]
						}
					]
				},
				{
					"ID": "20221210021949-5mzt0kv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221210021949-5mzt0kv",
						"updated": "20221210021957"
					},
					"Children": [
						{
							"ID": "20221210021949-p98oucj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221210021949-p98oucj",
								"updated": "20221210021957"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "s",
									"TextMarkTextContent": "在"
								},
								{
									"Type": "NodeText",
									"Data": " 95% 内存使用率的时候驱逐 Pod，来降低系统 OOM 的发生率。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221210021949-oq2ibxs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021949-oq2ibxs",
				"updated": "20221210021949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以我们用这样的参数启动 Kubelet："
				}
			]
		},
		{
			"ID": "20221210021949-i1tkvfb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221210021949-i1tkvfb",
				"updated": "20221210021949"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--eviction-hard=memory.available\u003c500Mi\n--system-reserved=memory=1.5Gi\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221210021949-08yvk8f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021949-08yvk8f",
				"updated": "20221210021949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个配置中隐含了一个设定就是，系统保留涵盖了驱逐标准。"
				}
			]
		},
		{
			"ID": "20221210021949-sxv0w4l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021949-sxv0w4l",
				"updated": "20221210021949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要达到这一容量，可能是有的 Pod 使用了超出其请求的数量，或者系统占用了超过 500Mi。"
				}
			]
		},
		{
			"ID": "20221210021949-g6yiss7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210021949-g6yiss7",
				"updated": "20221210021949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样的配置保证了调度器不会向即将发生内存压力的节点分配 Pod，避免触发驱逐。"
				}
			]
		},
		{
			"ID": "20221210022100-90r4j6n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221210022100-90r4j6n",
				"updated": "20221210022119"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "11.  DaemonSet"
				}
			]
		},
		{
			"ID": "20221210022129-ymfpm02",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210022129-ymfpm02",
				"updated": "20221210022129"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为 DaemonSet 中的 Pod 会立即重建到同一个节点，所以 Kubelet 不应驱逐 DaemonSet 中的 Pod。"
				}
			]
		},
		{
			"ID": "20221210022129-9fs885w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210022129-9fs885w",
				"updated": "20221210022139"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是目前 Kubelet 无法分辨一个 Pod 是否由 DaemonSet 创建。如果当 Kubelet 能够识别这一点，那么就可以先从驱逐候选列表中过滤掉 DaemonSet 的 Pod。"
				}
			]
		},
		{
			"ID": "20221210022129-lju7w5k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210022129-lju7w5k",
				"updated": "20221210022129"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般来说，强烈建议 DaemonSet 不要创建 BestEffort Pod，而是使用 Guaranteed Pod，来避免进入驱逐候选列表。"
				}
			]
		},
		{
			"ID": "20221210031558-tbuc651",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221210031558-tbuc651",
				"updated": "20221210031606"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "12.  弃用的现存回收磁盘的选项"
				}
			]
		},
		{
			"ID": "20221210031614-egim58c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210031614-egim58c",
				"updated": "20221210031614"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了保证节点的稳定性，Kubelet 已经尝试来释放磁盘空间了。"
				}
			]
		},
		{
			"ID": "20221210031614-g2ur5wx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210031614-g2ur5wx",
				"updated": "20221210031614"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为基于磁盘的驱逐方式已经成熟，下列的 Kubelet 参数会被标记为弃用。"
				}
			]
		},
		{
			"ID": "20221210031638-zihoyzo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210031638-zihoyzo",
				"updated": "20221210031638"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221210031638-0lidurt.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20221210031653-r16y7ch",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221210031653-r16y7ch",
				"updated": "20221210031731"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "13. 已知问题"
				}
			]
		},
		{
			"ID": "20221210031703-dkhv3bk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221210031703-dkhv3bk",
				"updated": "20221210031703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 无法及时观测到内存压力"
				}
			]
		},
		{
			"ID": "20221210031703-0v2ujkd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210031703-0v2ujkd",
				"updated": "20221210031703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 目前从 cAdvisor 定时获取内存使用状况统计。如果内存使用在这个时间段内发生了快速增长，Kubelet 就无法观察到 MemoryPressure，可能会触发 OOMKiller。我们正在尝试将这一过程集成到 memcg 通知 API 中，来降低这一延迟，而不是让内核首先发现这一情况。"
				}
			]
		},
		{
			"ID": "20221210031703-j3l71op",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210031703-j3l71op",
				"updated": "20221210031703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果用户不是希望获得终极使用率，而是作为一个过量使用的衡量方式，对付这一个问题的较为可靠的方式就是设置驱逐阈值为 75% 容量。这样就提高了避开 OOM 的能力，提高了驱逐的标准，有助于集群状态的平衡。"
				}
			]
		},
		{
			"ID": "20221210031703-4ckqhzu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221210031703-4ckqhzu",
				"updated": "20221210031703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 可能驱逐超出需要的更多 Pod"
				}
			]
		},
		{
			"ID": "20221210031703-m5c86ai",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210031703-m5c86ai",
				"updated": "20221210031703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这也是因为状态搜集的时间差导致的。未来会加入功能，让根容器的统计频率和其他容器分别开来（https://github.com/google/cadvisor/issues/1247）。"
				}
			]
		},
		{
			"ID": "20221210031703-85f0you",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221210031703-85f0you",
				"updated": "20221210031703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubelet 如何在 inode 耗尽的时候评价 Pod 的驱逐"
				}
			]
		},
		{
			"ID": "20221210031703-7qw8j74",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221210031703-7qw8j74",
				"updated": "20221210031703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目前不可能知道一个容器消耗了多少 inode。如果 Kubelet 觉察到了 inode 耗尽，他会利用 QoS 对 Pod 进行驱逐评估。在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/google/cadvisor/issues/1422",
					"TextMarkTextContent": "cadvisor 中有一个 issue"
				},
				{
					"Type": "NodeText",
					"Data": "，来跟踪容器的 inode 消耗，这样我们就能利用 inode 进行评估了。例如如果我们知道一个容器创建了大量的 0 字节文件，就会优先驱逐这一 Pod。"
				}
			]
		}
	]
}