{
	"ID": "20230903123319-6p31ikw",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230903123319-6p31ikw",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230903123319-zwmq3u4\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230904084800-puusz12\u0026quot;,\u0026quot;scrollTop\u0026quot;:2065,\u0026quot;focusId\u0026quot;:\u0026quot;20230904084800-ftpbrmj\u0026quot;,\u0026quot;focusStart\u0026quot;:35,\u0026quot;focusEnd\u0026quot;:35}",
		"title": "3. 合理设置 Request 与 Limit",
		"updated": "20230904084800"
	},
	"Children": [
		{
			"ID": "20230903123319-zwmq3u4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230903123319-zwmq3u4",
				"updated": "20230903123522"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如何为容器配置 Request 与 Limit? 这个根据服务类型，需求与场景的不同而不同，没有固定的答案，这里结合生产经验总结了一些最佳实践，可以作为参考。"
				}
			]
		},
		{
			"ID": "20230903123423-mwp5gs1",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230903123423-mwp5gs1",
				"updated": "20230903123506"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 所有容器都应该设置request"
				}
			]
		},
		{
			"ID": "20230903123544-f44hvj1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230903123544-f44hvj1",
				"updated": "20230903123544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "request 的值并不是指给容器实际分配的资源大小，它仅仅是给调度器看的，调度器会 \"观察\" 每个节点可以用于分配的资源有多少，也知道每个节点已经被分配了多少资源。被分配资源的大小就是节点上所有 Pod 中定义的容器 request 之和，它可以计算出节点剩余多少资源可以被分配(可分配资源减去已分配的 request 之和)。如果发现节点剩余可分配资源大小比当前要被调度的 Pod 的 reuqest 还小，那么就不会考虑调度到这个节点，反之，才可能调度。所以，如果不配置 request，那么调度器就不能知道节点大概被分配了多少资源出去，调度器得不到准确信息，也就无法做出合理的调度决策，很容易造成调度不合理，有些节点可能很闲，而有些节点可能很忙，甚至 NotReady。"
				}
			]
		},
		{
			"ID": "20230903123544-99mbdl1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230903123544-99mbdl1",
				"updated": "20230903123544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以，建议是给所有容器都设置 request，让调度器感知节点有多少资源被分配了，以便做出合理的调度决策，让集群节点的资源能够被合理的分配使用，避免陷入资源分配不均导致一些意外发生。"
				}
			]
		},
		{
			"ID": "20230903123548-oxltadn",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230903123548-oxltadn",
				"updated": "20230903123712"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. CPU request与limit的一般性建议"
				}
			]
		},
		{
			"ID": "20230903123717-ibuy6rg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230903123717-ibuy6rg",
				"updated": "20230903123717"
			},
			"Children": [
				{
					"ID": "20230903123717-zvjmt68",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230903123717-zvjmt68",
						"updated": "20230903123717"
					},
					"Children": [
						{
							"ID": "20230903123717-xenytvv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230903123717-xenytvv",
								"updated": "20230903123717"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果不确定应用最佳的 CPU 限制，可以不设置 CPU limit，参考: "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-cpu-time-9eff74d3161b",
									"TextMarkTextContent": "Understanding resource limits in kubernetes: cpu time"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20230903123717-fy1rzt7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230903123717-fy1rzt7",
						"updated": "20230903123717"
					},
					"Children": [
						{
							"ID": "20230903123717-0m5pso4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230903123717-0m5pso4",
								"updated": "20230903123717"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果要设置 CPU request，大多可以设置到不大于 1 核，除非是 CPU 密集型应用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230903123803-n32g719",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230903123803-n32g719",
				"updated": "20230903124046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. 忘记设置怎么办"
				}
			]
		},
		{
			"ID": "20230903124025-tlyarvz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230903124025-tlyarvz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有时候我们会忘记给部分容器设置 request 与 limit，其实我们可以使用 LimitRange 来设置 namespace 的默认 request 与 limit 值，同时它也可以用来限制最小和最大的 request 与 limit。 示例:"
				}
			]
		},
		{
			"ID": "20230903124055-zsav84a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230903124055-zsav84a",
				"updated": "20230903124058"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\n  namespace: test\nspec:\n  limits:\n  - default:\n      memory: 512Mi\n      cpu: 500m\n    defaultRequest:\n      memory: 256Mi\n      cpu: 100m\n    type: Container\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230903123804-cdh09jm",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230903123804-cdh09jm",
				"updated": "20230903125222"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://imroc.cc/kubernetes/best-practices/request-limit.html#%E9%87%8D%E8%A6%81%E7%9A%84%E7%BA%BF%E4%B8%8A%E5%BA%94%E7%94%A8%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE",
					"TextMarkTextContent": "重要的线上应用该如何设置"
				}
			]
		},
		{
			"ID": "20230903125244-ir82cy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230903125244-ir82cy8",
				"updated": "20230903125250"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "节点资源不足时，会触发自动驱逐，将一些低优先级的 Pod 删除掉以释放资源让节点自愈。没有设置 request，limit 的 Pod 优先级最低，容易被驱逐；request 不等于 limit 的其次； request 等于 limit 的 Pod 优先级较高，不容易被驱逐。所以如果是重要的线上应用，不希望在节点故障时被驱逐导致线上业务受影响，就建议将 request 和 limit 设成一致。"
				}
			]
		},
		{
			"ID": "20230904084355-3h3qq9w",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230904084355-3h3qq9w",
				"updated": "20230904084358"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://imroc.cc/kubernetes/best-practices/request-limit.html#%E6%80%8E%E6%A0%B7%E8%AE%BE%E7%BD%AE%E6%89%8D%E8%83%BD%E6%8F%90%E9%AB%98%E8%B5%84%E6%BA%90%E5%88%A9%E7%94%A8%E7%8E%87",
					"TextMarkTextContent": "怎样设置才能提高资源利用率?"
				}
			]
		},
		{
			"ID": "20230904084432-3xqaj66",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230904084432-3xqaj66",
				"updated": "20230904084432"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果给给你的应用设置较高的 request 值，而实际占用资源长期远小于它的 request 值，导致节点整体的资源利用率较低。当然这对时延非常敏感的业务除外，因为敏感的业务本身不期望节点利用率过高，影响网络包收发速度。所以对一些非核心，并且资源不长期占用的应用，可以适当减少 request 以提高资源利用率。"
				}
			]
		},
		{
			"ID": "20230904084432-xm5px4c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230904084432-xm5px4c",
				"updated": "20230904084432"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你的服务支持水平扩容，单副本的 request 值一般可以设置到不大于 1 核，CPU 密集型应用除外。比如 coredns，设置到 0.1 核就可以，即 100m。"
				}
			]
		},
		{
			"ID": "20230904084437-pp9la7s",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230904084437-pp9la7s",
				"updated": "20230904084441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://imroc.cc/kubernetes/best-practices/request-limit.html#%E5%B0%BD%E9%87%8F%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E8%BF%87%E5%A4%A7%E7%9A%84-request-%E4%B8%8E-limit",
					"TextMarkTextContent": "尽量避免使用过大的 request 与 limit"
				}
			]
		},
		{
			"ID": "20230904084502-n88s701",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230904084502-n88s701",
				"updated": "20230904084502"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你的服务使用单副本或者少量副本，给很大的 request 与 limit，让它分配到足够多的资源来支撑业务，那么某个副本故障对业务带来的影响可能就比较大，并且由于 request 较大，当集群内资源分配比较碎片化，如果这个 Pod 所在节点挂了，其它节点又没有一个有足够的剩余可分配资源能够满足这个 Pod 的 request 时，这个 Pod 就无法实现漂移，也就不能自愈，加重对业务的影响。"
				}
			]
		},
		{
			"ID": "20230904084502-kdw4lg9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230904084502-kdw4lg9",
				"updated": "20230904084502"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相反，建议尽量减小 request 与 limit，通过增加副本的方式来对你的服务支撑能力进行水平扩容，让你的系统更加灵活可靠。"
				}
			]
		},
		{
			"ID": "20230904084547-kdupkod",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230904084547-kdupkod",
				"updated": "20230904084557"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://imroc.cc/kubernetes/best-practices/request-limit.html#%E9%81%BF%E5%85%8D%E6%B5%8B%E8%AF%95-namespace-%E6%B6%88%E8%80%97%E8%BF%87%E5%A4%9A%E8%B5%84%E6%BA%90%E5%BD%B1%E5%93%8D%E7%94%9F%E4%BA%A7%E4%B8%9A%E5%8A%A1",
					"TextMarkTextContent": "避免测试 namespace 消耗过多资源影响生产业务"
				}
			]
		},
		{
			"ID": "20230904084615-voj70he",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230904084615-voj70he",
				"updated": "20230904084615"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "若生产集群有用于测试的 namespace，如果不加以限制，可能导致集群负载过高，从而影响生产业务。可以使用 ResourceQuota 来限制测试 namespace 的 request 与 limit 的总大小。 示例:"
				}
			]
		},
		{
			"ID": "20230904084630-au3rzes",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230904084630-au3rzes",
				"updated": "20230904084641"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: quota-test\n  namespace: test\nspec:\n  hard:\n    requests.cpu: \"1\"\n    requests.memory: 1Gi\n    limits.cpu: \"2\"\n    limits.memory: 2Gi\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230904084654-n9opz79",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230904084654-n9opz79",
				"updated": "20230904084659"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "8. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://imroc.cc/kubernetes/best-practices/request-limit.html#%E4%B8%BA%E4%BB%80%E4%B9%88-cpu-%E5%88%A9%E7%94%A8%E7%8E%87%E8%BF%9C%E4%B8%8D%E5%88%B0-limit-%E8%BF%98%E4%BC%9A%E8%A2%AB-throttle-",
					"TextMarkTextContent": "为什么 CPU 利用率远不到 limit 还会被 throttle ?"
				}
			]
		},
		{
			"ID": "20230904084724-rufm3he",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230904084724-rufm3he",
				"updated": "20230904084725"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CPU 限流是因为内核使用 CFS 调度算法，对于微突发场景，在一个 CPU 调度周期内 (100ms) 所占用的时间超过了 limit 还没执行完，就会强制 \"抢走\" CPU 使用权(throttle)，等待下一个周期再执行，但是时间拉长一点，进程使用 CPU 所占用的时间比例却很低，监控上就看不出来 CPU 有突增，但实际上又被 throttle 了。"
				}
			]
		},
		{
			"ID": "20230904084732-78oevg6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230904084732-78oevg6",
				"updated": "20230904084733"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更多详细解释参考 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://zhuanlan.zhihu.com/p/433065108",
					"TextMarkTextContent": "k8s CPU limit和throttling的迷思"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230904084737-np1i6zm",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230904084737-np1i6zm",
				"updated": "20230904084741"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "9. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://imroc.cc/kubernetes/best-practices/request-limit.html#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99",
					"TextMarkTextContent": "参考资料"
				}
			]
		},
		{
			"ID": "20230904084800-puusz12",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230904084800-puusz12",
				"updated": "20230904084800"
			},
			"Children": [
				{
					"ID": "20230904084800-mxyj65f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230904084800-mxyj65f",
						"updated": "20230904084800"
					},
					"Children": [
						{
							"ID": "20230904084800-ro949g7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230904084800-ro949g7",
								"updated": "20230904084800"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://sysdig.com/blog/kubernetes-limits-requests/",
									"TextMarkTextContent": "Understanding Kubernetes limits and requests by example"
								}
							]
						}
					]
				},
				{
					"ID": "20230904084800-dsnfam6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230904084800-dsnfam6",
						"updated": "20230904084800"
					},
					"Children": [
						{
							"ID": "20230904084800-oaka5f1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230904084800-oaka5f1",
								"updated": "20230904084800"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-cpu-time-9eff74d3161b",
									"TextMarkTextContent": "Understanding resource limits in kubernetes: cpu time"
								}
							]
						}
					]
				},
				{
					"ID": "20230904084800-qc7ggsf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230904084800-qc7ggsf",
						"updated": "20230904084800"
					},
					"Children": [
						{
							"ID": "20230904084800-z4oojam",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230904084800-z4oojam",
								"updated": "20230904084800"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-memory-6b41e9a955f9",
									"TextMarkTextContent": "Understanding resource limits in kubernetes: memory"
								}
							]
						}
					]
				},
				{
					"ID": "20230904084800-85hx1n5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230904084800-85hx1n5",
						"updated": "20230904084800"
					},
					"Children": [
						{
							"ID": "20230904084800-zzwrjyb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230904084800-zzwrjyb",
								"updated": "20230904084800"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-resource-requests-and-limits",
									"TextMarkTextContent": "Kubernetes best practices: Resource requests and limits"
								}
							]
						}
					]
				},
				{
					"ID": "20230904084800-haa08pk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230904084800-haa08pk",
						"updated": "20230904084800"
					},
					"Children": [
						{
							"ID": "20230904084800-ftpbrmj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230904084800-ftpbrmj",
								"updated": "20230904084800"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://cloud.tencent.com/developer/article/1004976",
									"TextMarkTextContent": "Kubernetes 资源分配之 Request 和 Limit 解析"
								}
							]
						}
					]
				}
			]
		}
	]
}