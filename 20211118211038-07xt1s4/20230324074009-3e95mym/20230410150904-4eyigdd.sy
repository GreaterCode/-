{
	"ID": "20230410150904-4eyigdd",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230410150904-4eyigdd",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230410150904-mhmig1d\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230410152848-zenhjgo\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230410152853-48l3gdm\u0026quot;,\u0026quot;focusStart\u0026quot;:1,\u0026quot;focusEnd\u0026quot;:1}",
		"title": "Argo CD 持续交付",
		"updated": "20230410152913"
	},
	"Children": [
		{
			"ID": "20230410150904-mhmig1d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410150904-mhmig1d",
				"updated": "20230410151004"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://argoproj.github.io/cd/",
					"TextMarkTextContent": "Argo CD"
				},
				{
					"Type": "NodeText",
					"Data": " 是用于 Kubernetes 的声明式 GitOps 持续交付工具。"
				}
			]
		},
		{
			"ID": "20230410151008-ohn8bol",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230410151008-ohn8bol",
				"updated": "20230410151020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. GitOps"
				}
			]
		},
		{
			"ID": "20230410151021-yirgzji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151021-yirgzji",
				"updated": "20230410151034"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "GitOps 允许由 Git 控制整个代码交付过程，包括基础设施和应用程序定义为代码以及自动更新和回滚。简单来说就是在Git存储库中存储和管理部署的应用。\\"
				}
			]
		},
		{
			"ID": "20230410151034-gi38oqq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151034-gi38oqq",
				"updated": "20230410151034"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ArgoCD 是一个 GitOps 代理，它将 Git 存储库中描述的应用程序的状态与 Kubernetes 集群中的部署同步。"
				}
			]
		},
		{
			"ID": "20230410151042-p86d1g9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151042-p86d1g9",
				"updated": "20230410151042"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230410151042-mosjyk4.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230410151106-burv0kr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151106-burv0kr",
				"updated": "20230410151134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上图示例中，使用以下组件："
				}
			]
		},
		{
			"ID": "20230410151135-8n3cas5",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230410151135-8n3cas5",
				"updated": "20230410151135"
			},
			"Children": [
				{
					"ID": "20230410151135-n7678g9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230410151135-n7678g9"
					},
					"Children": [
						{
							"ID": "20230410151135-hiugtoo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230410151135-hiugtoo"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/weixin_45133467/article/details/126475049?spm=1001.2014.3001.5501",
									"TextMarkTextContent": "Tekton Pipeline"
								}
							]
						}
					]
				},
				{
					"ID": "20230410151135-3ox474z",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230410151135-3ox474z"
					},
					"Children": [
						{
							"ID": "20230410151135-k43teuw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230410151135-k43teuw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用Helm Chart的Kubernetes模板"
								}
							]
						}
					]
				},
				{
					"ID": "20230410151135-lrn1i92",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230410151135-lrn1i92"
					},
					"Children": [
						{
							"ID": "20230410151135-dxinqnh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230410151135-dxinqnh"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用Argo CD进行持续部署"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230410151141-enajche",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230410151141-enajche",
				"updated": "20230410151228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.  先决条件"
				}
			]
		},
		{
			"ID": "20230410151232-e2184lm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151232-e2184lm",
				"updated": "20230410151233"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Argo CD是用在Kubernetes上的工具。所以在这之前，我们需要启动一个Kubernetes集群。"
				}
			]
		},
		{
			"ID": "20230410151240-f5sdq29",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230410151240-f5sdq29",
				"updated": "20230410151242"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. 安装Argo CD"
				}
			]
		},
		{
			"ID": "20230410151253-hfm4cjp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230410151253-hfm4cjp",
				"updated": "20230410151352"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# helm方式安装\n$ kubectl create namespace argocd\n$ helm repo add argo https://argoproj.github.io/argo-helm\n\n# 官方yaml文件安装\n$ kubectl create namespace argocd\n$ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230410151415-hzwnruf",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230410151415-hzwnruf",
				"updated": "20230410151425"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230410151415-0n9v8q2",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230410151415-0n9v8q2",
						"updated": "20230410151425"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "安装清单中ClusterRoleBinding绑定argocd命名空间得资源。如果将argocd 安装到别的命名空间下需注意修改。如遇到kubernetes cluster访问不成功，权限问题，那就是这的情况"
						}
					]
				}
			]
		},
		{
			"ID": "20230410151318-tywjkaw",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230410151318-tywjkaw",
				"updated": "20230410151446"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. 访问服务器UI"
				}
			]
		},
		{
			"ID": "20230410151318-7tv5zeo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230410151318-7tv5zeo",
				"updated": "20230410151531"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.1 端口转发"
				}
			]
		},
		{
			"ID": "20230410151540-ypehonz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151540-ypehonz",
				"updated": "20230410151540"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Kubectl 端口转发也可用于连接到 API 服务器而不暴露服务。"
				}
			]
		},
		{
			"ID": "20230410151655-jegz9n1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230410151655-jegz9n1",
				"updated": "20230410151658"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl port-forward svc/argocd-server -n argocd 8080:443\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230410151540-8d09jwx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151540-8d09jwx",
				"updated": "20230410151702"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后可以使用 https://localhost:8080 访问 API 服务器"
				}
			]
		},
		{
			"ID": "20230410151732-b4jwu2h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230410151732-b4jwu2h",
				"updated": "20230410151744"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.2 路由转发"
				}
			]
		},
		{
			"ID": "20230410151744-aqc9eep",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151744-aqc9eep",
				"updated": "20230410151750"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按照"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/",
					"TextMarkTextContent": "ingress 文档"
				},
				{
					"Type": "NodeText",
					"Data": "了解如何使用 ingress 配置 Argo CD。"
				}
			]
		},
		{
			"ID": "20230410151752-eszevjz",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230410151752-eszevjz",
				"updated": "20230410151757"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5. ArgoCD CLI"
				}
			]
		},
		{
			"ID": "20230410151808-doaroua",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151808-doaroua",
				"updated": "20230410151808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建CD部署有两种选择，一种是通过CLI，一种是通过UI。我们这里使用CLI,因为它更具有声明性"
				}
			]
		},
		{
			"ID": "20230410151808-vzj6rlc",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230410151808-vzj6rlc",
				"updated": "20230410151812"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230410151812-9x9863n",
					"Type": "NodeBlockquote",
					"Properties": {
						"id": "20230410151812-9x9863n",
						"updated": "20230410151812"
					},
					"Children": [
						{
							"Type": "NodeBlockquoteMarker",
							"Data": "\u003e"
						},
						{
							"ID": "20230410151812-o5ip78g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230410151812-o5ip78g"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CLI安装 https://argoproj.github.io/argo-cd/cli_installation/"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230410151911-2lmdjjd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151911-2lmdjjd",
				"updated": "20230410151911"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "admin"
				},
				{
					"Type": "NodeText",
					"Data": "帐户的初始密码是自动生成的，并以明文形式存储 在您的 Argo CD 安装命名空间中命名"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "password"
				},
				{
					"Type": "NodeText",
					"Data": "的密码字段中。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "argocd-initial-admin-secret"
				},
				{
					"Type": "NodeText",
					"Data": "您可以使用以下方法简单地检索此密码"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "kubectl"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20230410151916-74rmx2w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230410151916-74rmx2w",
				"updated": "20230410151923"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230410151933-i7pvuzw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410151933-i7pvuzw",
				"updated": "20230410151933"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用上面的用户名密码，登录Argo CD，也可通过webUI账号密码登录访问。"
				}
			]
		},
		{
			"ID": "20230410152015-v5o6s0m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230410152015-v5o6s0m",
				"updated": "20230410152124"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# argocd login 10.10.10.1:31005 --insecure --username admin --grpc-web\nPassword: \n'admin:login' logged in successfully\nContext '10.10.10.1:31005' updated\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230410152218-f7ex2rz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230410152218-f7ex2rz",
				"updated": "20230410152218"
			},
			"Children": [
				{
					"ID": "20230410152218-agpv91m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230410152218-agpv91m"
					},
					"Children": [
						{
							"ID": "20230410152218-7o9vmag",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230410152218-7o9vmag"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "–insecure 跳过服务器证书和域验证"
								}
							]
						}
					]
				},
				{
					"ID": "20230410152218-fgi252q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230410152218-fgi252q"
					},
					"Children": [
						{
							"ID": "20230410152218-eupz71j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230410152218-eupz71j"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "–grpc-web 启用grpc-web协议"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230410152224-ysp9pai",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230410152224-ysp9pai",
				"updated": "20230410152400"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6 Create Application"
				}
			]
		},
		{
			"ID": "20230410152248-mb2tsfi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152248-mb2tsfi",
				"updated": "20230410152248"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 CLI 创建 Argo 应用程序"
				}
			]
		},
		{
			"ID": "20230410152248-0y8uoo6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230410152248-0y8uoo6",
				"updated": "20230410152308"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "argocd app create web-service \\\n--repo http://10.10.10.1:31002/ycloud/project.git \\\n--path webservice \\\n--dest-server https://kubernetes.default.svc \\\n--dest-namespace webservice\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230410152313-oc3dhtm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152313-oc3dhtm",
				"updated": "20230410152314"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们创建了指向源repo和path清单文件存储的位置，定义了在集群部署应用程序的位置。"
				}
			]
		},
		{
			"ID": "20230410152315-m59shyb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152315-m59shyb",
				"updated": "20230410152337"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230410152337-wmtjr6e.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230410152345-tnb8kzu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152345-tnb8kzu",
				"updated": "20230410152346"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ArgoCD 还支持各种类型的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://argoproj.github.io/argo-cd/user-guide/application_sources/",
					"TextMarkTextContent": "模板工具"
				},
				{
					"Type": "NodeText",
					"Data": "，例如 Kustomize 和 Helm。这里我们使用 Helm，它定义了模板或 K8s 资源的集合。使用可配置的值文件可以灵活地表示不同类型的应用程序或部署阶段。"
				}
			]
		},
		{
			"ID": "20230410152351-sbfen0w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230410152351-sbfen0w",
				"updated": "20230410152423"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6.1 Helm chaim"
				}
			]
		},
		{
			"ID": "20230410152426-hfbi6sd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152426-hfbi6sd",
				"updated": "20230410152426"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们通过运行以下命令创建名为webservice的helm chart: helm create webservice该项目的结构如下"
				}
			]
		},
		{
			"ID": "20230410152433-idbx2gl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230410152433-idbx2gl",
				"updated": "20230410152537"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# cd project/webservice/\n#ls\ncharts  Chart.yaml  templates  values.yaml\n# cat values.yaml \n# Default values for webservice.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\n\nreplicaCount: 1\n\nimage:\n  repository: hub.17usoft.com/gstrain/web-service\n  pullPolicy: IfNotPresent\n  # Overrides the image tag whose default is the chart appVersion.\n  tag: \"master-e428d31\"\n\nimagePullSecrets: [{ name: first-registry}]\nnameOverride: \"webservice\"\nfullnameOverride: \"webservice\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations: {}\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"\"\n\npodAnnotations: {}\n\npodSecurityContext: {}\n  # fsGroup: 2000\n\nsecurityContext: {}\n  # capabilities:\n  #   drop:\n  #   - ALL\n  # readOnlyRootFilesystem: true\n  # runAsNonRoot: true\n  # runAsUser: 1000\n\nservice:\n  type: NodePort\n  port: 9090\n\ningress:\n  enabled: false\n  className: \"\"\n  annotations: {}\n    # kubernetes.io/ingress.class: nginx\n    # kubernetes.io/tls-acme: \"true\"\n  hosts:\n    - host: chart-example.local\n      paths:\n        - path: /\n          pathType: ImplementationSpecific\n  tls: []\n  #  - secretName: chart-example-tls\n  #    hosts:\n  #      - chart-example.local\n\nresources: {}\n  # We usually recommend not to specify default resources and to leave this as a conscious\n  # choice for the user. This also increases chances charts run on environments with little\n  # resources, such as Minikube. If you do want to specify resources, uncomment the following\n  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n   limits:\n     cpu: 100m\n     memory: 128Mi\n   requests:\n     cpu: 100m\n     memory: 128Mi\n\nautoscaling:\n  enabled: false\n  minReplicas: 1\n  maxReplicas: 100\n  targetCPUUtilizationPercentage: 80\n  # targetMemoryUtilizationPercentage: 80\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230410152534-6kupl76",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152534-6kupl76",
				"updated": "20230410152535"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用Helm创建APP，参数会参照value.yaml文件补齐，然后create"
				}
			]
		},
		{
			"ID": "20230410152639-kqhip7q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152639-kqhip7q",
				"updated": "20230410152744"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20230410152744-4imv2zo.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20230410152747-2a7twch",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230410152747-2a7twch",
				"updated": "20230410152800"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7. 持续交付"
				}
			]
		},
		{
			"ID": "20230410152800-t1ls1gp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152800-t1ls1gp",
				"updated": "20230410152852"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上篇文章tekton构建CI/CD流水线(二)新增了一个名为Modify listing的task，它的作用就是帮我们去修改清单内容，修改成功之后Argo CD检测sync进行同步发布操作。上篇我们使用的是yaml清单来对我们的应用进行部署，修改的是containers[0].image部分，现在我们是用helm进行部署，和之前类似，只不过只用修改values.yaml中的镜像tag即可。"
				}
			]
		},
		{
			"ID": "20230410152913-i6gl6l2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152913-i6gl6l2",
				"updated": "20230410152913"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "task内容修改如下："
				}
			]
		},
		{
			"ID": "20230410152853-48l3gdm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230410152853-48l3gdm",
				"updated": "20230410152903"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "    - name: IMAGE_URL_TAG\n      type: string\n      description: |\n        The latest build image tag\n      default: \"$(tasks.fetch-repo.results.short-branch-name)-$(tasks.fetch-repo.results.commit)\"\n\n    - name: GIT_SCRIPT\n      description: The git script to run.\n      type: string\n      default: |\n        ls -l\n        echo $subdirectory\n        cd $subdirectory\n        git clone --branch master --depth 1  http://ycloud:zz52130++@10.10.10.1:31002/ycloud/project.git manifests\n        cd manifests/$subdirectory\n        ls -la\n        echo old value:\n        cat values.yaml | yq r - 'image.tag'\n        echo replacing with new value:\n        yq w -i values.yaml 'image.tag' \"$IMAGE_URL_TAG\"\n        echo verifying new value :\n        yq r values.yaml image.tag\n        if ! git diff-index --quiet HEAD --; then\n          git status\n          git add .\n          git commit -m \"auto updated yaml by tekton pipeline\"\n          git push\n        else\n            echo \"no changes, git repository is up to date\"\n        fi\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230410152848-zenhjgo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230410152848-zenhjgo",
				"updated": "20230410152848"
			}
		}
	]
}