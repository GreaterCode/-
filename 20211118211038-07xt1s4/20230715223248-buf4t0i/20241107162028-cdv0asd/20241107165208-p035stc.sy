{
	"ID": "20241107165208-p035stc",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20241107165208-p035stc",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20241107165208-igny9s0\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20241107165208-3q295qe\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20241107165208-i0hkylu\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "图解 TCP 连接生命周期",
		"updated": "20241107165208"
	},
	"Children": [
		{
			"ID": "20241107165208-igny9s0",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20241107165208-igny9s0",
				"updated": "20241107165208"
			}
		},
		{
			"ID": "20241107165208-gg4pao6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-gg4pao6",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-leg27n4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-leg27n4",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-ojx3wfx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-ojx3wfx",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==\u0026mid=2247488107\u0026idx=1\u0026sn=06e8474383cc8ca7aea57fd9d22b0f35\u0026chksm=e995d026dee25930b4a2ead89390390ca0ffe4ec99a0958c0bef872fdbcca8c7cea9ad6a907b\u0026scene=21#wechat_redirect",
									"TextMarkTextContent": "https://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==\u0026amp;mid=2247488107\u0026amp;idx=1\u0026amp;sn=06e8474383cc8ca7aea57fd9d22b0f35\u0026amp;chksm=e995d026dee25930b4a2ead89390390ca0ffe4ec99a0958c0bef872fdbcca8c7cea9ad6a907b\u0026amp;scene=21#wechat_redirect - 微信公众平台"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-ff4m345",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-ff4m345",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-puekgnb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-puekgnb",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "图解 TCP 连接生命周期，包含建立连接三次握手以及关闭连接四次挥手，并重点介绍了 Linux 相关内核参数的含义和使用建议，从系统层解决 C10K 这样的问题！"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-5mdb5gr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-5mdb5gr",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-i0hkylu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-i0hkylu",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2024-11-07 16:52:08"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-thhzjwj",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20241107165208-thhzjwj",
				"updated": "20241107165208"
			}
		},
		{
			"ID": "20241107165208-9b4ulgq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107165208-9b4ulgq",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "往期回顾"
				}
			]
		},
		{
			"ID": "20241107165208-jbcky62",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-jbcky62",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "往期文章中，我们介绍了 Linux 网络 Packet 的收发路径，更多的视角是站在 OSI 七层协议中的数据链路层来看数据报文的收发过程，详细可以参考："
				}
			]
		},
		{
			"ID": "20241107165208-9ghgvc6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-9ghgvc6",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-7k139uy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-7k139uy",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-bat1j9h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-bat1j9h",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==\u0026mid=2247488059\u0026idx=1\u0026sn=4062df3f2f24d9d9ef1422629cb8e793\u0026chksm=e995d076dee259604b343e944ea0c76ef9f90ff52ce669e629d3168ff2be8f11b7543e6325ff\u0026scene=21#wechat_redirect",
									"TextMarkTextContent": "Linux 网络收发包路径简介"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-ecgazm4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-ecgazm4",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-pv90jl4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-pv90jl4",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==\u0026mid=2247488092\u0026idx=1\u0026sn=ea534cfb8d61e7340feeba78283a3c9b\u0026chksm=e995d011dee259075b8de673bafcbb9c4fcb43d90e40a15dba9e61d66ee80f00e28b92db9358\u0026scene=21#wechat_redirect",
									"TextMarkTextContent": "更多关于 Linux 网络报文收发路径图解"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-vfxfvfn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-vfxfvfn",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107165208-5fvcg0y"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107165208-kws5g7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-kws5g7o",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而我们遇到问题的时候，往往出现在传输层 - TCP 或者 UDP 上。为了引出《​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "网络性能探案惊奇：三步揪出 CPU 软中断一直处于 100%的元凶"
				},
				{
					"Type": "NodeText",
					"Data": "​》一文（正在计划中），我们今天来看看 TCP 连接的生命周期。"
				}
			]
		},
		{
			"ID": "20241107165208-26xfnb9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107165208-26xfnb9",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TCP 连接生命周期"
				}
			]
		},
		{
			"ID": "20241107165208-i0fyc44",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-i0fyc44",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "来自《​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "TCP半连接全连接（一） -- 全连接队列相关过程"
				},
				{
					"Type": "NodeText",
					"Data": "​》（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "https://xiaodongq.github.io/2024/05/18/tcp_connect/"
				},
				{
					"Type": "NodeText",
					"Data": "）一文的作者，很好的总结了连接建立，数据收发到连接关闭的过程，正所谓一图胜千言！"
				}
			]
		},
		{
			"ID": "20241107165208-17bfbv8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-17bfbv8",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107165208-pidal2s"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107165208-sj0azig",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-sj0azig",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "原图地址："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "https://xiaodongq.github.io/images/tcp-connect-close.png"
				}
			]
		},
		{
			"ID": "20241107165208-7jut4w7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107165208-7jut4w7",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "连接建立：三次握手"
				}
			]
		},
		{
			"ID": "20241107165208-ywkxtlj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-ywkxtlj",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三次握手的大致流程如下："
				}
			]
		},
		{
			"ID": "20241107165208-jq7wwrr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-jq7wwrr",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1.\t第一次握手（SYN）："
				}
			]
		},
		{
			"ID": "20241107165208-zb8kz6w",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-zb8kz6w",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-05qutir",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-05qutir",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-i3ac1aq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-i3ac1aq",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "客户端向服务器发送一个 SYN（同步序列编号）包，请求建立连接。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-ovbpa71",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-ovbpa71",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-v6grmc9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-v6grmc9",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "SYN 包包含一个随机生成的初始序列号（ISN，即 Initial Sequence Number），用于标识客户端的初始数据序列位置。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-6q3zhbp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-6q3zhbp",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2.\t第二次握手（SYN + ACK）："
				}
			]
		},
		{
			"ID": "20241107165208-e6r08m1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-e6r08m1",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-rc8melt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-rc8melt",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-3hnu8d6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-3hnu8d6",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "服务器收到 SYN 包后，确认客户端想要建立连接，于是向客户端发送一个带有 SYN 和 ACK 标志位的包。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-b289486",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-b289486",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-afr9ryo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-afr9ryo",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "这个包的 ACK（确认序列编号）位设为客户端的 ISN + 1，表示接收到了客户端的 SYN。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-3m64a3i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-3m64a3i",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-jm8hyo7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-jm8hyo7",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "同时，服务器也会生成一个自己的 ISN，并在 SYN 字段中发送给客户端，表示服务器希望建立连接。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-mde6qpy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-mde6qpy",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3.\t第三次握手（ACK）："
				}
			]
		},
		{
			"ID": "20241107165208-f1xev5q",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-f1xev5q",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-xuso9db",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-xuso9db",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-prmwbke",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-prmwbke",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "客户端收到服务器的 SYN + ACK 包后，发送一个确认包（ACK），并将 ACK 设置为服务器的 ISN + 1。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-yw12wem",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-yw12wem",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-kbq913b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-kbq913b",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "此时，客户端和服务器的连接已经建立，双方可以开始进行数据传输。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-9i51zmw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-9i51zmw",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如图所示，Linux 服务端在建立 TCP 连接的过程中，会涉及到两个重要的队列：半连接（​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "SYNC"
				},
				{
					"Type": "NodeText",
					"Data": "​）对了和全链接队列（​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "ACCEPT"
				},
				{
					"Type": "NodeText",
					"Data": "​），很多和 TCP 连接相关的问题，或多或少都会和"
				}
			]
		},
		{
			"ID": "20241107165208-4bqn554",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241107165208-4bqn554",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "半连接队列和全连接队列"
				}
			]
		},
		{
			"ID": "20241107165208-fc160d5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-fc160d5",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于 TCP 半连接、全链接队列，我们可以参考博文："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a em strong",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MzUxNjE3MTcwMg==\u0026mid=2247486251\u0026idx=1\u0026sn=a637f63c7185ae34a18067a42fe50429\u0026chksm=f9aa39f2ceddb0e4bd7e41f3403819e38feed2396b3c81c994ee873f6efb3a0c35f52865710c\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "从一次线上问题说起，详解 TCP 半连接队列、全连接队列"
				},
				{
					"Type": "NodeText",
					"Data": "，带着问题去分析，并做了详细的实验进行验证，以及通过内核源码分析原理。"
				}
			]
		},
		{
			"ID": "20241107165208-5z8m4ff",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-5z8m4ff",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 TCP 三次握手的过程中，Linux 内核会维护两个队列，分别是："
				}
			]
		},
		{
			"ID": "20241107165208-7hdmwbi",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-7hdmwbi",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-3c6txq4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-3c6txq4",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-ppxnhk0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-ppxnhk0",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "半连接队列 (SYN Queue)"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-brz7390",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-brz7390",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-l64gfif",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-l64gfif",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "全连接队列 (Accept Queue)"
								}
							]
						},
						{
							"ID": "20241107165208-y8e033i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-y8e033i",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "正常的 TCP 三次握手过程中，当 Server 端收到 Client 端的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN"
								},
								{
									"Type": "NodeText",
									"Data": " 请求后，Server 端进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN_RECV"
								},
								{
									"Type": "NodeText",
									"Data": " 状态，此时内核会将连接存储到​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "半连接队列(SYN Queue)"
								},
								{
									"Type": "NodeText",
									"Data": "​，并向 Client 端回复 SYN+ACK。"
								}
							]
						},
						{
							"ID": "20241107165208-e4fzmll",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-e4fzmll",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当 Server 端收到 Client 端的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 后，内核将连接从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "半连接队列(SYN Queue)"
								},
								{
									"Type": "NodeText",
									"Data": "中取出，添加到​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "全连接队列(Accept Queue)"
								},
								{
									"Type": "NodeText",
									"Data": "​，Server 端进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "ESTABLISHED"
								},
								{
									"Type": "NodeText",
									"Data": " 状态。"
								}
							]
						},
						{
							"ID": "20241107165208-rrf8078",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-rrf8078",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当 Server 端应用进程调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "accept"
								},
								{
									"Type": "NodeText",
									"Data": " 函数时，将连接从全连接队列(​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "Accept Queue"
								},
								{
									"Type": "NodeText",
									"Data": "​)中取出。"
								}
							]
						},
						{
							"ID": "20241107165208-qz73yl4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-qz73yl4",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "半连接队列和全连接队列都有长度大小限制，超过限制时内核会将连接 Drop 丢弃或者返回 RST 包（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong em",
									"TextMarkTextContent": "TCP 层的丢包就来源于此）"
								},
								{
									"Type": "NodeText",
									"Data": "​。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-bx2plgp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241107165208-bx2plgp",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全连接队列指标查看"
				}
			]
		},
		{
			"ID": "20241107165208-25sj860",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-25sj860",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过 ss 命令可以查看到全连接队列的信息："
				}
			]
		},
		{
			"ID": "20241107165208-po4wscf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107165208-po4wscf",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# -n 不解析服务名称\n# -t 只显示 tcp sockets\n# -l 显示正在监听(LISTEN)的 sockets\n# 4 只显示 IPv4\n\n\nss -lnt4\nState      Recv-Q Send-Q                                                              Local Address:Port                                                                             Peer Address:Port\nLISTEN     0      1024                                                                            *:32479                                                                                       *:*\nLISTEN     0      1024                                                                            *:32000                                                                                       *:*\nLISTEN     0      1024                                                                            *:31332                                                                                       *:*\nLISTEN     0      1024                                                                            *:31046                                                                                       *:*\nLISTEN     0      1024                                                                    127.0.0.1:37383                                                                                       *:*\nLISTEN     0      128                                                                             *:42984                                                                                       *:*\nLISTEN     0      1024                                                                    127.0.0.1:10248                                                                                       *:*\nLISTEN     0      1024                                                                172.18.120.55:8808                                                                                        *:*\nLISTEN     0      1024                                                                    127.0.0.1:8808                                                                                        *:*\nLISTEN     0      1024                                                                            *:5000                                                                                        *:*\nLISTEN     0      1024                                                                172.18.120.55:8809                                                                                        *:*\nLISTEN     0      1024                                                                    127.0.0.1:11434                                                                                       *:*\nLISTEN     0      1024                                                                172.18.120.55:10251                                                                                       *:*\n...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107165208-vd8lqyc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-vd8lqyc",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "LISTEN"
				},
				{
					"Type": "NodeText",
					"Data": " 状态的 ​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "socket"
				},
				{
					"Type": "NodeText",
					"Data": "​："
				}
			]
		},
		{
			"ID": "20241107165208-dwdsajd",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-dwdsajd",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-tveflg9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-tveflg9",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-fswczue",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-fswczue",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Recv-Q"
								},
								{
									"Type": "NodeText",
									"Data": "​：当前全连接队列的大小，即已完成三次握手"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "等待"
								},
								{
									"Type": "NodeText",
									"Data": "应用程序 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "accept() "
								},
								{
									"Type": "NodeText",
									"Data": "的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "TCP"
								},
								{
									"Type": "NodeText",
									"Data": " 链接；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-dqzi5rc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-dqzi5rc",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-lawqq6u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-lawqq6u",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Send-Q"
								},
								{
									"Type": "NodeText",
									"Data": "​：全连接队列的最大长度，即全连接队列的大小。"
								}
							]
						},
						{
							"ID": "20241107165208-yy02i2x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-yy02i2x",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "非 LISTEN"
								},
								{
									"Type": "NodeText",
									"Data": " 状态的 socket："
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-lie87i3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-lie87i3",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-6to2n4i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-6to2n4i",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Recv-Q"
								},
								{
									"Type": "NodeText",
									"Data": "​：已收到但未被应用程序读取的字节数；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-7p36rrm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-7p36rrm",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-y906gti",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-y906gti",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Send-Q"
								},
								{
									"Type": "NodeText",
									"Data": "​：已发送但未收到确认的字节数。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-pnzv9ws",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-pnzv9ws",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全连接队列的最大长度由 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "min(somaxconn, backlog)"
				},
				{
					"Type": "NodeText",
					"Data": " 控制，其中："
				}
			]
		},
		{
			"ID": "20241107165208-bsjnxyl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-bsjnxyl",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-0kr58rc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-0kr58rc",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-wc8x8m9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-wc8x8m9",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "somaxconn"
								},
								{
									"Type": "NodeText",
									"Data": " 是 Linux 内核参数，由"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": " /proc/sys/net/core/somaxconn"
								},
								{
									"Type": "NodeText",
									"Data": " 指定；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-k4ylkqy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-k4ylkqy",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-scdlg3p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-scdlg3p",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "backlog"
								},
								{
									"Type": "NodeText",
									"Data": " 是 TCP 协议中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "listen"
								},
								{
									"Type": "NodeText",
									"Data": " 函数的参数之一，即 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "int listen(int sockfd, int backlog) "
								},
								{
									"Type": "NodeText",
									"Data": "函数中的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "backlog"
								},
								{
									"Type": "NodeText",
									"Data": " 大小。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "在 Golang 中，listen 的 backlog 参数使用的是 /proc/sys/net/core/somaxconn 文件中的值。"
								}
							]
						},
						{
							"ID": "20241107165208-oljomti",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-oljomti",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "上面例子中，相关的内核参数："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-5fw824b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107165208-5fw824b",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cat  /proc/sys/net/core/somaxconn\n1024\n\n\nsysctl net.core.somaxconn\nnet.core.somaxconn = 1024\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107165208-bly25oc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-bly25oc",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作为服务器，如果要处理很多客户端的连接，我们应该把 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "somaxconn"
				},
				{
					"Type": "NodeText",
					"Data": "的值设大一些（默认是 128，一般建议设置为4096），避免当客户端的并发连接比较多的的时候，应用程序处理不过来。"
				}
			]
		},
		{
			"ID": "20241107165208-0d350jj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241107165208-0d350jj",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "半连接队列指标查看"
				}
			]
		},
		{
			"ID": "20241107165208-vi343os",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-vi343os",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Linux 内核版本小于 2.6.20 时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "半连接队列"
				},
				{
					"Type": "NodeText",
					"Data": "才等于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "backlog"
				},
				{
					"Type": "NodeText",
					"Data": " 的大小。半连接队列的长度计算相对比较复杂，《"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MzUxNjE3MTcwMg==\u0026mid=2247486251\u0026idx=1\u0026sn=a637f63c7185ae34a18067a42fe50429\u0026chksm=f9aa39f2ceddb0e4bd7e41f3403819e38feed2396b3c81c994ee873f6efb3a0c35f52865710c\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "从一次线上问题说起，详解 TCP 半连接队列、全连接队列"
				},
				{
					"Type": "NodeText",
					"Data": "》给出了一种计算公式："
				}
			]
		},
		{
			"ID": "20241107165208-2q5iwoe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107165208-2q5iwoe",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "backlog = min(somaxconn, backlog)\nnr_table_entries = backlog\nnr_table_entries = min(backlog, sysctl_max_syn_backlog)\nnr_table_entries = max(nr_table_entries, 8)\n// roundup_pow_of_two: 将参数向上取整到最小的 2^n，注意这里存在一个 +1\nnr_table_entries = roundup_pow_of_two(nr_table_entries + 1)\nmax_qlen_log = max(3, log2(nr_table_entries))\nmax_queue_length = 2^max_qlen_log\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107165208-e5iv1b8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-e5iv1b8",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，半连接队列的长度由三个参数指定："
				}
			]
		},
		{
			"ID": "20241107165208-yt3pp0h",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-yt3pp0h",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-ifkztb1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-ifkztb1",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-fhv2tjm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-fhv2tjm",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "listen"
								},
								{
									"Type": "NodeText",
									"Data": " 时，传入的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "backlog；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-4tigl57",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-4tigl57",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-4lrq4kl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-4lrq4kl",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": " /proc/sys/net/core/somaxconn"
								},
								{
									"Type": "NodeText",
									"Data": " 默认值为 ​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "128"
								},
								{
									"Type": "NodeText",
									"Data": "​；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-s1m1u35",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-s1m1u35",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-wts536y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-wts536y",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "/proc/sys/net/ipv4/tcp_max_syn_backlog"
								},
								{
									"Type": "NodeText",
									"Data": " 默认值为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "1024。"
								}
							]
						},
						{
							"ID": "20241107165208-o7w1d9t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-o7w1d9t",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们假设 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "listen"
								},
								{
									"Type": "NodeText",
									"Data": " 传入的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "backlog"
								},
								{
									"Type": "NodeText",
									"Data": " = 128 (Golang 中调用 listen 时传递的 backlog 参数使用的是 ​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "/proc/sys/net/core/somaxconn"
								},
								{
									"Type": "NodeText",
									"Data": "​)，其他配置采用默认值，来计算下半连接队列的最大长度："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-27u8p42",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107165208-27u8p42",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "backlog = min(somaxconn, backlog) = min(128, 128) = 128\nnr_table_entries = backlog = 128\nnr_table_entries = min(backlog, sysctl_max_syn_backlog) = min(128, 1024) = 128\nnr_table_entries = max(nr_table_entries, 8) = max(128, 8) = 128\nnr_table_entries = roundup_pow_of_two(nr_table_entries + 1) = 256\nmax_qlen_log = max(3, log2(nr_table_entries)) = max(3, 8) = 8\nmax_queue_length = 2^max_qlen_log = 2^8 = 256\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107165208-982r00e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-982r00e",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以得到半队列大小是 256。"
				}
			]
		},
		{
			"ID": "20241107165208-48uhcwr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-48uhcwr",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过如下方式查看当前监听 IP + 端口对应的半连接数量："
				}
			]
		},
		{
			"ID": "20241107165208-mkg6yqq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107165208-mkg6yqq",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# netstat -nat：显示所有 TCP 连接的状态。\n# awk '/SYN_RECV/ {print $4}'：筛选出所有状态为 SYN_RECV 的连接，打印本地 IP 和端口（第四列）。\n# sort：对 IP 和端口进行排序，以便进行统计。\n# uniq -c：统计每个 IP 和端口出现的次数，即各 IP 和端口的 SYN_RECV 连接数量。\n# sort -nr：按数量从高到低排序，方便查看哪些 IP 和端口的 SYN_RECV 状态连接最多。\n\n\nnetstat -nat | awk '/SYN_RECV/ {print $4}' | sort | uniq -c | sort -nr\n8 172.18.120.55:15443\n8 172.18.120.55:10252\n8 172.18.120.55:10251\n7 127.0.0.1:8080\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107165208-ky6vmpa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-ky6vmpa",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "IP"
				},
				{
					"Type": "NodeText",
					"Data": " + "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "端口"
				},
				{
					"Type": "NodeText",
					"Data": "组合（即每个监听的套接字）在内核中都会维护一个独立的半连接队列，用于存储那些已收到客户端 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "SYN"
				},
				{
					"Type": "NodeText",
					"Data": " 包但尚未完成三次握手的连接。"
				}
			]
		},
		{
			"ID": "20241107165208-r1zrqkd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241107165208-r1zrqkd",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与 TCP 建立连接相关的内核参数"
				}
			]
		},
		{
			"ID": "20241107165208-jottjr1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-jottjr1",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-3bs6gli",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-3bs6gli",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-j04lx5p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-j04lx5p",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "net.ipv4.tcp_syn_retries（客户端）"
								},
								{
									"Type": "NodeText",
									"Data": "​：Client 发给 Server 的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN"
								},
								{
									"Type": "NodeText",
									"Data": " 包，可能会在传输过程中丢失，或者因为其他原因导致 Server 无法处理，此时 Client 这一侧就会触发超时重传机制。但是也不能一直重传下去，重传的次数也是有限制的，这就是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "tcp_syn_retries"
								},
								{
									"Type": "NodeText",
									"Data": " 这个配置项来决定的。假设 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "tcp_syn_retries"
								},
								{
									"Type": "NodeText",
									"Data": " 为 3，那么 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN"
								},
								{
									"Type": "NodeText",
									"Data": " 包重传的策略大致如下："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-ybexy5f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-ybexy5f",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107165208-l4td30b"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107165208-8t8fv4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-8t8fv4a",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Client 发出 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "SYN"
				},
				{
					"Type": "NodeText",
					"Data": " 后，如果过了 1 秒 ，还没有收到 Server 的响应，那么就会进行第一次重传；如果经过 2s 的时间还没有收到 Server 的响应，就会进行第二次重传；一直重传 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "tcp_syn_retries"
				},
				{
					"Type": "NodeText",
					"Data": " 次。"
				}
			]
		},
		{
			"ID": "20241107165208-x6o24si",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-x6o24si",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "tcp_syn_retries"
				},
				{
					"Type": "NodeText",
					"Data": " 为 3 而言，总共会重传 3 次，也就是说从第一次发出 SYN 包后，会一直等待（1 + 2 + 4 + 8）秒，如果还没有收到 Server 的响应，connect() 就会产生 ETIMEOUT 的错误。"
				}
			]
		},
		{
			"ID": "20241107165208-m3glxav",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-m3glxav",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "tcp_syn_retries"
				},
				{
					"Type": "NodeText",
					"Data": " 的默认值是 6，也就是说如果 SYN 一直发送失败，会在（1 + 2 + 4 + 8 + 16+ 32 + 64）秒，即 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "127"
				},
				{
					"Type": "NodeText",
					"Data": " 秒后产生 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "ETIMEOUT"
				},
				{
					"Type": "NodeText",
					"Data": " 的错误。"
				}
			]
		},
		{
			"ID": "20241107165208-m92qej7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-m92qej7",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通常情况下，我们可以将数据中心内部服务器的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "tcp_syn_retries"
				},
				{
					"Type": "NodeText",
					"Data": " 给调小，这里推荐设置为 ​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2"
				},
				{
					"Type": "NodeText",
					"Data": "​，来减少阻塞的时间。因为对于数据中心而言，它的网络质量是很好的，如果得不到 Server 的响应，很可能是 Server 本身出了问题。在这种情况下，Client 及早地去尝试连接其他的 Server 会是一个比较好的选择。"
				}
			]
		},
		{
			"ID": "20241107165208-e7w3arh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-e7w3arh",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-8qqn5sj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-8qqn5sj",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-ljhdkx5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-ljhdkx5",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "net.ipv4.tcp_synack_retries（服务端）"
								},
								{
									"Type": "NodeText",
									"Data": "​：Server 向 Client 发送的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYNACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包也可能会被丢弃，或者因为某些原因而收不到 Client 的响应，这个时候 Server 也会重传 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYNACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包。重传的次数也是由内核参数 tcp_synack_retries 控制的。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "tcp_synack_retries"
								},
								{
									"Type": "NodeText",
									"Data": " 的重传策略与 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "tcp_syn_retries"
								},
								{
									"Type": "NodeText",
									"Data": " 是一致的。它在系统中默认是 5，对于数据中心的服务器而言，通常都不需要这么大的值，推荐设置为 ​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "2"
								},
								{
									"Type": "NodeText",
									"Data": "​。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-7skwv24",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-7skwv24",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-wh1pnhl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-wh1pnhl",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "net.ipv4.tcp_synack_retries（服务端）"
								},
								{
									"Type": "NodeText",
									"Data": "​：为了防止 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN Flood"
								},
								{
									"Type": "NodeText",
									"Data": " 攻击，Linux 内核引入了 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN Cookies"
								},
								{
									"Type": "NodeText",
									"Data": " 机制。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN Cookie"
								},
								{
									"Type": "NodeText",
									"Data": " 的原理：在 Server 收到 SYN 包时，不去分配资源来保存 Client 的信息（​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "放入到半连接队列中"
								},
								{
									"Type": "NodeText",
									"Data": "​），而是根据这个 SYN 包计算出一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "Cookie"
								},
								{
									"Type": "NodeText",
									"Data": " 值，然后将 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "Cookie"
								},
								{
									"Type": "NodeText",
									"Data": " 记录到 SYNACK 包中发送出去。对于正常的连接，该 Cookies 值会随着 Client 的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 报文被带回来。然后 Server 再根据这个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "Cookie"
								},
								{
									"Type": "NodeText",
									"Data": " 检查这个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包的合法性，如果合法，才去创建新的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "TCP"
								},
								{
									"Type": "NodeText",
									"Data": " 连接。通过这种处理，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "SYN Cookies"
								},
								{
									"Type": "NodeText",
									"Data": " 可以防止部分"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": " SYN Flood"
								},
								{
									"Type": "NodeText",
									"Data": " 攻击。所以对于 Linux 服务器而言，推荐开启，将 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em strong",
									"TextMarkTextContent": "net.ipv4.tcp_syncookies"
								},
								{
									"Type": "NodeText",
									"Data": " 设置为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "1。"
								}
							]
						},
						{
							"ID": "20241107165208-652wmuo",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20241107165208-652wmuo",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"ID": "20241107165208-r7az7xm",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241107165208-r7az7xm",
										"updated": "20241107165208"
									},
									"Children": [
										{
											"ID": "20241107165208-hd8zrrk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107165208-hd8zrrk",
												"updated": "20241107165208"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "开启之后，理论上只要当全连接队列未满，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "em strong",
													"TextMarkTextContent": "SYN"
												},
												{
													"Type": "NodeText",
													"Data": " 请求永远不会被 ​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "em strong",
													"TextMarkTextContent": "Drop"
												},
												{
													"Type": "NodeText",
													"Data": "​，但是根据《​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "从一次线上问题说起，详解 TCP 半连接队列、全连接队列"
												},
												{
													"Type": "NodeText",
													"Data": "​》一文的实验，这个假设还需要看内核的具体实现，他得到的结果是：实验发现即使 syncookies 设为1，当"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "半连接队列长度"
												},
												{
													"Type": "NodeText",
													"Data": " \u003e "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "全连接队列最大长度"
												},
												{
													"Type": "NodeText",
													"Data": "时，就会触发 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "em strong",
													"TextMarkTextContent": "DROP SYN"
												},
												{
													"Type": "NodeText",
													"Data": " 请求。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-y1imgnk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-y1imgnk",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-txwv61k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-txwv61k",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "net.ipv4.tcp_abort_on_overflow（服务端）"
								},
								{
									"Type": "NodeText",
									"Data": "​：当服务器中积压的全连接个数超过最大值（由 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "somaxconn"
								},
								{
									"Type": "NodeText",
									"Data": " 和传入的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "backlog"
								},
								{
									"Type": "NodeText",
									"Data": " 共同决定）且 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "net.ipv4.tcp_abort_on_overflow"
								},
								{
									"Type": "NodeText",
									"Data": " 为 0 （默认值）时，系统不会立即关闭新的连接，而是将超出的连接请求置于等待状态。具体来说，服务器不会发送 TCP RST（重置）包来通知客户端连接被拒绝，而是直接 丢弃（drop）客户端的重传 SYN 包。以下是具体的行为："
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-4f7twqs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-4f7twqs",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-fqx52kj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-fqx52kj",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "初始 SYN 包"
								},
								{
									"Type": "NodeText",
									"Data": "​：当客户端发送一个 SYN 包请求建立连接时，如果全连接队列已满，服务器会丢弃该 SYN 包，不会发出任何响应。客户端通常会进行重传。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-b8m1fyi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-b8m1fyi",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-msn7mix",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-msn7mix",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "后续的 SYN 重传包"
								},
								{
									"Type": "NodeText",
									"Data": "​：当客户端未收到服务器的 SYN+ACK 响应后，会根据 TCP 重传机制重新发送 SYN 包。此时，服务器仍然丢弃这些重传的 SYN 包。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-779y99s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-779y99s",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-akuv4to",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-akuv4to",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "客户端的行为"
								},
								{
									"Type": "NodeText",
									"Data": "​：由于服务器不响应且未发送 RST 包，客户端会按照 TCP 的重试策略，继续发送 SYN 包，直到超过重试次数或达到连接超时。此时，客户端会报告连接失败。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-mjpy0d6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-mjpy0d6",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当 net.ipv4.tcp_abort_on_overflow 设置为 1 时，服务器在全连接队列（accept 队列）已满的情况下会主动重置新进入的连接，具体行为如下："
				}
			]
		},
		{
			"ID": "20241107165208-xdpxjvu",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-xdpxjvu",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-znreqm3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-znreqm3",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-mtv9d82",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-mtv9d82",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "初始 SYN 包"
								},
								{
									"Type": "NodeText",
									"Data": "​：当服务器收到客户端的初始 SYN 包，但发现全连接队列已满，无法接受更多连接时，服务器立即返回一个 TCP RST（重置）包给客户端。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-z85bo6d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-z85bo6d",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-zmct12w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-zmct12w",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "客户端的行为"
								},
								{
									"Type": "NodeText",
									"Data": "​：由于服务器发送了 TCP RST 包，客户端会立即收到连接被拒绝的通知，这样客户端就可以立刻知道当前连接请求失败，可以选择立即重试或采取其他措施，而不需要经历重传和等待超时的过程。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-fie3skp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-fie3skp",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "推荐是将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "net.ipv4.tcp_abort_on_overflow"
				},
				{
					"Type": "NodeText",
					"Data": " 设为 0。这是因为 Server 如果来不及 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "accept()"
				},
				{
					"Type": "NodeText",
					"Data": " 而导致全连接队列满，这往往是由瞬间有大量新建连接请求导致的，正常情况下 Server 很快就能恢复，然后 Client 再次重试后就可以建连成功了。也就是说，将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "tcp_abort_on_overflow"
				},
				{
					"Type": "NodeText",
					"Data": " 配置为 0，给了 Client 一个重试的机会。"
				}
			]
		},
		{
			"ID": "20241107165208-8t83to3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-8t83to3",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "accept"
				},
				{
					"Type": "NodeText",
					"Data": "​() 成功返回后，一个新的 TCP 连接就建立完成了，TCP 连接进入到了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "ESTABLISHED"
				},
				{
					"Type": "NodeText",
					"Data": " 状态"
				}
			]
		},
		{
			"ID": "20241107165208-km6jw5w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107165208-km6jw5w",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TCP 断开连接过程"
				}
			]
		},
		{
			"ID": "20241107165208-yq0njzf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-yq0njzf",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于 TCP 连接状态，我们放上另外一张图："
				}
			]
		},
		{
			"ID": "20241107165208-z99jfrg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-z99jfrg",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107165208-om184w6"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107165208-z3h53dy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-z3h53dy",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "摘自："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "https://commons.wikimedia.org/wiki/File:TCP_state_diagram.jpg"
				}
			]
		},
		{
			"ID": "20241107165208-8f8cqgb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-8f8cqgb",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TCP 连接关闭过程通常由客户端或服务器发起，遵循一个称为 四次挥手（Four-Way Handshake） 的流程。四次挥手的每一步都涉及一方发送 FIN（finish）包，另一方确认（ACK）包。这个过程确保双方可以有序地关闭连接，释放资源。以下是具体步骤："
				}
			]
		},
		{
			"ID": "20241107165208-vq0x09i",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241107165208-vq0x09i",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-pb4u7k8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241107165208-pb4u7k8",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-59tevx7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-59tevx7",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "第一次挥手（FIN 包）"
								},
								{
									"Type": "NodeText",
									"Data": "​：主动关闭方（如客户端）发送一个 FIN 包，表示它不再有数据需要发送，准备关闭连接。此时，连接进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FIN-WAIT-1"
								},
								{
									"Type": "NodeText",
									"Data": " 状态。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-w2cigng",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241107165208-w2cigng",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-fgq56no",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-fgq56no",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "第二次挥手（ACK 包）"
								},
								{
									"Type": "NodeText",
									"Data": "​：被动关闭方（如服务器）收到 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FIN"
								},
								{
									"Type": "NodeText",
									"Data": " 后，发送一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包进行确认，告知已经知道对方请求关闭连接。此时，主动关闭方进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FIN-WAIT-2"
								},
								{
									"Type": "NodeText",
									"Data": " 状态，等待对方也发送 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FIN"
								},
								{
									"Type": "NodeText",
									"Data": " 包。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-hu7u919",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20241107165208-hu7u919",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-voa1d92",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-voa1d92",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "第三次挥手（FIN 包）"
								},
								{
									"Type": "NodeText",
									"Data": "​：被动关闭方发送 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FIN"
								},
								{
									"Type": "NodeText",
									"Data": " 包，表示它的数据也已发送完毕，准备关闭连接。此时，被动关闭方进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "CLOSE-WAIT"
								},
								{
									"Type": "NodeText",
									"Data": " 状态，而主动关闭方收到此 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FIN"
								},
								{
									"Type": "NodeText",
									"Data": " 包后进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "TIME-WAIT"
								},
								{
									"Type": "NodeText",
									"Data": " 状态。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-1tqhz5k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20241107165208-1tqhz5k",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-9vfnlbg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-9vfnlbg",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "第四次挥手（ACK 包）"
								},
								{
									"Type": "NodeText",
									"Data": "​：主动关闭方收到被动关闭方的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FIN"
								},
								{
									"Type": "NodeText",
									"Data": " 包后，发送一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包，确认收到对方的关闭请求。这一 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包发出后，主动关闭方在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "TIME-WAIT"
								},
								{
									"Type": "NodeText",
									"Data": " 状态下等待一段时间（通常是 2MSL，两个最大报文段寿命）以确保对方收到 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包，然后彻底关闭连接。被动关闭方在收到 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 后，立即进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "CLOSED"
								},
								{
									"Type": "NodeText",
									"Data": " 状态并释放资源。"
								}
							]
						},
						{
							"ID": "20241107165208-ni1ygh2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-ni1ygh2",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们经常会发现有很多处于 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "TIME- WAIT"
								},
								{
									"Type": "NodeText",
									"Data": " 状态的连接，主动关闭方进入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "TIME-WAIT"
								},
								{
									"Type": "NodeText",
									"Data": " 状态并等待 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "2MSL"
								},
								{
									"Type": "NodeText",
									"Data": " 主要有两个目的："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-3q295qe",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-3q295qe",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-64fqnjg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-64fqnjg",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-w5eu0cv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-w5eu0cv",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "确保最终的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "ACK"
								},
								{
									"Type": "NodeText",
									"Data": " 包能到达对方，避免因网络丢包导致对方未能彻底关闭连接。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-yn73ikb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-yn73ikb",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-yx2y714",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-yx2y714",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "防止旧的重复数据包干扰新的连接。等待 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "2MSL"
								},
								{
									"Type": "NodeText",
									"Data": " 确保旧连接的包不再出现在网络中，从而避免冲突。"
								}
							]
						},
						{
							"ID": "20241107165208-4avzpjd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-4avzpjd",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一些特殊情况："
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-rw0vb6i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-rw0vb6i",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-dy4ejqf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-dy4ejqf",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "RST（Reset）"
								},
								{
									"Type": "NodeText",
									"Data": "包：在异常情况下（如超时或一方故障），TCP 会发送 RST 包立即中断连接。RST 包不会经过四次挥手过程。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-bxqjgbg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-bxqjgbg",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-p1hvkuq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-p1hvkuq",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "半关闭"
								},
								{
									"Type": "NodeText",
									"Data": "​：TCP 支持半关闭，即一方可以停止发送数据而继续接收数据，直到对方也关闭为止。这种情况在长连接的协议（如 ​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "HTTP/1.1"
								},
								{
									"Type": "NodeText",
									"Data": "​）中较为常见。"
								}
							]
						},
						{
							"ID": "20241107165208-xchow44",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-xchow44",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在关闭连接过程中，一些和超时相关的内核参数："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-3x10law",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-3x10law",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107165208-66idow3"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107165208-lv0se1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-lv0se1c",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当 TCP 进入到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "FIN_WAIT_2"
				},
				{
					"Type": "NodeText",
					"Data": " 状态后，如果本端迟迟收不到对端的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "FIN"
				},
				{
					"Type": "NodeText",
					"Data": " 包，那就会一直处于这个状态，于是就会一直消耗系统资源。Linux 为了防止这种资源的开销，设置了这个状态的超时时间 tcp_fin_timeout，默认为 60s，超过这个时间后就会自动销毁该连接。"
				}
			]
		},
		{
			"ID": "20241107165208-kgp6zfs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-kgp6zfs",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "至于本端为何迟迟收不到对端的 FIN 包，通常情况下都是因为对端机器出了问题，或者是因为太繁忙而不能及时 close()。所以，通常我们都建议将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "tcp_fin_timeout"
				},
				{
					"Type": "NodeText",
					"Data": " 调小一些，以尽量避免这种状态下的资源开销。对于数据中心内部的机器而言，将它调整为 2s 是合适的（具体要做一些测试验证）。"
				}
			]
		},
		{
			"ID": "20241107165208-tmwbm7q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-tmwbm7q",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Linux 上 TIME_WAIT 的默认存活时间是 60s（​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "TCP_TIMEWAIT_LEN，一个内核代码的常量"
				},
				{
					"Type": "NodeText",
					"Data": "​），这个时间对于数据中心而言可能还是有些长了。在 Linux 的内核中，这个参数无法修改。阿里云等公有云通过修改内核代码实现了修改功能，具体可以参考：​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "https://help.aliyun.com/zh/alinux/user-guide/change-the-tcp-time-wait-timeout-period"
				},
				{
					"Type": "NodeText",
					"Data": "​。"
				}
			]
		},
		{
			"ID": "20241107165208-hu5y04x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-hu5y04x",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是也有一些其他内核参数可以控制："
				}
			]
		},
		{
			"ID": "20241107165208-3ny2o49",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107165208-3ny2o49",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"ID": "20241107165208-00300nl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-00300nl",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-m3n76mn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-m3n76mn",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "tcp_max_tw_buckets（主动方）"
								},
								{
									"Type": "NodeText",
									"Data": "​：是一个 Linux 内核参数，用于限制系统中 TIME-WAIT 状态的 TCP 连接数上限。当系统中处于 TIME-WAIT 状态的连接数超过 tcp_max_tw_buckets 值时，系统将主动丢弃一些 TIME-WAIT 连接，以释放资源。对于数据中心而言，网络是相对很稳定的，基本不会存在 FIN 包的异常，所以建议将该值调小一些（例如 10000）。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-bfqw9sq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-bfqw9sq",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-0vcj5vc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-0vcj5vc",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "net.ipv4.tcp_tw_reuse（主动方）："
								},
								{
									"Type": "NodeText",
									"Data": "是一个 Linux 内核参数，用于控制是否允许系统重用处于 TIME-WAIT 状态的 TCP 连接。"
								}
							]
						},
						{
							"ID": "20241107165208-zu4rcxg",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20241107165208-zu4rcxg",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"ID": "20241107165208-kbwqry3",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241107165208-kbwqry3",
										"updated": "20241107165208"
									},
									"Children": [
										{
											"ID": "20241107165208-9zpmtl1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107165208-9zpmtl1",
												"updated": "20241107165208"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "0（默认值）"
												},
												{
													"Type": "NodeText",
													"Data": "​：不允许重用 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "TIME-WAIT"
												},
												{
													"Type": "NodeText",
													"Data": " 状态的连接。系统中的连接必须在 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "TIME-WAIT"
												},
												{
													"Type": "NodeText",
													"Data": " 状态停留到期（即经过 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "2MSL"
												},
												{
													"Type": "NodeText",
													"Data": " 时间）后才会彻底关闭。"
												}
											]
										}
									]
								},
								{
									"ID": "20241107165208-mz3pru9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241107165208-mz3pru9",
										"updated": "20241107165208"
									},
									"Children": [
										{
											"ID": "20241107165208-bjendwz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107165208-bjendwz",
												"updated": "20241107165208"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "1"
												},
												{
													"Type": "NodeText",
													"Data": "​：允许重用 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "TIME-WAIT"
												},
												{
													"Type": "NodeText",
													"Data": " 状态的连接。系统会在适当的情况下将这些连接重新用于新的连接请求。Client 关闭跟 Server 的连接后，也有可能很快再次跟 Server 之间建立一个新的连接，而由于 TCP 端口最多只有 65536 个，如果不去复用处于 TIME_WAIT 状态的连接，就可能在快速重启应用程序时，出现端口被占用而无法创建新连接的情况，如果有这种现象，建议开启 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "tcp_tw_reuse"
												},
												{
													"Type": "NodeText",
													"Data": " 功能。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241107165208-makju98",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107165208-makju98",
						"updated": "20241107165208"
					},
					"Children": [
						{
							"ID": "20241107165208-d355elf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-d355elf",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "****​net.ipv4.​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "tcp_tw_recycle： 用于加速"
								},
								{
									"Type": "NodeText",
									"Data": " TIME_WAIT 状态连接的回收，但是该选项是很危险的，因为它可能会引起意料不到的问题，比如可能会引起 NAT 环境下的丢包问题。因此建议将该选项关闭，将 net.ipv4.tcp_tw_recycle 设为 0。因为打开该参数引发了很多的问题，所以 Linux 内核 4.12 版本就索性移除了该内核参数：tcp: remove tcp_tw_recycle (​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/commit/?id=4396e46187ca5070219b81773c4e65088dac50cc"
								},
								{
									"Type": "NodeText",
									"Data": "​)。"
								}
							]
						},
						{
							"ID": "20241107165208-lwpwui1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-lwpwui1",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于 CLOSE_WAIT 状态而言，系统中没有对应的配置项。但是该状态也是一个危险信号，如果这个状态的 TCP 连接较多，那往往意味着应用程序有 Bug，在某些条件下没有调用 close() 来关闭连接。我们在生产环境上就遇到过很多这类问题。所以，如果你的系统中存在很多 CLOSE_WAIT 状态的连接，那你最好去排查一下你的应用程序，看看哪里漏掉了 close()。"
								}
							]
						},
						{
							"ID": "20241107165208-s6dl0f3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107165208-s6dl0f3",
								"updated": "20241107165208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "笔者整理了一个脚本 tcp_stat.sh，可以用于统计 TCP 连接状态："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107165208-ney7yus",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107165208-ney7yus",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#!/bin/bash\n\n\necho \"监听的 TCP 端口及其对应的 IP、PID、进程名称、建立的连接数量及收发报文量：\"\n\n\n# 打印标题行，并设置列宽\nprintf \"%-40s %-10s %-10s %-20s %-20s %-40s\\n\" \"IP\" \"Port\" \"PID\" \"进程名称\" \"连接数\" \"收发报文量\"\n\n\n# 解析 netstat 输出并格式化列宽\nnetstat -tnlp | awk '/^tcp/ {print $4, $7}' | while read -r line; do\n    address=$(echo $line | awk '{print $1}')\n    pid_info=$(echo $line | awk '{print $2}')\n  \n    # 判断是 IPv4, IPv6 地址，或监听所有接口 (:: 或 0.0.0.0)\n    if [[ $address == :::* ]]; then\n        ip=\":::\"\n        port=\"${address##:::}\"\n    elif [[ $address == *:*:* ]]; then\n        # IPv6 地址：提取格式 [IPv6]:Port\n        ip=$(echo $address | sed -E 's/^\\[(.*)\\]:[0-9]+$/\\1/')\n        port=$(echo $address | sed -E 's/^.*\\]:([0-9]+)$/\\1/')\n    else\n        # IPv4 地址或 0.0.0.0:Port\n        ip=$(echo $address | cut -d':' -f1)\n        port=$(echo $address | cut -d':' -f2)\n        [[ $ip == \"0.0.0.0\" ]] \u0026\u0026 ip=\"0.0.0.0\"\n    fi\n\n\n    pid=$(echo $pid_info | cut -d'/' -f1)\n    if [[ -n \"$pid\" \u0026\u0026 \"$pid\" =~ ^[0-9]+$ ]]; then\n        pname=$(ps -p $pid -o comm=)\n        connections=$(netstat -tn | awk -v port=$port '/^tcp/ \u0026\u0026 $4 ~ \":\"port\"$\" {count++} END {print count+0}')\n\n\n        # 获取收发报文量\n        traffic=$(ss -tin \"sport = :$port\" | awk '\n            /bytes_acked/ { \n                for (i=1; i\u003c=NF; i++) {\n                    if ($i ~ /bytes_acked/) { tx += substr($i, index($i, \":\")+1) }\n                    if ($i ~ /bytes_received/) { rx += substr($i, index($i, \":\")+1) }\n                }\n            }\n            END {printf \"%.2fMB/%.2fMB\\n\", rx/1024/1024, tx/1024/1024}\n        '\n)\n        # 输出每一行数据\n        printf \"%-40s %-10s %-10s %-20s %-10s %-20s\\n\" \"$ip\" \"$port\" \"$pid\" \"$pname\" \"$connections\" \"$traffic\"\n    else\n        printf \"%-40s %-10s %-10s %-20s %-10s %-20s\\n\" \"$ip\" \"$port\" \"-\" \"-\" \"-\" \"-\"\n    fi\n# 对输出按 IP 和数值端口排序\ndone | sort -k1,1 -k2,2n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107165208-ez04w61",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-ez04w61",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行效果："
				}
			]
		},
		{
			"ID": "20241107165208-g3naqb9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107165208-g3naqb9",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "./tcp_stat.sh\n监听的 TCP 端口及其对应的 IP、PID、进程名称、建立的连接数量及收发报文量：\nIP                                       Port       PID        进程名称         连接数            收发报文量\n0.0.0.0                                  22         2434       sshd                 2          0.01MB/0.01MB\n0.0.0.0                                  80         17190      nginx                0          0.00MB/0.00MB\n0.0.0.0                                  111        1911       rpcbind              0          0.00MB/0.00MB\n0.0.0.0                                  443        17190      nginx                0          0.00MB/0.00MB\n0.0.0.0                                  1235       2451       haproxy              0          0.00MB/0.00MB\n0.0.0.0                                  5000       2451       haproxy              0          0.00MB/0.00MB\n0.0.0.0                                  8181       17190      nginx                0          0.00MB/0.00MB\n0.0.0.0                                  16443      2451       haproxy              4          708.62MB/10939.55MB\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107165208-gfecj9l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107165208-gfecj9l",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内核参数总结"
				}
			]
		},
		{
			"ID": "20241107165208-yetij5i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-yetij5i",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107165208-opmc95s"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107165208-jgfdc6o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-jgfdc6o",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "摘自："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em strong",
					"TextMarkTextContent": "https://time.geekbang.org/column/article/284912"
				}
			]
		},
		{
			"ID": "20241107165208-uwynxz3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-uwynxz3",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了更加系统学习，笔者推荐大家可以学习一下极客时间的《Linux 内核技术实战课》。"
				}
			]
		},
		{
			"ID": "20241107165208-722wwul",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-722wwul",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107165208-b4jok2s"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107165208-pzpgnbe",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107165208-pzpgnbe",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络优化参考"
				}
			]
		},
		{
			"ID": "20241107165208-ei2t3wv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107165208-ei2t3wv",
				"updated": "20241107165208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更多关于网络性能优化，大家可以参考：《"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==\u0026mid=2247486006\u0026idx=1\u0026sn=4ab7228b6e2b78033e0ee8cd1602b780\u0026chksm=e995c87bdee2416dbf8ad774eeae368a57ac7c9e341eca06a4757cdad2580c0797cd6e5f9eeb\u0026scene=21#wechat_redirect",
					"TextMarkTextContent": "性能分析实战篇 - Linux 网络性能优化指南"
				},
				{
					"Type": "NodeText",
					"Data": "》。"
				}
			]
		}
	]
}