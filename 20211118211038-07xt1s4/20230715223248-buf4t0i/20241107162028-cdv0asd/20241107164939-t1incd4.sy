{
	"ID": "20241107164939-t1incd4",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20241107164939-t1incd4",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20241107164939-gaihlgz\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20241107164939-3oi32ak\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20241107164939-gaihlgz\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "性能分析实战篇 - Linux 网络性能优化指南",
		"updated": "20241107164939"
	},
	"Children": [
		{
			"ID": "20241107164939-gaihlgz",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20241107164939-gaihlgz",
				"updated": "20241107164939"
			}
		},
		{
			"ID": "20241107164939-wg8zv4o",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-wg8zv4o",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-5fr6k9v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-5fr6k9v",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-62x6t9y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-62x6t9y",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==\u0026mid=2247486006\u0026idx=1\u0026sn=4ab7228b6e2b78033e0ee8cd1602b780\u0026chksm=e995c87bdee2416dbf8ad774eeae368a57ac7c9e341eca06a4757cdad2580c0797cd6e5f9eeb\u0026scene=21#wechat_redirect",
									"TextMarkTextContent": "https://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==\u0026amp;mid=2247486006\u0026amp;idx=1\u0026amp;sn=4ab7228b6e2b78033e0ee8cd1602b780\u0026amp;chksm=e995c87bdee2416dbf8ad774eeae368a57ac7c9e341eca06a4757cdad2580c0797cd6e5f9eeb\u0026amp;scene=21#wechat_redirect - 微信公众平台"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-xi44a0a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-xi44a0a",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-zkr1cqq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-zkr1cqq",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们先来了解一下网络基础，然后了解一下 Linux 网络栈以及网络性能分析方法，最后再来看几个常见的网络优化实操。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-poztmqq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-poztmqq",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-zfrokos",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-zfrokos",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2024-11-07 16:49:39"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-hcjo8pp",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20241107164939-hcjo8pp",
				"updated": "20241107164939"
			}
		},
		{
			"ID": "20241107164939-uws7ris",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-uws7ris",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文会先介绍一下网络基础，然后介绍一下网络性能分析方法和优化方法，最后再介绍几个常见的网络优化场景。"
				}
			]
		},
		{
			"ID": "20241107164939-2bryn5n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-2bryn5n",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络模型"
				}
			]
		},
		{
			"ID": "20241107164939-wok4fqw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-wok4fqw",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们说得网络模型通常指国际标准化组织制定的开放式系统互联通信参考模型（Open System Interconnection Reference Model），简称为 OSI 网络模型。"
				}
			]
		},
		{
			"ID": "20241107164939-ojeyb0e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-ojeyb0e",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了解决网络互联中异构设备的兼容性问题，并解耦复杂的网络包处理流程，OSI 模型把网络互联的框架分为应用层、表示层、会话层、传输层、网络层、数据链路层以及物理层等七层，每个层负责不同的功能。其中："
				}
			]
		},
		{
			"ID": "20241107164939-pok5fa0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241107164939-pok5fa0",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-6820yrd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241107164939-6820yrd",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-cul8fgx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-cul8fgx",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "应用层，负责为应用程序提供统一的接口。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-2nwnbxc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241107164939-2nwnbxc",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-t9shxus",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-t9shxus",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表示层，负责把数据转换成兼容接收系统的格式。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-se5ueuf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20241107164939-se5ueuf",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-mjanfbg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-mjanfbg",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "会话层，负责维护计算机之间的通信连接。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-t7mlszi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20241107164939-t7mlszi",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-2dndv20",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-2dndv20",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "传输层，负责为数据加上传输表头，形成数据包。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-wm32ezu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20241107164939-wm32ezu",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-2rhfpu1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-2rhfpu1",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "网络层，负责数据的路由和转发。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-8oqj2qz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20241107164939-8oqj2qz",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-i6dbblk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-i6dbblk",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数据链路层，负责 MAC 寻址、错误侦测和改错。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-0x90w9m",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20241107164939-0x90w9m",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-dlo7n19",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-dlo7n19",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "物理层，负责在物理网络中传输数据帧。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-5as1rf0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-5as1rf0",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Linux 中，我们实际上使用的是另一个更实用的四层模型，即 TCP/IP 网络模型。TCP/IP 模型，把网络互联的框架分为应用层、传输层、网络层、网络接口层等四层，其中："
				}
			]
		},
		{
			"ID": "20241107164939-hcgojs1",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241107164939-hcgojs1",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-r6ri1bt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241107164939-r6ri1bt",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-djcvrn8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-djcvrn8",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "应用层，负责向用户提供一组应用程序，比如 HTTP、FTP、DNS 等。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-ndq5707",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241107164939-ndq5707",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-oulf8e9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-oulf8e9",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "传输层，负责端到端的通信，比如 TCP、UDP 等。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-x572edp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20241107164939-x572edp",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-uelr9bx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-uelr9bx",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "网络层，负责网络包的封装、寻址和路由，比如 IP、ICMP 等。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-2izu4g5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20241107164939-2izu4g5",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-51yxun2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-51yxun2",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "网络接口层，负责网络包在物理网络中的传输，比如 MAC 寻址、错误侦测以及通过网卡传输网络帧等。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-jlwhhbx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-jlwhhbx",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "两个模型的对应关系如下图所示："
				}
			]
		},
		{
			"ID": "20241107164939-qxr87mw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-qxr87mw",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107164939-8k6b0r0"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107164939-xh2im3f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-xh2im3f",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽说 Linux 实际按照 TCP/IP 模型，实现了网络协议栈，但在我们习惯上还是用 OSI 七层模型来描述。比如，说到七层和四层负载均衡，对应的分别是 OSI 模型中的应用层和传输层（而它们对应到 TCP/IP 模型中，实际上是四层和三层）。"
				}
			]
		},
		{
			"ID": "20241107164939-s46qhnh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-s46qhnh",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TCP/IP 协议族"
				}
			]
		},
		{
			"ID": "20241107164939-0ydm2c4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-0ydm2c4",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107164939-ifhglu3"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107164939-6s2u9f1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-6s2u9f1",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络栈"
				}
			]
		},
		{
			"ID": "20241107164939-5imx3fc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-5imx3fc",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有了 TCP/IP 模型后，在进行网络传输时，数据包就会按照协议栈，对上一层发来的数据进行逐层处理；然后封装上该层的协议头，再发送给下一层。"
				}
			]
		},
		{
			"ID": "20241107164939-jwb9ctg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-jwb9ctg",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当然，网络包在每一层的处理逻辑，都取决于各层采用的网络协议。比如在应用层，一个提供 REST API 的应用，可以使用 HTTP 协议，把它需要传输的 JSON 数据封装到 HTTP 协议中，然后向下传递给 TCP 层。"
				}
			]
		},
		{
			"ID": "20241107164939-e7y1glk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-e7y1glk",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而封装做的事情就很简单了，只是在原来的负载前后，增加固定格式的元数据，原始的负载数据并不会被修改。"
				}
			]
		},
		{
			"ID": "20241107164939-ubdfsex",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-ubdfsex",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如，以通过 TCP 协议通信的网络包为例，通过下面这张图，我们可以看到，应用程序数据在每个层的封装格式。"
				}
			]
		},
		{
			"ID": "20241107164939-apt8nuh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-apt8nuh",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107164939-fmz92f1"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107164939-tgxm4cu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-tgxm4cu",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中：传输层在应用程序数据前面增加了 TCP 头；网络层在 TCP 数据包前增加了 IP 头；而网络接口层，又在 IP 数据包前后分别增加了帧头和帧尾。这些新增的头部和尾部，都按照特定的协议格式填充。"
				}
			]
		},
		{
			"ID": "20241107164939-dp3usqe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-dp3usqe",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些新增的头部和尾部，增加了网络包的大小，但我们都知道，物理链路中并不能传输任意大小的数据包。网络接口配置的最大传输单元（MTU），就规定了最大的 IP 包大小。在我们最常用的以太网中，MTU 默认值是 1500（这也是 Linux 的默认值）。"
				}
			]
		},
		{
			"ID": "20241107164939-3pnmqqk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-3pnmqqk",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦网络包超过 MTU 的大小，就会在网络层分片，以保证分片后的 IP 包不大于 MTU 值。显然，MTU 越大，需要的分包也就越少，自然，网络吞吐能力就越好。"
				}
			]
		},
		{
			"ID": "20241107164939-jw0xul5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-jw0xul5",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "理解了 TCP/IP 网络模型和网络包的封装原理后，在 Linux 内核中的网络栈，其实也类似于 TCP/IP 的四层结构。如下图所示，就是 Linux 通用 IP 网络栈的示意图："
				}
			]
		},
		{
			"ID": "20241107164939-pibm02z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-pibm02z",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107164939-dnxunf2"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107164939-xfkvcu3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-xfkvcu3",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们从上到下来看这个网络栈："
				}
			]
		},
		{
			"ID": "20241107164939-m5zkb8l",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-m5zkb8l",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-zbh8i8v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-zbh8i8v",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-5xj4o04",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-5xj4o04",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "最上层的应用程序，需要通过系统调用，来跟套接字接口进行交互；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-tistph2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-tistph2",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-bq51j0q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-bq51j0q",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "套接字的下面，就是我们前面提到的传输层、网络层和网络接口层；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-a8e6ueo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-a8e6ueo",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-3xmqi89",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-3xmqi89",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "最底层，则是网卡驱动程序以及物理网卡设备。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-33j2suk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-33j2suk",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网卡是发送和接收网络包的基本设备。在系统启动过程中，网卡通过内核中的网卡驱动程序注册到系统中。而在网络收发过程中，内核通过中断跟网卡进行交互。"
				}
			]
		},
		{
			"ID": "20241107164939-ajzut24",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-ajzut24",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "再结合前面提到的 Linux 网络栈，可以看出，网络包的处理非常复杂。所以，网卡硬中断只处理最核心的网卡数据读取或发送，而协议栈中的大部分逻辑，都会放到软中断中处理。"
				}
			]
		},
		{
			"ID": "20241107164939-h4feh42",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-h4feh42",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络包的接收流程"
				}
			]
		},
		{
			"ID": "20241107164939-zemb8ek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-zemb8ek",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当一个网络帧到达网卡后，网卡会通过 DMA 方式，把这个网络包放到收包队列中；然后通过硬中断，告诉中断处理程序已经收到了网络包。"
				}
			]
		},
		{
			"ID": "20241107164939-hzsuypc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-hzsuypc",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接着，网卡中断处理程序会为网络帧分配内核数据结构（sk_buff），并将其拷贝到 sk_buff 缓冲区中；然后再通过软中断，通知内核收到了新的网络帧。"
				}
			]
		},
		{
			"ID": "20241107164939-rmnq51f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-rmnq51f",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来，内核协议栈从缓冲区中取出网络帧，并通过网络协议栈，从下到上逐层处理这个网络帧。比如："
				}
			]
		},
		{
			"ID": "20241107164939-3yw3ohx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-3yw3ohx",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-afz5ukf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-afz5ukf",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-zd8q8es",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-zd8q8es",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在链路层检查报文的合法性，找出上层协议的类型（比如 IPv4 还是 IPv6），再去掉帧头、帧尾，然后交给网络层。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-60jzm4m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-60jzm4m",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-36yno1n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-36yno1n",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "网络层取出 IP 头，判断网络包下一步的走向，比如是交给上层处理还是转发。当网络层确认这个包是要发送到本机后，就会取出上层协议的类型（比如 TCP 还是 UDP），去掉 IP 头，再交给传输层处理。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-vvwbwy7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-vvwbwy7",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-i1sxde8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-i1sxde8",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "传输层取出 TCP 头或者 UDP 头后，根据 \u003c 源 IP、源端口、目的 IP、目的端口 \u003e 四元组作为标识，找出对应的 Socket，并把数据拷贝到 Socket 的接收缓存中。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-i59xvxx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-i59xvxx",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-ecjrqbw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-ecjrqbw",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "最后，应用程序就可以使用 Socket 接口，读取到新接收到的数据了。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-8pnnrxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-8pnnrxq",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了更清晰表示这个流程，可以参考下图，这张图的左半部分表示接收流程，而图中的粉色箭头则表示网络包的处理路径。"
				}
			]
		},
		{
			"ID": "20241107164939-9j6ubrv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-9j6ubrv",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "图片"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/640-20241107164939-tn65kn9"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241107164939-a0og6cx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-a0og6cx",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络包的发送流程"
				}
			]
		},
		{
			"ID": "20241107164939-zdnz2qr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-zdnz2qr",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络包的发送流程就是上图的右半部分，很容易发现，网络包的发送方向，正好跟接收方向相反。"
				}
			]
		},
		{
			"ID": "20241107164939-mch98gv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-mch98gv",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，应用程序调用 Socket API（比如 sendmsg）发送网络包。由于这是一个系统调用，所以会陷入到内核态的套接字层中。套接字层会把数据包放到 Socket 发送缓冲区中。"
				}
			]
		},
		{
			"ID": "20241107164939-ui04zan",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-ui04zan",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来，网络协议栈从 Socket 发送缓冲区中，取出数据包；再按照 TCP/IP 栈，从上到下逐层处理。比如，传输层和网络层，分别为其增加 TCP 头和 IP 头，执行路由查找确认下一跳的 IP，并按照 MTU 大小进行分片。"
				}
			]
		},
		{
			"ID": "20241107164939-9foc26n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-9foc26n",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分片后的网络包，再送到网络接口层，进行物理地址寻址，以找到下一跳的 MAC 地址。然后添加帧头和帧尾，放到发包队列中。这一切完成后，会有软中断通知驱动程序：发包队列中有新的网络帧需要发送。"
				}
			]
		},
		{
			"ID": "20241107164939-bnritbc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-bnritbc",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后，驱动程序通过 DMA ，从发包队列中读出网络帧，并通过物理网卡把它发送出去。"
				}
			]
		},
		{
			"ID": "20241107164939-v6hhdqo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-v6hhdqo",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "性能指标"
				}
			]
		},
		{
			"ID": "20241107164939-1b7s0iy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-1b7s0iy",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们通常用带宽、吞吐量、延时、PPS（Packet Per Second）等指标衡量网络的性能。"
				}
			]
		},
		{
			"ID": "20241107164939-rtgx503",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-rtgx503",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-5dqiga4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-5dqiga4",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-ey5vxrm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-ey5vxrm",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "带宽"
								},
								{
									"Type": "NodeText",
									"Data": "​，表示链路的最大传输速率，单位通常为 b/s （比特 / 秒）。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-7rzskxr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-7rzskxr",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-u6h17hl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-u6h17hl",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "吞吐量"
								},
								{
									"Type": "NodeText",
									"Data": "​，表示单位时间内成功传输的数据量，单位通常为 b/s（比特 / 秒）或者 B/s（字节 / 秒）。吞吐量受带宽限制，而吞吐量 / 带宽，也就是该网络的使用率。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-ifw0dti",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-ifw0dti",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-hxjnprq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-hxjnprq",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "延时"
								},
								{
									"Type": "NodeText",
									"Data": "​，表示从网络请求发出后，一直到收到远端响应，所需要的时间延迟。在不同场景中，这一指标可能会有不同含义。比如，它可以表示，建立连接需要的时间（比如 TCP 握手延时），或一个数据包往返所需的时间（比如 RTT）。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-60fvaxx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-60fvaxx",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-mxfaqh7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-mxfaqh7",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "PPS"
								},
								{
									"Type": "NodeText",
									"Data": "​，是 Packet Per Second（包 / 秒）的缩写，表示以网络包为单位的传输速率。PPS 通常用来评估网络的转发能力，比如硬件交换机，通常可以达到线性转发（即 PPS 可以达到或者接近理论最大值）。而基于 Linux 服务器的转发，则容易受网络包大小的影响。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-e1ya90s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-e1ya90s",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了这些指标，​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "网络的可用性"
				},
				{
					"Type": "NodeText",
					"Data": "​（网络能否正常通信）、​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "并发连接数"
				},
				{
					"Type": "NodeText",
					"Data": "​（TCP 连接数量）、​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "丢包率"
				},
				{
					"Type": "NodeText",
					"Data": "​（丢包百分比）、​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "重传率"
				},
				{
					"Type": "NodeText",
					"Data": "​（重新传输的网络包比例）等也是常用的性能指标。"
				}
			]
		},
		{
			"ID": "20241107164939-r1xed16",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-r1xed16",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络配置"
				}
			]
		},
		{
			"ID": "20241107164939-45r5u3c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-45r5u3c",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分析网络问题的第一步，通常是查看网络接口的配置和状态。你可以使用 ifconfig 或者 ip 命令，来查看网络的配置。更推荐使用 ip 工具，因为它提供了更丰富的功能和更易用的接口。"
				}
			]
		},
		{
			"ID": "20241107164939-uuqmnr0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-uuqmnr0",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "ifconfig 和 ip 分别属于软件包 net-tools 和 iproute2，iproute2 是 net-tools 的下一代。通常情况下它们会在发行版中默认安装。但如果你找不到 ifconfig 或者 ip 命令，可以手动安装这两个软件包。"
				}
			]
		},
		{
			"ID": "20241107164939-lhah6gv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-lhah6gv",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以网络接口 eno1 为例，我们可以运行下面的两个命令，查看它的配置和状态："
				}
			]
		},
		{
			"ID": "20241107164939-kuklkug",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107164939-kuklkug",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ip -s addr show eno1\n3: eno2: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether ac:1f:6b:db:9c:1d brd ff:ff:ff:ff:ff:ff\n    inet xxx brd xxx scope global eno2\n       valid_lft forever preferred_lft forever\n    inet 1.3.4.5/32 scope global eno2\n       valid_lft forever preferred_lft forever\n    inet6 xxx scope link\n       valid_lft forever preferred_lft forever\n    RX: bytes  packets  errors  dropped overrun mcast\n    54277453449034 86346540277 0       9       0       13\n    TX: bytes  packets  errors  dropped carrier collsns\n    57125912722183 86147871362 0       0       0       0\n \nifconfig eno1\neno2: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e  mtu 1500\n        inet xxx  netmask 255.255.252.0  broadcast xxx\n        inet6 fe80::ae1f:6bff:fedb:9c1d  prefixlen 64  scopeid 0x20\u003clink\u003e\n        ether ac:1f:6b:db:9c:1d  txqueuelen 1000  (Ethernet)\n        RX packets 86346509495  bytes 54277436087937 (49.3 TiB)\n        RX errors 0  dropped 9  overruns 22577  frame 0\n        TX packets 86147840480  bytes 57125893280076 (51.9 TiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n        device memory 0xc7400000-c741ffff\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107164939-19glxil",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-19glxil",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里有几个跟网络性能密切相关的指标，需要特别关注一下。"
				}
			]
		},
		{
			"ID": "20241107164939-fhyz102",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-fhyz102",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一，网络接口的状态标志。ifconfig 输出中的 RUNNING ，或 ip 输出中的 LOWER_UP ，都表示物理网络是连通的，即网卡已经连接到了交换机或者路由器中。如果看不到它们，通常表示网线被拔掉了。"
				}
			]
		},
		{
			"ID": "20241107164939-wlj0wu6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-wlj0wu6",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第二，MTU 的大小。MTU 默认大小是 1500，根据网络架构的不同（比如是否使用了 VXLAN 等叠加网络），我们可能需要调大或者调小 MTU 的数值。"
				}
			]
		},
		{
			"ID": "20241107164939-fpwof25",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-fpwof25",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第三，网络接口的 IP 地址、子网以及 MAC 地址。这些都是保障网络功能正常工作所必需的，需要确保配置正确。"
				}
			]
		},
		{
			"ID": "20241107164939-g6si3vp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-g6si3vp",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第四，网络收发的字节数、包数、错误数以及丢包情况，特别是 TX 和 RX 部分的 errors、dropped、overruns、carrier 以及 collisions 等指标不为 0 时，通常表示出现了网络 I/O 问题。其中："
				}
			]
		},
		{
			"ID": "20241107164939-83gg5ne",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-83gg5ne",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-l51ylrt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-l51ylrt",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-d72gj4n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-d72gj4n",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "errors"
								},
								{
									"Type": "NodeText",
									"Data": " 表示发生错误的数据包数，比如校验错误、帧同步错误等；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-zt720zt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-zt720zt",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-8nvj9vf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-8nvj9vf",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "dropped"
								},
								{
									"Type": "NodeText",
									"Data": " 表示丢弃的数据包数，即数据包已经收到了 Ring Buffer，但因为内存不足等原因丢包；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-7m0bpcl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-7m0bpcl",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-qeclrlt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-qeclrlt",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "overruns"
								},
								{
									"Type": "NodeText",
									"Data": " 表示超限数据包数，即网络 I/O 速度过快，导致 Ring Buffer 中的数据包来不及处理（队列满）而导致的丢包；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-p802798",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-p802798",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-2h33ua2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-2h33ua2",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "carrier"
								},
								{
									"Type": "NodeText",
									"Data": " 表示发生 carrirer 错误的数据包数，比如双工模式不匹配、物理电缆出现问题等；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-dbuh2zr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-dbuh2zr",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-71diy1r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-71diy1r",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "collisions"
								},
								{
									"Type": "NodeText",
									"Data": " 表示碰撞数据包数。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-vou4d2l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-vou4d2l",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "套接字信息"
				}
			]
		},
		{
			"ID": "20241107164939-uy7ptr5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-uy7ptr5",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ifconfig 和 ip 只显示了网络接口收发数据包的统计信息，但在实际的性能问题中，网络协议栈中的统计信息，我们也必须关注。"
				}
			]
		},
		{
			"ID": "20241107164939-lqzz56j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-lqzz56j",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以用 netstat 或者 ss ，来查看套接字、网络栈、网络接口以及路由表的信息。"
				}
			]
		},
		{
			"ID": "20241107164939-gsylrma",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-gsylrma",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更推荐使用 ss 来查询网络的连接信息，因为它比 netstat 提供了更好的性能（速度更快）。比如，我们可以执行下面的命令，查询套接字信息："
				}
			]
		},
		{
			"ID": "20241107164939-dkwj4la",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107164939-dkwj4la",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# head -n 10 表示只显示前面 10 行\n# -t 表示只显示 TCP 连接\n# -l 表示只显示监听套接字\n# -n 表示显示数字地址和端口(而不是名字)\n# -p 表示显示进程信息\n$ netstat -tnlp | head -n 10\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        1      0 0.0.0.0:32551           0.0.0.0:*               LISTEN      3611147/kube-proxy\n...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107164939-gyp6cm9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-gyp6cm9",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "netstat 和 ss 的输出也是类似的，都展示了套接字的状态、接收队列、发送队列、本地地址、远端地址、进程 PID 和进程名称等。"
				}
			]
		},
		{
			"ID": "20241107164939-bgw3jdr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-bgw3jdr",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，接收队列（Recv-Q）和发送队列（Send-Q）需要你特别关注，它们通常应该是 0。当你发现它们不是 0 时，说明有网络包的堆积发生。当然还要注意，在不同套接字状态下，它们的含义不同。"
				}
			]
		},
		{
			"ID": "20241107164939-j0s3dbf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-j0s3dbf",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当套接字处于连接状态（Established）时，"
				}
			]
		},
		{
			"ID": "20241107164939-en7kvn9",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-en7kvn9",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-ojibhmx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-ojibhmx",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-0ctxcey",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-0ctxcey",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Recv-Q 表示套接字缓冲还没有被应用程序取走的字节数（即接收队列长度）。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-bys76n4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-bys76n4",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-as85qq6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-as85qq6",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "而 Send-Q 表示还没有被远端主机确认的字节数（即发送队列长度）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-5klt7sk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-5klt7sk",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当套接字处于监听状态（Listening）时，Recv-Q 表示全连接队列的长度。而 Send-Q 表示全连接队列的最大长度。"
				}
			]
		},
		{
			"ID": "20241107164939-aw566ir",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-aw566ir",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所谓全连接，是指服务器收到了客户端的 ACK，完成了 TCP 三次握手，然后就会把这个连接挪到全连接队列中。这些全连接中的套接字，还需要被 accept() 系统调用取走，服务器才可以开始真正处理客户端的请求。"
				}
			]
		},
		{
			"ID": "20241107164939-nza5tfl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-nza5tfl",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与全连接队列相对应的，还有一个半连接队列。所谓半连接是指还没有完成 TCP 三次握手的连接，连接只进行了一半。服务器收到了客户端的 SYN 包后，就会把这个连接放到半连接队列中，然后再向客户端发送 SYN+ACK 包。"
				}
			]
		},
		{
			"ID": "20241107164939-zt730k8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-zt730k8",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协议栈统计信息"
				}
			]
		},
		{
			"ID": "20241107164939-yny9o9z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-yny9o9z",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 netstat 或 ss ，也可以查看协议栈的信息："
				}
			]
		},
		{
			"ID": "20241107164939-go1kfef",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107164939-go1kfef",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "netstat -s\n...\nss -s\nTotal: 18099 (kernel 22270)\nTCP:   5832 (estab 1220, closed 4415, orphaned 0, synrecv 0, timewait 1672/0), ports 0\n \nTransport Total     IP        IPv6\n*     22270     -         -\nRAW   2         2         0\nUDP   17        9         8\nTCP   1417      1363      54\nINET      1436      1374      62\nFRAG      0         0         0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107164939-p1yicnm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-p1yicnm",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些协议栈的统计信息都很直观。ss 只显示已经连接、关闭、孤儿套接字等简要统计，而 netstat 则提供的是更详细的网络协议栈信息。"
				}
			]
		},
		{
			"ID": "20241107164939-lcfu5vv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-lcfu5vv",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如，上面 netstat 的输出示例，就展示了 TCP 协议的主动连接、被动连接、失败重试、发送和接收的分段数量等各种信息。"
				}
			]
		},
		{
			"ID": "20241107164939-wseflcl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-wseflcl",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外我们也可以自己写脚本来统计网络连接情况："
				}
			]
		},
		{
			"ID": "20241107164939-s3hroca",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107164939-s3hroca",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "netstat -tan | awk 'NR\u003e2 {++state[$6]} END {for (item in state) print item, state[item]}' | sort -k2 -nr\nESTABLISHED 1217\nTIME_WAIT 293\nLISTEN 196\nFIN_WAIT2 13\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107164939-yuvredf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-yuvredf",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "网络吞吐和 PPS"
				}
			]
		},
		{
			"ID": "20241107164939-3oi32ak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-3oi32ak",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来，我们再来看看，如何查看系统当前的网络吞吐量和 PPS。在这里，我推荐使用我们的老朋友 sar，在前面的 CPU、内存和 I/O 模块中，我们已经多次用到它。"
				}
			]
		},
		{
			"ID": "20241107164939-e94fgx9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-e94fgx9",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给 sar 增加 -n 参数就可以查看网络的统计信息，比如网络接口（DEV）、网络接口错误（EDEV）、TCP、UDP、ICMP 等等。执行下面的命令，就可以得到网络接口统计信息："
				}
			]
		},
		{
			"ID": "20241107164939-l4ohw6k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107164939-l4ohw6k",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 数字1 10 表示每隔1秒采集一组数据，一共采集10组\n$ sar -n DEV 1 10\n...\n平均时间:     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s\n平均时间: xxx-ca8db8      2.50      2.90      0.67      0.46      0.00      0.00      0.00\n平均时间: xxx-32e78a      8.80      7.50      1.11      1.43      0.00      0.00      0.00\n平均时间: xxx-b-7b6098    698.70    999.20    312.46   1027.07      0.00      0.00      0.00\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107164939-mjjgtqb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-mjjgtqb",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这儿输出的指标比较多，我来简单解释下它们的含义。"
				}
			]
		},
		{
			"ID": "20241107164939-iyyvd7j",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-iyyvd7j",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-t14m9wr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-t14m9wr",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-4nsnvrf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-4nsnvrf",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "rxpck/s 和 txpck/s 分别是接收和发送的 PPS，单位为包 / 秒。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-olc0kxn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-olc0kxn",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-tuw65du",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-tuw65du",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "rxkB/s 和 txkB/s 分别是接收和发送的吞吐量，单位是 KB/ 秒。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-s0ethzb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-s0ethzb",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-skr5kq4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-skr5kq4",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "rxcmp/s 和 txcmp/s 分别是接收和发送的压缩数据包数，单位是包 / 秒。"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-3fzzvd4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-3fzzvd4",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-dkl03e4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-dkl03e4",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "%ifutil 是网络接口的使用率，即半双工模式下为 (rxkB/s+txkB/s)/Bandwidth，而全双工模式下为 max(rxkB/s, txkB/s)/Bandwidth。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-4wjgp37",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-4wjgp37",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，Bandwidth 可以用 ethtool 来查询，它的单位通常是 Gb/s 或者 Mb/s，不过注意这里小写字母 b ，表示比特而不是字节。我们通常提到的千兆网卡、万兆网卡等，单位也都是比特。"
				}
			]
		},
		{
			"ID": "20241107164939-kca2qbl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-kca2qbl",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "连通性和延时"
				}
			]
		},
		{
			"ID": "20241107164939-r191s70",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-r191s70",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们通常使用 ping ，来测试远程主机的连通性和延时，而这基于 ICMP 协议。比如，执行下面的命令，就可以测试本机到 172.18.20.152 这个 IP 地址的连通性和延时："
				}
			]
		},
		{
			"ID": "20241107164939-hkxyk7j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241107164939-hkxyk7j",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# -c3表示发送三次ICMP包后停止\n$ ping -c3 xxx\nPING xxx (xxx) 56(84) bytes of data.\n \n--- xxx ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2001ms\nrtt min/avg/max/mdev = 0.067/0.083/0.100/0.017 ms\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241107164939-1ndfdou",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-1ndfdou",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ping 的输出，可以分为两部分。"
				}
			]
		},
		{
			"ID": "20241107164939-4rt1hbg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-4rt1hbg",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一部分，是每个 ICMP 请求的信息，包括 ICMP 序列号（icmp_seq）、TTL（生存时间，或者跳数）以及往返延时。"
				}
			]
		},
		{
			"ID": "20241107164939-t5ovq5q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-t5ovq5q",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第二部分，则是三次 ICMP 请求的汇总。"
				}
			]
		},
		{
			"ID": "20241107164939-8u3q44c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-8u3q44c",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如上面的示例显示，"
				}
			]
		},
		{
			"ID": "20241107164939-lqdpmeg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241107164939-lqdpmeg",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-7lcug0u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241107164939-7lcug0u",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-jp8olmt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-jp8olmt",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "发送了 3 个网络包，并且接收到 3 个响应，没有丢包发生，这说明测试主机到 xxx 是连通的；"
								}
							]
						}
					]
				},
				{
					"ID": "20241107164939-oomeoya",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241107164939-oomeoya",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-uktqfnz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-uktqfnz",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "round trip time"
								}
							]
						},
						{
							"ID": "20241107164939-sz7bnve",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20241107164939-sz7bnve",
								"updated": "20241107164939"
							},
							"Children": [
								{
									"ID": "20241107164939-d69lh9e",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20241107164939-d69lh9e",
										"updated": "20241107164939"
									},
									"Children": [
										{
											"ID": "20241107164939-pg5i4u3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107164939-pg5i4u3",
												"updated": "20241107164939"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "\"rtt\"代表\"往返时间\"，即数据包从发送者到接收者再返回所需的时间。"
												}
											]
										}
									]
								},
								{
									"ID": "20241107164939-rt5h0j4",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20241107164939-rt5h0j4",
										"updated": "20241107164939"
									},
									"Children": [
										{
											"ID": "20241107164939-p787mmz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107164939-p787mmz",
												"updated": "20241107164939"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "\"最小\"是3个数据包中最小的往返时间，这个时间是0.067毫秒（ms）。"
												}
											]
										}
									]
								},
								{
									"ID": "20241107164939-163pcm2",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20241107164939-163pcm2",
										"updated": "20241107164939"
									},
									"Children": [
										{
											"ID": "20241107164939-hhwvdll",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107164939-hhwvdll",
												"updated": "20241107164939"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "\"平均\"是3个数据包的平均往返时间，为0.083毫秒。"
												}
											]
										}
									]
								},
								{
									"ID": "20241107164939-msl1p4f",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20241107164939-msl1p4f",
										"updated": "20241107164939"
									},
									"Children": [
										{
											"ID": "20241107164939-44gdm00",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107164939-44gdm00",
												"updated": "20241107164939"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "\"最大\"是3个数据包中最大的往返时间，为0.100毫秒。"
												}
											]
										}
									]
								},
								{
									"ID": "20241107164939-ihk1qed",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NS4=",
										"Num": 5
									},
									"Properties": {
										"id": "20241107164939-ihk1qed",
										"updated": "20241107164939"
									},
									"Children": [
										{
											"ID": "20241107164939-6omp6ue",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241107164939-6omp6ue",
												"updated": "20241107164939"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "\"mdev\"（平均偏差）是往返时间的变化或抖动的度量，这个值为0.017毫秒。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-zcisvbq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241107164939-zcisvbq",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "带宽测试"
				}
			]
		},
		{
			"ID": "20241107164939-384dvjv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-384dvjv",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用如下方式进行带宽测试"
				}
			]
		},
		{
			"ID": "20241107164939-7dghuho",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20241107164939-7dghuho",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeBr",
											"Data": "br"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "TCP"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "UDP"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "---------------------------------------------------------------------------------------------------------------------------------------------------------------------"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td"
						},
						{
							"Type": "NodeTableCell",
							"Data": "td"
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "带宽"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "server：iperf -s -p 10000client：iperf -c \u003cserverIP\u003e -t 10 -P4 -p 10000"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "server：iperf -s -u -p 10000client：iperf -c \u003cserverIP\u003e -t 10 -u -b 1000m -p 10000"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "-"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "-"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "-"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "延时"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "server：netserver -p 10000client：netperf -H \u003cserverIP\u003e -p 10000 -t TCP_RR -- -o min_latency,max_latency,mean_latency"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "server：netserver -p 10000client：netperf -H \u003cserverIP\u003e -p 10000 -t UDP_RR -- -o min_latency,max_latency,mean_latency"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PPS"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td"
						},
						{
							"Type": "NodeTableCell",
							"Data": "td"
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-8tkaocn",
			"Type": "NodeHTMLBlock",
			"Data": "\u003cpre\u003e\u003cbr/\u003e\u003c/pre\u003e",
			"Properties": {
				"id": "20241107164939-8tkaocn",
				"updated": "20241107164939"
			}
		},
		{
			"ID": "20241107164939-rspcmnc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241107164939-rspcmnc",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"ID": "20241107164939-uoao7k7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241107164939-uoao7k7",
						"updated": "20241107164939"
					},
					"Children": [
						{
							"ID": "20241107164939-szf6iz7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241107164939-szf6iz7",
								"updated": "20241107164939"
							}
						}
					]
				}
			]
		},
		{
			"ID": "20241107164939-hhqnz4r",
			"Type": "NodeHTMLBlock",
			"Data": "\u003cpre\u003e\u003cbr/\u003e\u003c/pre\u003e",
			"Properties": {
				"id": "20241107164939-hhqnz4r",
				"updated": "20241107164939"
			}
		},
		{
			"ID": "20241107164939-o5fbr8u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241107164939-o5fbr8u",
				"updated": "20241107164939"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "|server：iperf -s -u -p 10000client：iperf -c \u003cserverIP\u003e -u -l 16 -b 4000kpps -e -p 10000|"
				}
			]
		}
	]
}