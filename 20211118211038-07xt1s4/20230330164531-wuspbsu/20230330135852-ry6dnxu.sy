{
	"ID": "20230330135852-ry6dnxu",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230330135852-ry6dnxu",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230330141059-ui3gvfk\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230330152540-q6fd9sw\u0026quot;,\u0026quot;scrollTop\u0026quot;:5813,\u0026quot;focusId\u0026quot;:\u0026quot;20230330151310-0r88qka\u0026quot;,\u0026quot;focusStart\u0026quot;:25,\u0026quot;focusEnd\u0026quot;:25}",
		"title": "Kubernetes故障检测和自愈",
		"updated": "20230330170000"
	},
	"Children": [
		{
			"ID": "20230330135852-hwt51jy",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230330135852-hwt51jy",
				"updated": "20230330135920"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 前言"
				}
			]
		},
		{
			"ID": "20230330135936-u8u5fza",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330135936-u8u5fza",
				"updated": "20230330135936"
			},
			"Children": [
				{
					"ID": "20230330135936-d1g3bri",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330135936-d1g3bri"
					},
					"Children": [
						{
							"ID": "20230330135936-e671c18",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330135936-e671c18"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "节点CNI不可用，其它节点无法连接到故障节点的Pod"
								}
							]
						}
					]
				},
				{
					"ID": "20230330135936-dd4pczo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330135936-dd4pczo"
					},
					"Children": [
						{
							"ID": "20230330135936-lnh60fu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330135936-lnh60fu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Subpath方式挂载的Configmap，特定条件下出现Pod无限重启的问题"
								}
							]
						}
					]
				},
				{
					"ID": "20230330135936-69pl814",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330135936-69pl814"
					},
					"Children": [
						{
							"ID": "20230330135936-mfqeifc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330135936-mfqeifc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "集群DNS服务器无法通过上游DNS解析外部名称"
								}
							]
						}
					]
				},
				{
					"ID": "20230330135936-6f0jg1o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330135936-6f0jg1o"
					},
					"Children": [
						{
							"ID": "20230330135936-1kh7f8z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330135936-1kh7f8z"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "节点假死，但是持有的Ceph RBD的Watcher不释放，导致有状态服务的Pod调度走后仍然无法启动"
								}
							]
						}
					]
				},
				{
					"ID": "20230330135936-aufzrwy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230330135936-aufzrwy"
					},
					"Children": [
						{
							"ID": "20230330135936-4kpnlk6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330135936-4kpnlk6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "误删Etcd数据、持久卷"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330140027-r9689w3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140027-r9689w3",
				"updated": "20230330140027"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些问题导致部分Pod、节点、甚至整个集群不可用，需要人工运维才能恢复。"
				}
			]
		},
		{
			"ID": "20230330140027-vkyv5y4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140027-vkyv5y4",
				"updated": "20230330140027"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从接收到告警到运维人员手工处理完毕，可能已经过了1小时，严重影响服务质量。但是如果能识别这些告警并将运维知识转化为代码，某些问题可能在一分钟内就被发现和解决。"
				}
			]
		},
		{
			"ID": "20230330140027-365dami",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140027-365dami",
				"updated": "20230330140027"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文调研商业产品和社区的集群/节点故障检测、修复技术的现状，为自研节点自愈产品提供参考。"
				}
			]
		},
		{
			"ID": "20230330135920-qejc7s9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330135920-qejc7s9",
				"updated": "20230330135929"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1 故障类型"
				}
			]
		},
		{
			"ID": "20230330140050-sxnmnl1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330140050-sxnmnl1",
				"updated": "20230330140058"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.1 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "节点故障"
				}
			]
		},
		{
			"ID": "20230330140136-05dw8zq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140136-05dw8zq",
				"updated": "20230330140137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Pod所在节点的内核、CRI运行时等出现问题，无法支持Pod的运行。针对这类故障，社区或商业的解决方案较多，例如社区的NPD项目、GKE的节点修复功能。"
				}
			]
		},
		{
			"ID": "20230330140101-od2zk82",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330140101-od2zk82",
				"updated": "20230330140131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.2 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "组件故障"
				}
			]
		},
		{
			"ID": "20230330140144-yf7vv6a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140144-yf7vv6a",
				"updated": "20230330140148"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "组件故障可以认为是节点故障的子类，只是故障来源是K8S基础组件的一部分。"
				}
			]
		},
		{
			"ID": "20230330140154-rq2hs0w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140154-rq2hs0w",
				"updated": "20230330140154"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "K8S集群基础组件出现故障，可能导致集群或在节点的部分功能不可用。我在线上环境遇到过的故障包括："
				}
			]
		},
		{
			"ID": "20230330140200-qj5ncz5",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330140200-qj5ncz5",
				"updated": "20230330140200"
			},
			"Children": [
				{
					"ID": "20230330140200-ed16h8h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330140200-ed16h8h"
					},
					"Children": [
						{
							"ID": "20230330140200-054dkwi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330140200-054dkwi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "KubeDNS故障：6个DNS Pod中的2个出现无法解析外部DNS名称的情况。后果是大量线上业务因域名解析"
								}
							]
						}
					]
				},
				{
					"ID": "20230330140200-81q1o0y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330140200-81q1o0y"
					},
					"Children": [
						{
							"ID": "20230330140200-epjif7d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330140200-epjif7d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Calico CNI故障：少数几个节点的容器网络和外部断开，节点访问自身的Pod IP没有问题，但是其它节点无法访问故障节点的Pod IP。这种情况下，Pod本机的健康检查无效，导致故障实例持续存在，一定比例的业务请求失败"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330140429-5un04j6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140429-5un04j6",
				"updated": "20230330140430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于K8S生态主要依赖于开源社区，很多组件不成熟，存在缺陷，因此这类故障较为纷杂。社区没有发现知名的解决方案，主要依赖于日常运维中知识的积累，而且这些运维知识往往是环境相关、K8S版本或组件版本相关的，通用性较差。"
				}
			]
		},
		{
			"ID": "20230330140111-mwsm69d",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330140111-mwsm69d",
				"updated": "20230330140122"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1.3 集群故障"
				}
			]
		},
		{
			"ID": "20230330140445-cd4ix7z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140445-cd4ix7z",
				"updated": "20230330140445"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "K8S控制平面不存在单点问题 ，通常情况下，出现整个集群的故障的概率是很低的。但是，某些行业对数据安全和可用性要求极高，另外，也出现过误操作导致集群破坏的案例，集群故障恢复还是需要考虑的。"
				}
			]
		},
		{
			"ID": "20230330140445-svsk449",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140445-svsk449",
				"updated": "20230330140445"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "应对集群故障的主要手段就是备份和恢复，Velero可以帮助我们实现这一点。它支持K8S资源（Etcd）、持久卷的备份，通过开发插件，某些存储后端可以基于快照来备份，效率很高。"
				}
			]
		},
		{
			"ID": "20230330140447-d9u9dkw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330140447-d9u9dkw",
				"updated": "20230330140525"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2 故障检测"
				}
			]
		},
		{
			"ID": "20230330140525-dy8plcc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140525-dy8plcc",
				"updated": "20230330140532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我认为节点/组件的故障，根据需要，可以从两个角度发起。"
				}
			]
		},
		{
			"ID": "20230330140545-cpds6tq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330140545-cpds6tq",
				"updated": "20230330140549"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2.1 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "本地检测"
				}
			]
		},
		{
			"ID": "20230330140538-jn2meww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140538-jn2meww",
				"updated": "20230330140538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "绝大部分故障检测，在节点本地进行就足够了，这样做效率高，避免不必要的网络流量。"
				}
			]
		},
		{
			"ID": "20230330140538-6zy9eju",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330140538-6zy9eju",
				"updated": "20230330140555"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2.2 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "远程检测"
				}
			]
		},
		{
			"ID": "20230330140538-elo5a7m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140538-elo5a7m",
				"updated": "20230330140538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "少部分网络相关的故障，可能从节点无法检测，这就需要远程检测。"
				}
			]
		},
		{
			"ID": "20230330140538-z39f1uf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140538-z39f1uf",
				"updated": "20230330140538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还是上面的Calico CNI故障的例子，故障节点本身访问自己的Pod IP是畅通的，然而外部却无法访问。我们的应对方案，是运行在集群中运行3个Health Check Controller，如果大部分副本判定：节点A网络畅通但是节点A上的Pod Ip却无法联通，则认定节点A的CNI出现故障，需要进行处理。"
				}
			]
		},
		{
			"ID": "20230330140616-bv8dxoq",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230330140616-bv8dxoq",
				"updated": "20230330140631"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "商业产品调研"
				}
			]
		},
		{
			"ID": "20230330140632-f1ltt62",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330140632-f1ltt62",
				"updated": "20230330140642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1  GKE"
				}
			]
		},
		{
			"ID": "20230330140648-fuqzm5m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140648-fuqzm5m",
				"updated": "20230330140648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "谷歌K8S引擎（Google Kubernetes Engine）提供了自动修复节点的功能。GKE会周期性的检测集群中每个节点的健康状态，如果某个节点的健康检查连续N次失败，则启动一个修复进程，对节点进行修复。"
				}
			]
		},
		{
			"ID": "20230330140648-dgsoon5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140648-dgsoon5",
				"updated": "20230330140648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "处于Ready状态的节点被认为是健康的，不健康节点可能处于以下状况："
				}
			]
		},
		{
			"ID": "20230330140648-0ijn6wo",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330140648-0ijn6wo",
				"updated": "20230330140648"
			},
			"Children": [
				{
					"ID": "20230330140648-fqlvviv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330140648-fqlvviv"
					},
					"Children": [
						{
							"ID": "20230330140648-dwsjiws",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330140648-dwsjiws"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "连续数次健康检查，报告NotReady状态"
								}
							]
						}
					]
				},
				{
					"ID": "20230330140648-cuf6pkv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330140648-cuf6pkv"
					},
					"Children": [
						{
							"ID": "20230330140648-n3jgw47",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330140648-n3jgw47"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在指定的时间范围内，节点没有报告任何状态"
								}
							]
						}
					]
				},
				{
					"ID": "20230330140648-kbjbnzj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330140648-kbjbnzj"
					},
					"Children": [
						{
							"ID": "20230330140648-n6b6k2z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330140648-n6b6k2z"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "节点在一个指定的时间范围内，处于磁盘空间不足的状态"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330140648-7ljmq5y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140648-7ljmq5y",
				"updated": "20230330140648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "GKE修复节点的方法比较简单，就是Drain并重新创建。Drain操作会导致节点上的Pod被驱除。"
				}
			]
		},
		{
			"ID": "20230330140648-crfogm7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330140648-crfogm7",
				"updated": "20230330140648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果多个节点需要修复，GKE可以并行的执行修复。"
				}
			]
		},
		{
			"ID": "20230330141014-lv0wp3t",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230330141014-lv0wp3t",
				"updated": "20230330141030"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "node-problem-detector"
				}
			]
		},
		{
			"ID": "20230330141040-hdktue0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330141040-hdktue0",
				"updated": "20230330142308"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1 简介"
				}
			]
		},
		{
			"ID": "20230330141059-p22eozo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330141059-p22eozo",
				"updated": "20230330141059"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这是一个K8S加载项（Addon），目的是将节点故障暴露给集群管理的上层组件。NPD通常运行为DaemonSet，也可以作为独立进程运行。NPD会检测各种各样的节点问题，例如："
				}
			]
		},
		{
			"ID": "20230330141059-xk57r62",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330141059-xk57r62",
				"updated": "20230330141059"
			},
			"Children": [
				{
					"ID": "20230330141059-u9olc1n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330141059-u9olc1n"
					},
					"Children": [
						{
							"ID": "20230330141059-3wk06je",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330141059-3wk06je"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基础设施服务故障：例如NTP服务宕机"
								}
							]
						}
					]
				},
				{
					"ID": "20230330141059-5e9snzt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330141059-5e9snzt"
					},
					"Children": [
						{
							"ID": "20230330141059-vs83wn5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330141059-vs83wn5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "硬件问题：CPU、内存、磁盘故障"
								}
							]
						}
					]
				},
				{
					"ID": "20230330141059-nawclef",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330141059-nawclef"
					},
					"Children": [
						{
							"ID": "20230330141059-zj7jj71",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330141059-zj7jj71"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "内核问题：内核死锁、文件系统损坏"
								}
							]
						}
					]
				},
				{
					"ID": "20230330141059-4ixebze",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330141059-4ixebze"
					},
					"Children": [
						{
							"ID": "20230330141059-ywy50lq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330141059-ywy50lq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "容器运行时错误：Docker守护进程假死"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330141059-3df1yig",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330141059-3df1yig",
				"updated": "20230330141059"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "并报告给APIServer，报告的主要方式包括："
				}
			]
		},
		{
			"ID": "20230330141059-ui3gvfk",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330141059-ui3gvfk",
				"updated": "20230330141059"
			},
			"Children": [
				{
					"ID": "20230330141059-dky87tu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330141059-dky87tu"
					},
					"Children": [
						{
							"ID": "20230330141059-vgmpypc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330141059-vgmpypc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NodeCondition：当遇到永久性的节点故障，导致其不可用时，设置节点的NodeCondition"
								}
							]
						}
					]
				},
				{
					"ID": "20230330141059-yfox5xi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330141059-yfox5xi"
					},
					"Children": [
						{
							"ID": "20230330141059-8l1abyo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330141059-8l1abyo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Event：可能对Pod产生影响的临时信息"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330141059-5vdh2c9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330141059-5vdh2c9",
				"updated": "20230330141059"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在没有引入NPD的情况下，上面的各种节点问题对于K8S集群管理上层组件不可见，因此K8S会继续向问题节点调度Pod。"
				}
			]
		},
		{
			"ID": "20230330141038-uvdci68",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330141038-uvdci68",
				"updated": "20230330142316"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2 PDS"
				}
			]
		},
		{
			"ID": "20230330141357-reldzqq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330141357-reldzqq",
				"updated": "20230330141357"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Problem Daemon（在代码内部也叫Monitor）是NPD的子守护进程，每个PD监控一个特定类型的节点故障，并报告给NPD。目前PD以Goroutine的形式运行在NPD中，未来会支持在独立进程（容器）中运行并编排为一个Pod。在编译期间，可以通过相应的标记禁用每一类PD。"
				}
			]
		},
		{
			"ID": "20230330141458-cklv8sb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330141458-cklv8sb",
				"updated": "20230330141459"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目前可用的PD包括："
				}
			]
		},
		{
			"ID": "20230330141508-9b7an1e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330141508-9b7an1e",
				"updated": "20230330141508"
			}
		},
		{
			"ID": "20230330141525-u1nug17",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"id": "20230330141525-u1nug17",
				"updated": "20230330142040"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 4,
									"TableCellContentMaxWidth": 21,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "PD"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 15,
									"TableCellContentMaxWidth": 16,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "NodeCondition"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 668,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 15,
							"TableCellContentMaxWidth": 21,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "KernelMonitor"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 16,
							"TableCellContentMaxWidth": 16,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "KernelDeadlock"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 668,
							"TableCellContentMaxWidth": 668,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "监控内核日志，根据预定义规则来报告问题、指标使用标记禁用：disable_system_log_monitorKernelMonitor、AbrtAdaptor都属于System Log Monitor，只是使用的配置文件不同。"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "SLM支持基于文件的日志、Journald、kmsg。要监控其它日志，需要实现LogWatcher接口 对于临时问题，SLM暴露counter类的指标，示例："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "# HELP problem_counter Number of times a specific type of problem have occurred.# TYPE problem_counter counter****problem_counter{reason=\u0026quot;TaskHung\u0026quot;}"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "对于永久问题，同时报告为gauge、counter："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "# HELP problem_gauge Whether a specific type of problem is affecting the node or not.# TYPE problem_gauge gauge****problem_gauge{condition=\u0026quot;KernelDeadlock\u0026quot;,reason=\u0026quot;DockerHung\u0026quot;}"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 13,
							"TableCellContentMaxWidth": 21,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AbrtAdaptor"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 4,
							"TableCellContentMaxWidth": 16,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 159,
							"TableCellContentMaxWidth": 668,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "监控ABRT（Automatic Bug Report Tool）日志并报告。ABRT是一个健康监控守护进程，能够捕获内核问题、各种原因导致的应用崩溃使用标记禁用：disable_system_log_monitor"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 21,
							"TableCellContentMaxWidth": 21,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CustomPluginMonitor"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 12,
							"TableCellContentMaxWidth": 16,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "依用户配置"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 265,
							"TableCellContentMaxWidth": 668,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过调用用户配置的脚本来检测各种节点问题"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "脚本退出码："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "0：对于Evnet来说表示Normal，对于NodeCondition表示False"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "1：对于Evnet来说表示Warning，对于NodeCondition表示True"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "脚本输出应该小于80字节，避免给Etcd的存储造成压力"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "使用标记禁用：disable_custom_plugin_monitor"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 20,
							"TableCellContentMaxWidth": 21,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SystemStatsMonitor"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 6,
							"TableCellContentMaxWidth": 16,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "暂无"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 258,
							"TableCellContentMaxWidth": 668,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将各种健康相关的统计信息报告为Metrics"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "目前支持的组件仅仅有主机信息、磁盘："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "disk/io_time 设备队列非空时间，毫秒"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "disk/weighted_io 设备队列非空时间加权，毫秒"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "disk/avg_queue_len 上次调用插件以来，平均排队请求数"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "使用标记禁用：disable_system_stats_monitor"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330142157-mf75brs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330142157-mf75brs",
				"updated": "20230330142333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.3 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Exporters"
				}
			]
		},
		{
			"ID": "20230330142336-9dh4i8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330142336-9dh4i8m",
				"updated": "20230330142337"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NPD提供了若干Exporter组件，能够将节点问题、指标报告给后端："
				}
			]
		},
		{
			"ID": "20230330142343-mms159r",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20230330142343-mms159r",
				"updated": "20230330142343"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 10,
									"TableCellContentMaxWidth": 22,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Exporter"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 2,
									"TableCellContentMaxWidth": 82
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 21,
							"TableCellContentMaxWidth": 22,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Kubernetes Exporter"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 46,
							"TableCellContentMaxWidth": 82,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "暴露临时问题为Event、永久问题为NodeCondition"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 21,
							"TableCellContentMaxWidth": 22,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Prometheus Exporter"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 40,
							"TableCellContentMaxWidth": 82,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "暴露节点问题、指标为Prometheus metrics"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 22,
							"TableCellContentMaxWidth": 22,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Stackdriver Exporter"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 82,
							"TableCellContentMaxWidth": 82,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "暴露节点问题、指标给Stackdriver监控API使用标记禁用：disable_stackdriver_exporter"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330142407-qsjys0k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330142407-qsjys0k",
				"updated": "20230330142527"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.4 应用场景"
				}
			]
		},
		{
			"ID": "20230330142532-ff927w3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330142532-ff927w3",
				"updated": "20230330142542"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.4.1 节点监控"
				}
			]
		},
		{
			"ID": "20230330145328-zsboytf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145328-zsboytf",
				"updated": "20230330145330"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "故障节点上的事件，会记录在宿主机的某些日志中。这些日志（例如内核日志）中噪音信息太多，NPD会提取其中有价值的信息，记录到自己的Pod日志中。你可以通过EFK收集这些信息，NPD也可以将这些信息报送给Prometheus。"
				}
			]
		},
		{
			"ID": "20230330142543-24gsyd9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330142543-24gsyd9",
				"updated": "20230330142549"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.4.2 节点自愈"
				}
			]
		},
		{
			"ID": "20230330145339-b4vz0pe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145339-b4vz0pe",
				"updated": "20230330145339"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基于NPD的的节点自愈流程如下："
				}
			]
		},
		{
			"ID": "20230330145339-132jtpu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330145339-132jtpu",
				"updated": "20230330145339"
			},
			"Children": [
				{
					"ID": "20230330145339-w38ah0z",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330145339-w38ah0z"
					},
					"Children": [
						{
							"ID": "20230330145339-zxdxpx6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330145339-zxdxpx6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NPD为故障节点添加额外的Condition元数据"
								}
							]
						}
					]
				},
				{
					"ID": "20230330145339-yivm8rw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330145339-yivm8rw"
					},
					"Children": [
						{
							"ID": "20230330145339-x9vxkmf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330145339-x9vxkmf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Cordon并Drain故障节点"
								}
							]
						}
					]
				},
				{
					"ID": "20230330145339-5gpu36y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330145339-5gpu36y"
					},
					"Children": [
						{
							"ID": "20230330145339-furnu34",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330145339-furnu34"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "利用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler",
									"TextMarkTextContent": "cluster-autoscaler"
								},
								{
									"Type": "NodeText",
									"Data": "进行集群扩容，补充节点"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330145339-pzeuzmn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145339-pzeuzmn",
				"updated": "20230330145339"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个流程本质上是替换，而不是治愈节点。在裸金属K8S集群中，由于缺乏基础设施的支撑，自动扩充节点可能无法实现，只能通过更加精细的自动化运维，治愈节点的异常状态。"
				}
			]
		},
		{
			"ID": "20230330145339-5h1g1n6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145339-5h1g1n6",
				"updated": "20230330145339"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以CNI故障为例，可能的治愈流程如下："
				}
			]
		},
		{
			"ID": "20230330145339-8d6dpv0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330145339-8d6dpv0",
				"updated": "20230330145339"
			},
			"Children": [
				{
					"ID": "20230330145339-cs1ojaq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330145339-cs1ojaq"
					},
					"Children": [
						{
							"ID": "20230330145339-ov3rxa3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330145339-ov3rxa3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "查询运维知识库，如果找到匹配项，执行对应的运维动作"
								}
							]
						}
					]
				},
				{
					"ID": "20230330145339-rxt77gz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330145339-rxt77gz"
					},
					"Children": [
						{
							"ID": "20230330145339-dxystz7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330145339-dxystz7"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果上述步骤无效，尝试删除节点上负责CNI的Pod，以重置节点的路由、Iptables配置"
								}
							]
						}
					]
				},
				{
					"ID": "20230330145339-6qncs5m",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330145339-6qncs5m"
					},
					"Children": [
						{
							"ID": "20230330145339-018nmqb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330145339-018nmqb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果上述步骤无效，尝试重启容器运行时"
								}
							]
						}
					]
				},
				{
					"ID": "20230330145339-gdelkgx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330145339-gdelkgx"
					},
					"Children": [
						{
							"ID": "20230330145339-ny8z6eb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330145339-ny8z6eb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "告警，要求运维人员介入"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330145341-mzapu7g",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330145341-mzapu7g",
				"updated": "20230330145419"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.5 构建"
				}
			]
		},
		{
			"ID": "20230330145423-vvifahy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145423-vvifahy",
				"updated": "20230330145424"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NPD使用Go modules管理依赖，因此构建它需要Go SDK 1.11+："
				}
			]
		},
		{
			"ID": "20230330145426-urzbkfu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330145426-urzbkfu",
				"updated": "20230330145436"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cd $GOPATH/src/k8s.io\ngo get k8s.io/node-problem-detector\ncd node-problem-detector\n \nexport GO111MODULE=on \ngo mod vendor\n \n# 设置构建标记\nexport BUILD_TAGS=\"disable_custom_plugin_monitor disable_system_stats_monitor\"\n \n# 在Ubuntu 14.04上需要安装\nsudo apt install libsystemd-journal-dev\nmake all\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330145457-p6w24le",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330145457-p6w24le",
				"updated": "20230330145506"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.6 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "用法"
				}
			]
		},
		{
			"ID": "20230330145457-zsn4snp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330145457-zsn4snp",
				"updated": "20230330145513"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.6.1 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "安装"
				}
			]
		},
		{
			"ID": "20230330145457-pfx20iu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145457-pfx20iu",
				"updated": "20230330145457"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以通过Helm安装："
				}
			]
		},
		{
			"ID": "20230330145517-mk34ocf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330145517-mk34ocf",
				"updated": "20230330145524"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "helm install stable/node-problem-detector\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330145531-56ciin8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145531-56ciin8",
				"updated": "20230330145531"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "依据宿主机操作系统的不同，你可能需要修改挂载为HostPath的宿主机日志目录（默认"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "/var/log/）、内核消息目录（默认/dev/kmsg）的路径。"
				}
			]
		},
		{
			"ID": "20230330145531-3h576m9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330145531-3h576m9",
				"updated": "20230330145531"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " 各PD的配置，均放在ConfigMap中，按需修改。"
				}
			]
		},
		{
			"ID": "20230330145544-k203vjn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330145544-k203vjn",
				"updated": "20230330150007"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.6.2 命令行参数"
				}
			]
		},
		{
			"ID": "20230330150008-wawf9j6",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20230330150008-wawf9j6",
				"updated": "20230330150657"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 39,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "参数"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 2666,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 21,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--hostname-override"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 99,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "覆盖NPD更新Condition、Evnet时使用的主机节点名，如果不指定，依次尝试NODE_NAME环境变量、os.Hostname"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 29,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--config.system-log-monitor"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 2666,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PD AbrtAdaptor的配置文件路径，逗号分隔，示例："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "{"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"plugin\": \"kmsg\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 读取内核环缓冲设备"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"logPath\": \"/dev/kmsg\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"lookback\": \"5m\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"bufferSize\": 10,"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"source\": \"kernel-monitor\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"metricsReporting\": true,"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 定义新的NodeConditions"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"conditions\": ["
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"type\": \"KernelDeadlock\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"reason\": \"KernelHasNoDeadlock\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"message\": \"kernel has no deadlock\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"type\": \"ReadonlyFilesystem\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"reason\": \"FilesystemIsNotReadOnly\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"message\": \"Filesystem is not read-only\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        }"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    ],"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 检测问题的规则列表"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"rules\": ["
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            // 问题类别可以是temporary、permanent"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"type\": \"temporary\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"reason\": \"OOMKilling\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            // 匹配日志内容，支持多行匹配"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"pattern\": \"Kill process \\"
								},
								{
									"Type": "NodeText",
									"Data": "d+ (.+) score \\"
								},
								{
									"Type": "NodeText",
									"Data": "d+ or sacrifice child\\"
								},
								{
									"Type": "NodeText",
									"Data": "nKilled process \\"
								},
								{
									"Type": "NodeText",
									"Data": "d+ (.+) total-vm:\\"
								},
								{
									"Type": "NodeText",
									"Data": "d+kB, anon-rss:\\"
								},
								{
									"Type": "NodeText",
									"Data": "d+kB, file-rss:\\"
								},
								{
									"Type": "NodeText",
									"Data": "d+kB."
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "\u0026quot;"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "        },"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "        {"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "            \u0026quot;type\u0026quot;: \u0026quot;temporary\u0026quot;,"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "            \u0026quot;reason\u0026quot;: \u0026quot;TaskHung\u0026quot;,"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "            \u0026quot;pattern\u0026quot;: \u0026quot;task \\"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "S+:\\"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "w+ blocked for more than \\"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "w+ seconds\\"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": ".\u0026quot;"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "        },"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "        {"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "            \u0026quot;type\u0026quot;: \u0026quot;temporary\u0026quot;,"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "            \u0026quot;reason\u0026quot;: \u0026quot;UnregisterNetDevice\u0026quot;,"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "            \u0026quot;pattern\u0026quot;: \u0026quot;unregister_netdevice: waiting for \\"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "w+ to become free. Usage count = \\"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "em",
									"TextMarkTextContent": "d+\u0026quot;        },        {            \u0026quot;type\u0026quot;: \u0026quot;temporary\u0026quot;,            \u0026quot;reason\u0026quot;: \u0026quot;KernelOops\u0026quot;,            \u0026quot;pattern\u0026quot;: \u0026quot;BUG: unable to handle kernel NULL pointer dereference at ."
								},
								{
									"Type": "NodeText",
									"Data": "\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"type\": \"temporary\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"reason\": \"KernelOops\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"pattern\": \"divide error: 0000 \\"
								},
								{
									"Type": "NodeText",
									"Data": "[#\\"
								},
								{
									"Type": "NodeText",
									"Data": "d+\\"
								},
								{
									"Type": "NodeText",
									"Data": "] SMP\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            // 永久问题，记录为Node对象的Conditions"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"type\": \"permanent\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            // NodeCondition.Type，驼峰式大小写"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"condition\": \"KernelDeadlock\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            // NodeCondition.Reason 同样驼峰式大小写，通常为上述Type的子类型"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"reason\": \"AUFSUmountHung\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"pattern\": \"task umount\\"
								},
								{
									"Type": "NodeText",
									"Data": ".aufs:\\"
								},
								{
									"Type": "NodeText",
									"Data": "w+ blocked for more than \\"
								},
								{
									"Type": "NodeText",
									"Data": "w+ seconds\\"
								},
								{
									"Type": "NodeText",
									"Data": ".\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"type\": \"permanent\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"condition\": \"KernelDeadlock\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"reason\": \"DockerHung\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"pattern\": \"task docker:\\"
								},
								{
									"Type": "NodeText",
									"Data": "w+ blocked for more than \\"
								},
								{
									"Type": "NodeText",
									"Data": "w+ seconds\\"
								},
								{
									"Type": "NodeText",
									"Data": ".\"        },        {            \"type\": \"permanent\",            \"condition\": \"ReadonlyFilesystem\",            \"reason\": \"FilesystemIsReadOnly\",            \"pattern\": \"Remounting filesystem read-only\"        }    ]}"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "对于每个配置，NPD会启动一个独立的日志监控线程"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 31,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--config.system-stats-monitor"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 988,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PD SystemStatsMonitor的配置文件路径，逗号分隔，示例："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "{"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"disk\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        // 指定需要收集的指标"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        \"metricsConfigs\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"disk/io_time\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "                \"displayName\": \"disk/io_time\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"disk/weighted_io\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "                \"displayName\": \"disk/weighted_io\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"disk/avg_queue_len\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "                \"displayName\": \"disk/avg_queue_len\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            }"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        // 设置为true则将所有块设备（slave、holder除外）加入到指标收集列表"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        \"includeRootBlk\": true,"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        // 设置为true，则将所有分区加入到指标收集列表"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        \"includeAllAttachedBlk\": true,"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        // 此PD通过lsblk获取设备信息，此选项设置获取的超时"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        \"lsblkTimeout\": \"5s\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"host\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        \"metricsConfigs\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            \"host/uptime\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "                \"displayName\": \"host/uptime\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "            }"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "        }"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"invokeInterval\": \"60s\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "}"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": " 对于每个配置，NPD会启动一个独立的统计信息监控线程"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 32,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--config.custom-plugin-monitor"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 1565,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PD CustomPluginMonitor的配置文件路径，逗号分隔，示例："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "{"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  \"plugin\": \"custom\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  \"pluginConfig\": {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 调用自定义插件的间隔"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"invoke_interval\": \"30s\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 调用自定义插件的超时，超过5s脚本没有退出则认为超时"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"timeout\": \"5s\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 最多读取自定义插件的标准输出的长度，用作Condition状态消息"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"max_output_length\": 80,"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 工作线程数量，也就是说多少个自定义插件可以被并发的调用"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"concurrency\": 3,"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    // 状态消息变更，是否应该导致Condition更新"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    \"enable_message_change_based_condition_update\": false"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  // 其它字段和SLM类似"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  \"source\": \"ntp-custom-plugin-monitor\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  \"metricsReporting\": true,"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  \"conditions\": ["
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"type\": \"NTPProblem\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"reason\": \"NTPIsUp\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"message\": \"ntp service is up\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    }"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  ],"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  \"rules\": ["
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"type\": \"temporary\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"reason\": \"NTPIsDown\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"path\": \"./config/plugin/check_ntp.sh\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"timeout\": \"3s\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    },"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    {"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"type\": \"permanent\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"condition\": \"NTPProblem\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"reason\": \"NTPIsDown\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"path\": \"./config/plugin/check_ntp.sh\","
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "      \"timeout\": \"3s\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    }"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "  ]"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "}"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": " 插件的逻辑编写在脚本中："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "check_ntp.sh"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "#!/bin/bashNOTE: THIS NTP SERVICE CHECK SCRIPT ASSUME THAT NTP SERVICE IS RUNNING UNDER SYSTEMD.THIS IS JUST AN EXAMPLE. YOU CAN WRITE YOUR OWN NODE PROBLEM PLUGIN ON DEMAND.systemctl status ntp.service |"
								},
								{
									"Type": "NodeText",
									"Data": " grep 'Active:' |"
								},
								{
									"Type": "NodeText",
									"Data": " grep -q 'running'"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "ret="
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "inline-math",
									"TextMarkInlineMathContent": "?\u0026lt;br /\u0026gt;if [ "
								},
								{
									"Type": "NodeText",
									"Data": "ret -ne 0 ]; then"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    echo \"NTP service is down.\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "    exit 1"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "fiecho \"NTP service is up.\""
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "exit 0"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "对于每个配置，NPD会启动一个独立的监控线程"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 23,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--enable-k8s-exporter"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 35,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "启用Kubernetes Exporter，默认true"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 22,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--apiserver-override"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 189,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "覆盖报告到的API Server的地址，格式和Heapster的source标记相同"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "如果以Standalone方式运行NPD，需要设置inClusterConfig为false："
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "http://APISERVER_IP:APISERVER_PORT?inClusterConfig=false"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 11,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--address"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 21,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NPD服务器的绑定地址"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--port"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 34,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "NPD服务器的绑定端口，设置为0禁用"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 39,
							"TableCellContentMaxWidth": 39,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "--prometheus-address--prometheus-port"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 50,
							"TableCellContentMaxWidth": 2666,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Prometheus Export的监听地址，默认127.0.0.1:20257"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330150220-w59xdqi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330150220-w59xdqi",
				"updated": "20230330150808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.7 治愈系统"
				}
			]
		},
		{
			"ID": "20230330150817-ygduafh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330150817-ygduafh",
				"updated": "20230330150817"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在NPD的术语中，治愈系统（Remedy System）是一个或一组进程，负责分析NPD检测出的问题，并且采取补救措施，让K8S集群恢复健康状态。"
				}
			]
		},
		{
			"ID": "20230330150817-lusx290",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330150817-lusx290",
				"updated": "20230330150817"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目前官方提及的治愈系统有只有Draino。NPD项目并没有提供对Draino的集成，你需要手工部署和配置Draino。"
				}
			]
		},
		{
			"ID": "20230330150832-diujkiw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330150832-diujkiw",
				"updated": "20230330150843"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.7.1 Draino"
				}
			]
		},
		{
			"ID": "20230330150905-2ffjzfs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330150905-2ffjzfs",
				"updated": "20230330150905"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Draino是Planet开源的小项目，最初在Planet用于解决GCE上运行的K8S集群的持久卷相关进程（mkfs.ext4、mount等）永久卡死在不可中断睡眠状态的问题。Draino的工作方式简单粗暴，只是检测到NodeCondition并Cordon、Drain节点。"
				}
			]
		},
		{
			"ID": "20230330151058-97npnrg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330151058-97npnrg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基于Label和NodeCondition自动的Drain掉故障K8S节点："
				}
			]
		},
		{
			"ID": "20230330151107-ml6g3k7",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330151107-ml6g3k7",
				"updated": "20230330151120"
			},
			"Children": [
				{
					"ID": "20230330151120-328ap8s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330151120-328ap8s"
					},
					"Children": [
						{
							"ID": "20230330151120-9ghuh09",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330151120-9ghuh09",
								"updated": "20230330151125"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "具有匹配标签的的K8S节点，只要进入指定的NodeCondition之一，立即禁止调度（Cordoned）\n在禁止调度之后一段时间，节点被Drain掉"
								}
							]
						}
					]
				},
				{
					"ID": "20230330151126-1tnlp6t",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330151126-1tnlp6t"
					},
					"Children": [
						{
							"ID": "20230330151126-og6x6tx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330151126-og6x6tx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Draino可以联用Cluster Autoscaler，自动的终结掉Drained的节点。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330150905-do7fjvs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330150905-do7fjvs",
				"updated": "20230330150905"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Descheduler项目成熟以后，可以代替Draino。"
				}
			]
		},
		{
			"ID": "20230330151142-mouxi9t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330151142-mouxi9t",
				"updated": "20230330151214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8 核心源码分析"
				}
			]
		},
		{
			"ID": "20230330151215-awtlufu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330151215-awtlufu",
				"updated": "20230330151229"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.1  如何调试"
				}
			]
		},
		{
			"ID": "20230330151229-6mir6w0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330151229-6mir6w0",
				"updated": "20230330151236"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "建议本地启动NPD并调试，参考下面的命令行参数："
				}
			]
		},
		{
			"ID": "20230330151211-6bqf43n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330151211-6bqf43n",
				"updated": "20230330151248"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "--hostname-override=xenial-100 --apiserver-wait-timeout=10s --logtostderr --stderrthreshold=0 -v=10 \\\n--apiserver-override=http://k8s.gmem.cc:6444?inClusterConfig=false \\\n--config.system-log-monitor=/home/alex/Go/workspaces/default/src/k8s.io/node-problem-detector/config/docker-monitor-filelog.json \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330151155-3a9rcyk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330151155-3a9rcyk",
				"updated": "20230330152231"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.2 核心模型"
				}
			]
		},
		{
			"ID": "20230330151332-s2xx98p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330151332-s2xx98p",
				"updated": "20230330151333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NPD抽象了一系列基本的类型，目前供内部使用，这些类型比起K8S API中的对应物更加轻量："
				}
			]
		},
		{
			"ID": "20230330151310-0r88qka",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330151310-0r88qka",
				"updated": "20230330151854"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package types\n \nimport (\n    \"time\"\n    \"github.com/spf13/pflag\"\n)\n \n// 问题的严重性，目前仅仅支持Info和Warn，和K8S事件类型对应\ntype Severity string\nconst (\n    Info Severity = \"info\"   // 对应K8S的Normal事件\n    Warn Severity = \"warn\"   // 对应K8S的Warning事件\n)\n \n// NodeCondition的状态\ntype ConditionStatus string\nconst (\n    // 节点处于目标状态\n    True ConditionStatus = \"True\"\n    // 节点不处于目标状态\n    False ConditionStatus = \"False\"\n    // 不清楚\n    Unknown ConditionStatus = \"Unknown\"\n)\n \n// 建模NodeCondition\ntype Condition struct {\n    // NodeCondition类型，例如KernelDeadlock, OutOfResource\n    Type string `json:\"type\"`\n    // 节点是否处于此NodeCondition\n    Status ConditionStatus `json:\"status\"`\n    // 节点转换为此Condition的时间\n    Transition time.Time `json:\"transition\"`\n    // 记录为何进入此Condition的简短原因\n    Reason string `json:\"reason\"`\n    // 人类可读的，进入此Condition的原因\n    Message string `json:\"message\"`\n}\n \n// 建模Event\ntype Event struct {\n    // 严重性\n    Severity Severity `json:\"severity\"`\n    // 事件发生时间\n    Timestamp time.Time `json:\"timestamp\"`\n    // 事件的简短原因\n    Reason string `json:\"reason\"`\n    // 人类可读的消息\n    Message string `json:\"message\"`\n}\n \n// PD向NPD核心报告时使用的DTO\ntype Status struct {\n    // PD的名称\n    Source string `json:\"source\"`\n    // 临时的节点问题 —— 事件对象，如果此Status用于Condition更新则此字段可以为空\n    // 从老到新排列在数组中\n    Events []Event `json:\"events\"`\n    // 永久的节点问题 —— NodeCondition。PD必须总是在此字段报告最新的Condition\n    Conditions []Condition `json:\"conditions\"`\n}\n \n// 建模问题分类\ntype Type string\nconst (\n    // 临时问题，报告为Event\n    Temp Type = \"temporary\"\n    // 永久问题，报告为NodeCondition\n    Perm Type = \"permanent\"\n)\n \n// PD的接口。PD根据配置的规则，监控并报告节点问题、收集Metrics\ntype Monitor interface {\n    // 启动此PD，将返回一个通道，NPD核心从此通道获取状态更新\n    // 如果此PD仅仅报告Metrics，不关注Problem，则返回的通道应该设置为nil\n    Start() (\u003c-chan *Status, error)\n    // 停止此PD\n    Stop()\n}\n \n// 将节点的监控状态报告给某种控制平面，例如K8S API Server，或者Prometheus\ntype Exporter interface {\n    // 报告问题，此方法由NPD核心调用，传递问题给Exporter，Exporter则将问题传递到NPD外部\n    ExportProblems(*Status)\n}\n \n// PD类型，每个PD类型可以启动多个实例，每个实例对应一个配置\ntype ProblemDaemonType string\n \n// 此映射建模所有PD的所有配置\n// 1) 每个键对应一种PD\n// 2) 每个值的每个元素对应配置文件的路径\ntype ProblemDaemonConfigPathMap map[ProblemDaemonType]*[]string\n \n// 每种PD负责提供一个下面的结构的实例，其函数指针作为实例化PD的工厂\ntype ProblemDaemonHandler struct {\n    CreateProblemDaemonOrDie func(string) Monitor\n    // 描述如何从命令行实例化PD\n    CmdOptionDescription string\n}\n \n// Exporter的类型\ntype ExporterType string\n \n// 每种Exporter负责提供一个下面的结构的实例，其函数指针作为实例化Exporter的工厂\ntype ExporterHandler struct {\n    CreateExporterOrDie func(CommandLineOptions) Exporter\n    // 描述如何从命令行实例化PD\n    Options CommandLineOptions\n}\n \n// 用于注入命令行选项\ntype CommandLineOptions interface {\n    SetFlags(*pflag.FlagSet)\n} \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152045-61g3pjs",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330152045-61g3pjs",
				"updated": "20230330152249"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.3 入口点"
				}
			]
		},
		{
			"ID": "20230330152112-oovj8t9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152112-oovj8t9",
				"updated": "20230330152123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func main() {\n    // ...\n    // 读取并验证命令行选项\n \n    // 初始化所有配置的PD，参数类型为map[ProblemDaemonType]*[]string，每种PD可提供多个配置文件\n    // 每种PD都有对应的ProblemDaemonHandler，调用其CreateProblemDaemonOrDie方法、传入配置文件\n    // 并创建Goroutine\n    problemDaemons := problemdaemon.NewProblemDaemons(npdo.MonitorConfigPaths)\n    // ...\n    // 初始化所有Exporters\n    defaultExporters := []types.Exporter{}\n    if ke := k8sexporter.NewExporterOrDie(npdo); ke != nil {\n        defaultExporters = append(defaultExporters, ke)\n    }\n    if pe := prometheusexporter.NewExporterOrDie(npdo); pe != nil {\n        defaultExporters = append(defaultExporters, pe)\n    }\n    // K8S、Prometheus是内置Exporter，还可以支持可拔插的Experters。\n    plugableExporters := exporters.NewExporters()\n    npdExporters := []types.Exporter{}\n    npdExporters = append(npdExporters, defaultExporters...)\n    npdExporters = append(npdExporters, plugableExporters...)\n \n    // 初始化NPD核心并启动\n    p := problemdetector.NewProblemDetector(problemDaemons, npdExporters)\n    if err := p.Run(); err != nil {\n        glog.Fatalf(\"Problem detector failed with error: %v\", err)\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152252-xz6t4hn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330152252-xz6t4hn",
				"updated": "20230330152304"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.4 初始化Monitors"
				}
			]
		},
		{
			"ID": "20230330152305-owidgp9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152305-owidgp9",
				"updated": "20230330152324"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NPD要求至少启用一个PD，否则NPD就没有输入，没有实际意义。具体需要初始化哪些PD，取决于你提供的命令行参数。"
				}
			]
		},
		{
			"ID": "20230330152325-03unzxy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152325-03unzxy",
				"updated": "20230330152339"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nfunc NewProblemDaemons(monitorConfigPaths types.ProblemDaemonConfigPathMap) []types.Monitor {\n    problemDaemonMap := make(map[string]types.Monitor)\n    // 遍历配置\n    for problemDaemonType, configs := range monitorConfigPaths {\n        // 处理每个PD类型\n        for _, config := range *configs {\n            if _, ok := problemDaemonMap[config]; ok {\n                // 跳过重复配置\n                continue\n            }\n            // 为每个PD的每个配置文件创建PD实例，                       调用工厂函数\n            problemDaemonMap[config] = handlers[problemDaemonType].CreateProblemDaemonOrDie(config)\n        }\n    }\n \n    problemDaemons := []types.Monitor{}\n    for _, problemDaemon := range problemDaemonMap {\n        problemDaemons = append(problemDaemons, problemDaemon)\n    }\n    // 返回PD列表\n    return problemDaemons\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152353-cen34fv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330152353-cen34fv",
				"updated": "20230330152357"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.5 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "初始化Exporters"
				}
			]
		},
		{
			"ID": "20230330152403-0umo50d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152403-0umo50d",
				"updated": "20230330152404"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果启用了Kubernertes Exporter，检测到的节点问题将报告为K8S的NodeCondition和Event。启动此Exporter的代码如下："
				}
			]
		},
		{
			"ID": "20230330152405-6g875px",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152405-6g875px",
				"updated": "20230330152412"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func NewExporterOrDie(npdo *options.NodeProblemDetectorOptions) types.Exporter {\n    // ...\n    // 创建一个问题客户端，此客户端能够读写当前节点的问题、事件\n    c := problemclient.NewClientOrDie(npdo)\n \n    // 连接到K8S API Server\n    waitForAPIServerReadyWithTimeout(c, npdo)\n \n    ke := k8sExporter{\n        client:           c,\n        // ConditionManager利用ProblemClient，将节点状态同步给API Server\n        conditionManager: condition.NewConditionManager(c, clock.RealClock{}),\n    }\n \n    // 启动一个HTTP服务，在端点/conditions提供NodeCondition查询功能\n    ke.startHTTPReporting(npdo)\n    // 启动一个异步线程，定期同步到API Server\n    ke.conditionManager.Start()\n \n    return \u0026ke\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152437-8tr5if1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152437-8tr5if1",
				"updated": "20230330152440"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果启用了Prometheus Exporter，则会启动一个HTTP服务器，供Prometheus Server来抓取指标："
				}
			]
		},
		{
			"ID": "20230330152447-vy1wg9r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152447-vy1wg9r",
				"updated": "20230330152452"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nfunc NewExporterOrDie(npdo *options.NodeProblemDetectorOptions) types.Exporter {\n    // ...\n    addr := net.JoinHostPort(npdo.PrometheusServerAddress, strconv.Itoa(npdo.PrometheusServerPort))\n    // 创建Prometheus的Exporter对象，它实现server.Handler\n    pe, err := prometheus.NewExporter(prometheus.Options{})\n    go func() {\n        mux := http.NewServeMux()\n        // 处理Exporter请求\n        mux.Handle(\"/metrics\", pe)\n        if err := http.ListenAndServe(addr, mux); err != nil {\n        }\n    }()\n    // 集成OpenCensus\n    view.RegisterExporter(pe)\n    return \u0026prometheusExporter{}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152540-q6fd9sw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330152540-q6fd9sw",
				"updated": "20230330152554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.6 启动NPD"
				}
			]
		},
		{
			"ID": "20230330152555-8t5zfcq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152555-8t5zfcq",
				"updated": "20230330152558"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "入口点的最后一步是初始化NPD核心。NPD会持有所有Monitors、Exporters："
				}
			]
		},
		{
			"ID": "20230330152600-zp1dpm0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152600-zp1dpm0",
				"updated": "20230330152611"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type problemDetector struct {\n    monitors  []types.Monitor\n    exporters []types.Exporter\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152628-s8hk68a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152628-s8hk68a",
				"updated": "20230330152628"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NPD的外部接口很简单："
				}
			]
		},
		{
			"ID": "20230330152632-tkd30s4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152632-tkd30s4",
				"updated": "20230330152639"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type ProblemDetector interface {\n    // 运行NPD\n    Run() error\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152641-fsh501m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152641-fsh501m",
				"updated": "20230330152646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们看一下Run方法的实现："
				}
			]
		},
		{
			"ID": "20230330152647-rvlt1r4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152647-rvlt1r4",
				"updated": "20230330152658"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func (p *problemDetector) Run() error {\n    // 逐个启动Monitors\n    // 所有Monitor的输出通道\n    var chans []\u003c-chan *types.Status\n    failureCount := 0\n    for _, m := range p.monitors {\n        // 启动Monitor\n        ch, err := m.Start()\n        if err != nil {\n            // 失败，尝试下一个\n            failureCount += 1\n            continue\n        }\n        if ch != nil {\n            // 保存输出通道\n            chans = append(chans, ch)\n        }\n    }\n    if len(p.monitors) == failureCount {\n        // 所有PD都启动失败，失败\n        return fmt.Errorf(\"no problem daemon is successfully setup\")\n    }\n    // 监听所有PD的输出通道，并将其中的Status归集到单个通道ch中\n    ch := groupChannel(chans)\n    glog.Info(\"Problem detector started\")\n \n    // 收集到的PD输出，必须交给Exporter进行处理，才有价值\n    for {\n        select {\n        case status := \u003c-ch:\n            for _, exporter := range p.exporters {\n                exporter.ExportProblems(status)\n            }\n        }\n    }\n}\n \n// 为每个PD的输出通道创建Goroutine\n// 这些Goroutine接收到PD的状态报告后，将其合并到单个通道\nfunc groupChannel(chans []\u003c-chan *types.Status) \u003c-chan *types.Status {\n    statuses := make(chan *types.Status)\n    for _, ch := range chans {\n        go func(c \u003c-chan *types.Status) {\n            for status := range c {\n                statuses \u003c- status\n            }\n        }(ch)\n    }\n    return statuses\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152658-4zoq4oq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330152658-4zoq4oq",
				"updated": "20230330152714"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.7 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "扩展Monitors"
				}
			]
		},
		{
			"ID": "20230330152722-26j7s85",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152722-26j7s85",
				"updated": "20230330152722"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "入口点中的语句： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "problemdaemon"
				},
				{
					"Type": "NodeText",
					"Data": "."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "NewProblemDaemons"
				},
				{
					"Type": "NodeText",
					"Data": "("
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "npdo"
				},
				{
					"Type": "NodeText",
					"Data": "."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "MonitorConfigPaths"
				},
				{
					"Type": "NodeText",
					"Data": ")负责初始化所有配置的PD。"
				}
			]
		},
		{
			"ID": "20230330152722-mxbq1mn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152722-mxbq1mn",
				"updated": "20230330152722"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于每种PD的每个配置文件，都会调用：ProblemDaemonHandler.CreateProblemDaemonOrDie进行PD实例化："
				}
			]
		},
		{
			"ID": "20230330152727-bf49s7x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152727-bf49s7x",
				"updated": "20230330152742"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "problemDaemonMap[config] = handlers[problemDaemonType].CreateProblemDaemonOrDie(config)\n \ntype ProblemDaemonHandler struct {\n    // 创建PD\n    CreateProblemDaemonOrDie func(string) Monitor\n    // 命令行选项\n    CmdOptionDescription string\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152801-1z28dnf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152801-1z28dnf",
				"updated": "20230330152805"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开发自己的PD时，你需要提供ProblemDaemonHandler的实例并调用problemdaemon.Register进行注册："
				}
			]
		},
		{
			"ID": "20230330152813-rpakmqq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152813-rpakmqq",
				"updated": "20230330152821"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "var (\n    handlers = make(map[types.ProblemDaemonType]types.ProblemDaemonHandler)\n)\n \nfunc Register(problemDaemonType types.ProblemDaemonType, handler types.ProblemDaemonHandler) {\n    handlers[problemDaemonType] = handler\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152837-ngpi7st",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152837-ngpi7st",
				"updated": "20230330152838"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同时，提供Monitor接口的实现。"
				}
			]
		},
		{
			"ID": "20230330152841-9ymne3e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330152841-9ymne3e",
				"updated": "20230330152847"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.8 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "扩展Exporters"
				}
			]
		},
		{
			"ID": "20230330152906-ohfxs0q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152906-ohfxs0q",
				"updated": "20230330152907"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "入口点中的语句： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "plugableExporters"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": ":"
				},
				{
					"Type": "NodeText",
					"Data": "= "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "exporters"
				},
				{
					"Type": "NodeText",
					"Data": "."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "NewExporters"
				},
				{
					"Type": "NodeText",
					"Data": "("
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": ")"
				},
				{
					"Type": "NodeText",
					"Data": "负责初始化扩展的Exporters，Stackdriver Exporter就是这样的一种扩展。"
				}
			]
		},
		{
			"ID": "20230330152909-70uzgrj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152909-70uzgrj",
				"updated": "20230330152913"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NewExporters的逻辑很简单，遍历一个集合，取出其中的ExporterHandler并实例化Exporter："
				}
			]
		},
		{
			"ID": "20230330152922-u500zq8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152922-u500zq8",
				"updated": "20230330152924"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func NewExporters() []types.Exporter {\n    exporters := []types.Exporter{}\n    for _, handler := range handlers {\n        exporter := handler.CreateExporterOrDie(handler.Options)\n        if exporter == nil {\n            continue\n        }\n        exporters = append(exporters, exporter)\n    }\n    return exporters\n}\n \n \n// ExporterHandler是结构，不是接口。每个Exporter插件需要指定\n// 一个函数指针，作为创建Exporter的工厂函数\ntype ExporterHandler struct {\n    CreateExporterOrDie func(CommandLineOptions) Exporter\n    Options CommandLineOptions\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152928-whb0su9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152928-whb0su9",
				"updated": "20230330152928"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "exporters包对外暴露了注册扩展Exporter的接口："
				}
			]
		},
		{
			"ID": "20230330152934-zorylpk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330152934-zorylpk",
				"updated": "20230330152941"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "var (\n    handlers = make(map[types.ExporterType]types.ExporterHandler)\n)\n \nfunc Register(exporterType types.ExporterType, handler types.ExporterHandler) {\n    handlers[exporterType] = handler\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330152945-1me6a5q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330152945-1me6a5q",
				"updated": "20230330152946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开发自己的Exporter时，你需要调用上面的Register注册Exporter的工厂函数，同时实现Exporter接口。"
				}
			]
		},
		{
			"ID": "20230330152949-b4i3dvk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330152949-b4i3dvk",
				"updated": "20230330152954"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.9 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Metric"
				}
			]
		},
		{
			"ID": "20230330153002-x6bpnzp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153002-x6bpnzp",
				"updated": "20230330153002"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NPD对指标这一概念也进行了封装，它依赖OpenCensus而不是Prometheus这样具体的实现的API。"
				}
			]
		},
		{
			"ID": "20230330153002-ezjcgqm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153002-ezjcgqm",
				"updated": "20230330153002"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "OpenCensus是一个开源项目，对比OpenTracing，在Tracing的基础上加了Metrics功能。现在两个项目已经合并为OpenTelemetry并进入CNCF沙箱。OpenTelemetry统一了数据格式规范、SDK，推荐用Prometheus作为Metrics后端，Jaeger做Tracing后端。"
				}
			]
		},
		{
			"ID": "20230330153002-09z1v5c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153002-09z1v5c",
				"updated": "20230330153002"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所有指标如下："
				}
			]
		},
		{
			"ID": "20230330153008-aefdsfg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330153008-aefdsfg",
				"updated": "20230330153031"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "const (\n    ProblemCounterID  MetricID = \"problem_counter\"\n    ProblemGaugeID    MetricID = \"problem_gauge\"\n    DiskIOTimeID      MetricID = \"disk/io_time\"\n    DiskWeightedIOID  MetricID = \"disk/weighted_io\"\n    DiskAvgQueueLenID MetricID = \"disk/avg_queue_len\"\n    HostUptimeID      MetricID = \"host/uptime\"\n)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330153039-bn4nvlu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153039-bn4nvlu",
				"updated": "20230330153039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "前两个是针对所有Problem的Counter/Gauge，后面几个都是SystemStatsMonitor暴露的指标。"
				}
			]
		},
		{
			"ID": "20230330153039-kszsp3a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153039-kszsp3a",
				"updated": "20230330153039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NPD定义了两种数据类型的指标Int64Metric、Float64Metric，前者代码如下："
				}
			]
		},
		{
			"ID": "20230330153117-5aka18a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330153117-5aka18a",
				"updated": "20230330153119"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package metrics\n \nimport (\n    \"context\"\n    \"fmt\"\n \n    \"go.opencensus.io/stats\"\n    \"go.opencensus.io/stats/view\"\n    \"go.opencensus.io/tag\"\n)\n \n// Int64MetricRepresentation 表示一个int64类型的指标的快照值\ntype Int64MetricRepresentation struct {\n    // 指标名\n    Name string\n    // 指标标签集\n    Labels map[string]string\n    // 指标的顺时值\n    Value int64\n}\n \n// Int64Metric 表示一个int64类型的指标\ntype Int64Metric struct {\n    // 指标名\n    name    string\n    // OpenCensus中的概念，本质上就是一个描述符\n    measure *stats.Int64Measure\n}\n \n// 工厂函数，创建指标\nfunc NewInt64Metric(metricID MetricID, viewName string, description string, unit string, aggregation Aggregation, tagNames []string) (*Int64Metric, error) {\n    // OpenCensus中的View\n    if viewName == \"\" {\n        return nil, nil\n    }\n    // 建立指标ID和视图名的对应关系\n    MetricMap.AddMapping(metricID, viewName)\n    // 将标签名转换为OpenCensus的Tag键\n    tagKeys, err := getTagKeysFromNames(tagNames)\n \n    // 将NPD的Aggregation转换为OpenCensus的Aggregation\n    // OpenCensus中的Aggregation表示聚合值的方法\n    var aggregationMethod *view.Aggregation\n    switch aggregation {\n    case LastValue:\n        aggregationMethod = view.LastValue() // 仅仅报告最后记录的值\n    case Sum:\n        aggregationMethod = view.Sum() // 对所有收集的值进行求和\n    default:\n        return nil, fmt.Errorf(\"unknown aggregation option %q\", aggregation)\n    }\n    // 创建Int64Measure度量\n    measure := stats.Int64(viewName, description, unit)\n    // 创建上述度量的视图\n    newView := \u0026view.View{\n        Name:        viewName,\n        Measure:     measure,\n        Description: description,\n        Aggregation: aggregationMethod,\n        TagKeys:     tagKeys,\n    }\n    // 注册此度量的描述符measureDescriptor\n    view.Register(newView)\n    // 返回NPD的封装\n    metric := Int64Metric{viewName, measure}\n    return \u0026metric, nil\n}\n \n// 为指标记录一个度量，并使用提供的Tag作为指标标签\nfunc (metric *Int64Metric) Record(tags map[string]string, measurement int64) error {\n    // Mutator能够对tag map 进行变换\n    var mutators []tag.Mutator\n \n    tagMapMutex.RLock()\n    defer tagMapMutex.RUnlock()\n \n    for tagName, tagValue := range tags {\n        tagKey, ok := tagMap[tagName]\n        if !ok {\n            return fmt.Errorf(\"referencing none existing tag %q in metric %q\", tagName, metric.name)\n        }\n        // 添加这样的Mutator，如果tagKey存在则更新，否则插入\n        mutators = append(mutators, tag.Upsert(tagKey, tagValue))\n    }\n \n    // RecordWithTags能够一次性记录一个或多个度量值\n    return stats.RecordWithTags(\n        context.Background(),\n        // 提供Tag\n        mutators,\n        // 调用*stats.Int64Measure的M方法，可以创建一个Measurement\n        // Measurement的本质是一个值，同时包含Int64Measure及其measureDescriptor的引用\n        metric.measure.M(measurement))\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330153135-gl6s9ls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153135-gl6s9ls",
				"updated": "20230330153135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "OpenCensus中各种概念比较繁琐，讲清楚需要独立开一篇文章。这里牵涉到的有："
				}
			]
		},
		{
			"ID": "20230330153135-jmh16wo",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330153135-jmh16wo",
				"updated": "20230330153135"
			},
			"Children": [
				{
					"ID": "20230330153135-rnamg23",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330153135-rnamg23"
					},
					"Children": [
						{
							"ID": "20230330153135-ntdpnuu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153135-ntdpnuu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "tag.Mutator：这个接口负责为度量值生成标签（名、值对）"
								}
							]
						}
					]
				},
				{
					"ID": "20230330153135-8ifwyrc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330153135-8ifwyrc"
					},
					"Children": [
						{
							"ID": "20230330153135-c0axg80",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153135-c0axg80"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "stats.Measure：度量，此接口表示一个指标，和Prometheus中的Metric对应。度量只具有名称、描述、单位三个属性，不包含标签，或者值。每种度量都提供了方法来创建度量值，例如Int64Measure.M方法将int64转换为Measurement。度量对外不可见，要将度量值导出，必须使用视图。如果没有为Measure定义视图，则记录Measure的成本非常低"
								}
							]
						}
					]
				},
				{
					"ID": "20230330153135-97k0kx6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330153135-97k0kx6"
					},
					"Children": [
						{
							"ID": "20230330153135-u9u25fh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153135-u9u25fh"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "stats.Measurement：度量值，此接口表示Measure的一个具体的采集值。"
								}
							]
						}
					]
				},
				{
					"ID": "20230330153135-c46nvbl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330153135-c46nvbl"
					},
					"Children": [
						{
							"ID": "20230330153135-2hhvv66",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153135-2hhvv66"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "view.View：视图，用于聚合、对外展示已经记录的度量值。视图具有唯一性的名称、关联唯一的度量、具有确定的标签名集合，以及一个确定的聚合函数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330153135-dvfi8pc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153135-dvfi8pc",
				"updated": "20230330153135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果从上面的stats.RecordWithTags调用跟踪下去，可以看到OpenCensus最终仅仅会调用一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "internal"
				},
				{
					"Type": "NodeText",
					"Data": "."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "DefaultRecorder"
				},
				{
					"Type": "NodeText",
					"Data": "这个函数："
				}
			]
		},
		{
			"ID": "20230330153144-magatjr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330153144-magatjr",
				"updated": "20230330153149"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func record(tags *tag.Map, ms interface{}, attachments map[string]interface{}) {\n    req := \u0026recordReq{\n        tm:          tags,\n        ms:          ms.([]stats.Measurement),\n        attachments: attachments,\n        t:           time.Now(),\n    }\n    defaultWorker.c \u003c- req\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330153152-54mi4k9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153152-54mi4k9",
				"updated": "20230330153152"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到此函数构建一个记录请求，并从通道发出。接收此请求并处理的Goroutine如下："
				}
			]
		},
		{
			"ID": "20230330153200-kvp6uuv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330153200-kvp6uuv",
				"updated": "20230330153202"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func (w *worker) start() {\n    // 全局的Metrics生产者管理器\n    prodMgr := metricproducer.GlobalManager()\n    // 注册自己\n    prodMgr.AddProducer(w)\n \n    for {\n        select {\n        case cmd := \u003c-w.c:\n            // 处理记录请求\n            cmd.handleCommand(w)\n        case \u003c-w.timer.C:\n            w.reportUsage(time.Now())\n        case \u003c-w.quit:\n            w.timer.Stop()\n            close(w.c)\n            w.done \u003c- true\n            return\n        }\n    }\n}\n \nfunc (cmd *recordReq) handleCommand(w *worker) {\n    // Worker锁\n    w.mu.Lock()\n    defer w.mu.Unlock()\n    // 一个请求中可以具有多个stats.Measurement\n    for _, m := range cmd.ms {\n        if (m == stats.Measurement{}) {\n            continue\n        }\n        // 获取度量值的度量的所有视图\n        ref := w.getMeasureRef(m.Measure().Name())\n        for v := range ref.views {\n            // 向所有视图添加此度量，内部会调用aggregator.addSample\n            v.addSample(cmd.tm, m.Value(), cmd.attachments, time.Now())\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330153208-8y2iaxu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153208-8y2iaxu",
				"updated": "20230330153208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最终，记录的、聚合后的指标值，就是放在View中的。"
				}
			]
		},
		{
			"ID": "20230330153208-ts7ddlb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153208-ts7ddlb",
				"updated": "20230330153208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么，外部怎么访问这些值？其实，你打开"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://127.0.0.1:20257/metrics",
					"TextMarkTextContent": "http://127.0.0.1:20257/metrics"
				},
				{
					"Type": "NodeText",
					"Data": "可以看到，Prometheus的Exporter已经获取到OpenCensus记录的数据了。那么Prometheus和OpenCensus是如何配合的呢？"
				}
			]
		},
		{
			"ID": "20230330153208-i6dgau1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153208-i6dgau1",
				"updated": "20230330153208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Prometheus在处理/metrics请求时，会调用prometheus.Gatherer，此接口的实现是prometheus.Registry。在NPD启动期间，它会创建一个Registry："
				}
			]
		},
		{
			"ID": "20230330153216-m6d65j4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330153216-m6d65j4",
				"updated": "20230330153218"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "func NewExporter(o Options) (*Exporter, error) {\n    if o.Registry == nil {\n        // 创建Prometheus注册表\n        o.Registry = prometheus.NewRegistry()\n    }\n    // 创建指标收集器\n    collector := newCollector(o, o.Registry)\n    // ...\n}\n \nfunc newCollector(opts Options, registrar *prometheus.Registry) *collector {\n    return \u0026collector{\n        reg:    registrar,\n        opts:   opts,\n        // 通过此Reader读取OpenCensus采集的数据\n        reader: metricexport.NewReader()}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330153228-ees6r3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153228-ees6r3h",
				"updated": "20230330153228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过上述代码可以看到Prometheus如何和OpenCensus集成的，它们之间的接口是metricexport.Reader，此接口是OpenCensus提供的，Prometheus依赖于此接口。"
				}
			]
		},
		{
			"ID": "20230330153228-czt3z6n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153228-czt3z6n",
				"updated": "20230330153228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "metricexport.NewReader()调用创建的Reader具有读取OpenCensus采集的数据的能力。"
				}
			]
		},
		{
			"ID": "20230330153236-tq6nonq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330153236-tq6nonq",
				"updated": "20230330153247"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8.10 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Tomb"
				}
			]
		},
		{
			"ID": "20230330153236-w68kd5v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153236-w68kd5v",
				"updated": "20230330153236"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用于从外部控制协程的生命周期， 它的逻辑很简单，准备结束生命周期时："
				}
			]
		},
		{
			"ID": "20230330153236-i3qpdx1",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330153236-i3qpdx1",
				"updated": "20230330153236"
			},
			"Children": [
				{
					"ID": "20230330153236-nv9s1in",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330153236-nv9s1in"
					},
					"Children": [
						{
							"ID": "20230330153236-a2qqlao",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153236-a2qqlao"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "外部协作者发起一个通知"
								}
							]
						}
					]
				},
				{
					"ID": "20230330153236-khkv8o9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330153236-khkv8o9"
					},
					"Children": [
						{
							"ID": "20230330153236-qmsju8p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153236-qmsju8p"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "协作线程接收到通知，进行清理"
								}
							]
						}
					]
				},
				{
					"ID": "20230330153236-gb5v32d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330153236-gb5v32d"
					},
					"Children": [
						{
							"ID": "20230330153236-2mk4ywa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153236-2mk4ywa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "清理完成后，协程反向通知外部协作者"
								}
							]
						}
					]
				},
				{
					"ID": "20230330153236-ifnez2q",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330153236-ifnez2q"
					},
					"Children": [
						{
							"ID": "20230330153236-nv2893f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330153236-nv2893f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "外部协作者退出阻塞"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330153249-y1tdw9m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330153249-y1tdw9m",
				"updated": "20230330153308"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package tomb\n \ntype Tomb struct {\n    stop chan struct{}  // 当生命周期结束时，外部关闭此通道，以通知协程\n    done chan struct{}  // 当协程完成清理后，关闭此通道，以通知Stop的调用者\n}\n \nfunc NewTomb() *Tomb {\n    return \u0026Tomb{\n        stop: make(chan struct{}),\n        done: make(chan struct{}),\n    }\n}\n \n// 从外部（另外一个Goroutine）进行阻塞性的关闭操作\nfunc (t *Tomb) Stop() {\n    close(t.stop)\n    \u003c-t.done\n}\n \n// 简单的返回Stop通道，如果已经通知关闭，则此读取此通道不会阻塞\nfunc (t *Tomb) Stopping() \u003c-chan struct{} {\n    return t.stop\n}\n \n// 协程内部负责调用此函数，反向通知协作者，告诉它清理工作已经完成\nfunc (t *Tomb) Done() {\n    close(t.done)\n} \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330153827-vofd8ac",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330153827-vofd8ac",
				"updated": "20230330153838"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.9 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "NPD源码分析"
				}
			]
		},
		{
			"ID": "20230330153840-nweg0lj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330153840-nweg0lj",
				"updated": "20230330153848"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.9.1 SystemLogMonitor"
				}
			]
		},
		{
			"ID": "20230330154258-kmdkjir",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330154258-kmdkjir",
				"updated": "20230330154259"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此PD能够分析各种形式的日志，读取其内容，使用正则式匹配来发现节点故障。主要代码如下："
				}
			]
		},
		{
			"ID": "20230330154300-1ixhb8e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330154300-1ixhb8e",
				"updated": "20230330154727"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package systemlogmonitor\n \nimport (\n    \"encoding/json\"\n    \"io/ioutil\"\n    \"time\"\n \n    \"github.com/golang/glog\"\n \n    \"k8s.io/node-problem-detector/pkg/problemdaemon\"\n    \"k8s.io/node-problem-detector/pkg/problemmetrics\"\n    \"k8s.io/node-problem-detector/pkg/systemlogmonitor/logwatchers\"\n    watchertypes \"k8s.io/node-problem-detector/pkg/systemlogmonitor/logwatchers/types\"\n    logtypes \"k8s.io/node-problem-detector/pkg/systemlogmonitor/types\"\n    systemlogtypes \"k8s.io/node-problem-detector/pkg/systemlogmonitor/types\"\n    \"k8s.io/node-problem-detector/pkg/types\"\n    \"k8s.io/node-problem-detector/pkg/util\"\n    \"k8s.io/node-problem-detector/pkg/util/tomb\"\n)\n \nconst SystemLogMonitorName = \"system-log-monitor\"\n \n// 初始化函数用于注册此PD的工厂函数\nfunc init() {\n    problemdaemon.Register(\n        SystemLogMonitorName,\n        types.ProblemDaemonHandler{\n            CreateProblemDaemonOrDie: NewLogMonitorOrDie,\n            CmdOptionDescription:     \"Set to config file paths.\"})\n}\n \ntype logMonitor struct {\n    // 配置文件路径\n    configPath string\n    // 读取日志的逻辑委托给LogWatcher，这里解耦的目的是支持多种类型的日志\n    watcher    watchertypes.LogWatcher\n    // 日志缓冲，读取的日志在此等待处理\n    buffer     LogBuffer\n    // 对应配置文件中的字段\n    config     MonitorConfig\n    // 对应配置文件中的conditions字段\n    conditions []types.Condition\n    // 输入日志条目的通道\n    logCh      \u003c-chan *logtypes.Log\n    // 输出状态的通道\n    output     chan *types.Status\n    // 墓碑，用于控制此Monitor的生命周期\n    tomb       *tomb.Tomb\n}\n// 创建实例，如果失败则panic\nfunc NewLogMonitorOrDie(configPath string) types.Monitor {\n    // 创建实例\n    l := \u0026logMonitor{\n        configPath: configPath,\n        tomb:       tomb.NewTomb(),\n    }\n    // 读取配置文件\n    f, err := ioutil.ReadFile(configPath)\n    // 作为JSON解析为MonitorConfig\n    err = json.Unmarshal(f, \u0026l.config)\n    // 设置MonitorConfig的默认值\n    (\u0026l.config).ApplyDefaultConfiguration()\n    err = l.config.ValidateRules()\n  \n    // 创建LogWatcher\n    l.watcher = logwatchers.GetLogWatcherOrDie(l.config.WatcherConfig)\n    // 设置缓冲区\n    l.buffer = NewLogBuffer(l.config.BufferSize)\n    // 写死的最大通道容量\n    l.output = make(chan *types.Status, 1000)\n    // 如果启用指标报告\n    if *l.config.EnableMetricsReporting {\n        // 则为所有类型的Problem（Rule.Reason，比NodeCondition更细粒度）初始化指标\n        // Perm类型的初始化一个Gauge指标，一个Counter指标\n        // Temp类型的仅仅初始化一个Counter指标\n        initializeProblemMetricsOrDie(l.config.Rules)\n    }\n    return l\n}\n\n// 初始化指标\nfunc initializeProblemMetricsOrDie(rules []systemlogtypes.Rule) {\n    for _, rule := range rules {\n        if rule.Type == types.Perm {\n            err := problemmetrics.GlobalProblemMetricsManager.SetProblemGauge(rule.Condition, rule.Reason, false)\n        }\n        err := problemmetrics.GlobalProblemMetricsManager.IncrementProblemCounter(rule.Reason, 0)\n    }\n}\n \n// 启动\nfunc (l *logMonitor) Start() (\u003c-chan *types.Status, error) {\n    var err error\n    // 启动LogWatcher，监控日志的变化\n    l.logCh, err = l.watcher.Watch()\n    if err != nil {\n        return nil, err\n    }\n    // 启动主循环\n    go l.monitorLoop()\n    return l.output, nil\n}\n \n// 停止\nfunc (l *logMonitor) Stop() {\n    // 关闭Stop通道，然后等待Done通道完成\n    l.tomb.Stop()\n}\n\n// 主循环\nfunc (l *logMonitor) monitorLoop() {\n    // 主循环退出后，接触Stop()调用者的阻塞\n    defer l.tomb.Done()\n    // 初始化状态（Event和Condition）\n    l.initializeStatus()\n    // 循环\n    for {\n        select {\n        // 日志可用，解析日志\n        case log := \u003c-l.logCh:\n            l.parseLog(log)\n        // Stop通道可读，意味着通知关闭了\n        case \u003c-l.tomb.Stopping():\n            // 关闭LogWatcher\n            l.watcher.Stop()\n            glog.Infof(\"Log monitor stopped: %s\", l.configPath)\n            return\n        }\n    }\n}\n \n// 解析日志行\nfunc (l *logMonitor) parseLog(log *logtypes.Log) {\n    // 一旦新日志行可用，就将其推送到日志缓冲\n    l.buffer.Push(log)\n    for _, rule := range l.config.Rules {\n        // 然后逐个规则去匹配\n        matched := l.buffer.Match(rule.Pattern)\n        if len(matched) == 0 {\n            continue\n        }\n        // 如果匹配规则，则报告规则中声明的状态\n        status := l.generateStatus(matched, rule)\n        glog.Infof(\"New status generated: %+v\", status)\n        // 输出状态\n        l.output \u003c- status\n    }\n}\n \n// 从日志生成Status\nfunc (l *logMonitor) generateStatus(logs []*logtypes.Log, rule systemlogtypes.Rule) *types.Status {\n    // 第一行日志的时间戳作为状态的时间戳\n    timestamp := logs[0].Timestamp\n    // 读取日志内容\n    message := generateMessage(logs)\n    var events []types.Event\n    var changedConditions []*types.Condition\n    if rule.Type == types.Temp {\n        // 对于临时问题，仅仅生成事件\n        events = append(events, types.Event{\n            Severity:  types.Warn,\n            Timestamp: timestamp,\n            Reason:    rule.Reason,\n            Message:   message,\n        })\n    } else {\n        // 对于永久问题，改变Condition\n        for i := range l.conditions {\n            condition := \u0026l.conditions[i]\n            // 找到匹配的、此Monitor定义的Condition\n            if condition.Type == rule.Condition {\n                // 如果Condition改变（Status或Reson字段变了）\n                if condition.Status == types.False || condition.Reason != rule.Reason {\n                    // 则更新时间戳和消息\n                    condition.Transition = timestamp\n                    condition.Message = message\n                    // 并发布事件\n                    events = append(events, util.GenerateConditionChangeEvent(\n                        condition.Type,\n                        types.True,\n                        rule.Reason,\n                        timestamp,\n                    ))\n                }\n                condition.Status = types.True\n                condition.Reason = rule.Reason\n                changedConditions = append(changedConditions, condition)\n                break\n            }\n        }\n    }\n    // 报告Problem数量指标\n    if *l.config.EnableMetricsReporting {\n        for _, event := range events {\n            err := problemmetrics.GlobalProblemMetricsManager.IncrementProblemCounter(event.Reason, 1)\n        }\n        for _, condition := range changedConditions {\n            err := problemmetrics.GlobalProblemMetricsManager.SetProblemGauge(\n                condition.Type, condition.Reason, condition.Status == types.True)\n            }\n        }\n    }\n    // 处于性能考虑，应该聚合Event、Condition，周期性的报告，而非这样立即报告\n    return \u0026types.Status{\n        Source: l.config.Source,\n        Events:     events,\n        Conditions: l.conditions,\n    }\n}\n \n// 初始化状态并报告一次\nfunc (l *logMonitor) initializeStatus() {\n    // 初始化默认Condition，来自配置的condition字段\n    l.conditions = initialConditions(l.config.DefaultConditions)\n    l.output \u003c- \u0026types.Status{\n        Source:     l.config.Source,\n        Conditions: l.conditions,\n    }\n}\n \nfunc initialConditions(defaults []types.Condition) []types.Condition {\n    conditions := make([]types.Condition, len(defaults))\n    copy(conditions, defaults)\n    for i := range conditions {\n        conditions[i].Status = types.False\n        conditions[i].Transition = time.Now()\n    }\n    return conditions\n}\n \nfunc generateMessage(logs []*logtypes.Log) string {\n    messages := []string{}\n    for _, log := range logs {\n        messages = append(messages, log.Message)\n    }\n    return concatLogs(messages)\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330154512-2h0l3it",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330154512-2h0l3it",
				"updated": "20230330154518"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和配置相关的代码如下，MonitorConfig嵌入WatcherConfig，正好和配置文件结构对应："
				}
			]
		},
		{
			"ID": "20230330154514-6gasl7l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330154514-6gasl7l",
				"updated": "20230330154810"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// node-problem-detector/pkg/systemlogmonitor/config.go\ntype MonitorConfig struct {\n    // LogWatcher（LogMonitor插件）的配置\n    watchertypes.WatcherConfig\n    // 缓冲（行数）大小\n    BufferSize int `json:\"bufferSize\"`\n    // 此PD的名称\n    Source string `json:\"source\"`\n    // 此PD处理的所有Condition的默认状态\n    DefaultConditions []types.Condition `json:\"conditions\"`\n    // 日志匹配规则列表\n    Rules []systemlogtypes.Rule `json:\"rules\"`\n    // 是否将Problem报告为指标\n    EnableMetricsReporting *bool `json:\"metricsReporting,omitempty\"`\n}\n \n// node-problem-detector/pkg/systemlogmonitor/logwatchers/types/log_watcher.go\ntype WatcherConfig struct {\n    // 插件类型，可选 filelog, journald, kmsg\n    Plugin string `json:\"plugin,omitempty\"`\n    // 键值对形式的插件配置，具体可以包含哪些配置项，取决于插件\n    PluginConfig map[string]string `json:\"pluginConfig,omitempty\"`\n    // 日志的路径\n    LogPath string `json:\"logPath,omitempty\"`\n    // 向当前时间点往前看多久日志\n    Lookback string `json:\"lookback,omitempty\"`\n    // 仅仅查看节点启动之后多久的日志，可以避免启动期间的不稳定状态触发不必要的问题报告\n    Delay string `json:\"delay,omitempty\"`\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155008-00y1cmj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155008-00y1cmj",
				"updated": "20230330155011"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和配置相关的代码如下，MonitorConfig嵌入WatcherConfig，正好和配置文件结构对应："
				}
			]
		},
		{
			"ID": "20230330154512-kdyi7le",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330154512-kdyi7le",
				"updated": "20230330155004"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// node-problem-detector/pkg/systemlogmonitor/config.go\ntype MonitorConfig struct {\n    // LogWatcher（LogMonitor插件）的配置\n    watchertypes.WatcherConfig\n    // 缓冲（行数）大小\n    BufferSize int `json:\"bufferSize\"`\n    // 此PD的名称\n    Source string `json:\"source\"`\n    // 此PD处理的所有Condition的默认状态\n    DefaultConditions []types.Condition `json:\"conditions\"`\n    // 日志匹配规则列表\n    Rules []systemlogtypes.Rule `json:\"rules\"`\n    // 是否将Problem报告为指标\n    EnableMetricsReporting *bool `json:\"metricsReporting,omitempty\"`\n}\n \n// node-problem-detector/pkg/systemlogmonitor/logwatchers/types/log_watcher.go\ntype WatcherConfig struct {\n    // 插件类型，可选 filelog, journald, kmsg\n    Plugin string `json:\"plugin,omitempty\"`\n    // 键值对形式的插件配置，具体可以包含哪些配置项，取决于插件\n    PluginConfig map[string]string `json:\"pluginConfig,omitempty\"`\n    // 日志的路径\n    LogPath string `json:\"logPath,omitempty\"`\n    // 向当前时间点往前看多久日志\n    Lookback string `json:\"lookback,omitempty\"`\n    // 仅仅查看节点启动之后多久的日志，可以避免启动期间的不稳定状态触发不必要的问题报告\n    Delay string `json:\"delay,omitempty\"`\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330154935-159ti1k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330154935-159ti1k",
				"updated": "20230330155019"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LogWatcher的实现有多种，它们具有统一的接口："
				}
			]
		},
		{
			"ID": "20230330154936-zuw6zml",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330154936-zuw6zml",
				"updated": "20230330155036"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type LogWatcher interface {\n    // 开始监控日志，并通过通道输出日志\n    Watch() (\u003c-chan *types.Log, error)\n    // 停止，注意释放打开的资源\n    Stop()\n}\n \n// LogWatcher工厂函数\ntype WatcherCreateFunc func(WatcherConfig) LogWatcher\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155026-v5sclzq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155026-v5sclzq",
				"updated": "20230330155041"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类似于Monitor、Exporter，LogWatcher也需要注册："
				}
			]
		},
		{
			"ID": "20230330155048-zlihq3g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330155048-zlihq3g",
				"updated": "20230330155056"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " // 注册表\nvar createFuncs = map[string]types.WatcherCreateFunc{}\n \n// 注册函数，比较奇葩的是名称没有导出，因此各种LogWatcher的注册均是在logwatchers包中进行的（而非各LogWatcher自己的包）\nfunc registerLogWatcher(name string, create types.WatcherCreateFunc) {\n    createFuncs[name] = create\n}\n \n// 根据config.Plugin字段来查找注册表，获取LogWatcher的工厂函数\nfunc GetLogWatcherOrDie(config types.WatcherConfig) types.LogWatcher {\n    create, ok := createFuncs[config.Plugin]\n    return create(config)\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155048-4to3888",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155048-4to3888",
				"updated": "20230330155107"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们不去逐个分析LogWatcher的实现，仅以kernelLogWatcher（ksmg）为例："
				}
			]
		},
		{
			"ID": "20230330155040-z8g0wvy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330155040-z8g0wvy",
				"updated": "20230330155120"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package kmsg\n \nimport (\n    \"fmt\"\n    \"strings\"\n    \"time\"\n \n    utilclock \"code.cloudfoundry.org/clock\"\n    \"github.com/euank/go-kmsg-parser/kmsgparser\"\n    \"github.com/golang/glog\"\n \n    \"k8s.io/node-problem-detector/pkg/systemlogmonitor/logwatchers/types\"\n    logtypes \"k8s.io/node-problem-detector/pkg/systemlogmonitor/types\"\n    \"k8s.io/node-problem-detector/pkg/util\"\n    \"k8s.io/node-problem-detector/pkg/util/tomb\"\n)\n \ntype kernelLogWatcher struct {\n    cfg       types.WatcherConfig\n    startTime time.Time\n    logCh     chan *logtypes.Log\n    tomb      *tomb.Tomb\n \n    kmsgParser kmsgparser.Parser\n    clock      utilclock.Clock\n}\n \n// 工厂函数\nfunc NewKmsgWatcher(cfg types.WatcherConfig) types.LogWatcher {\n    // 获取系统启动到现在过了多久\n    uptime, err := util.GetUptimeDuration()\n    // 判断何时才应该开始监控日志  \n    startTime, err := util.GetStartTime(time.Now(), uptime, cfg.Lookback, cfg.Delay)\n    return \u0026kernelLogWatcher{\n        cfg:       cfg,\n        startTime: startTime,\n        tomb:      tomb.NewTomb(),\n        logCh: make(chan *logtypes.Log, 100),\n        clock: utilclock.NewClock(),\n    }\n}\n \n// 确保签名匹配\nvar _ types.WatcherCreateFunc = NewKmsgWatcher\n \n// 开始监控\nfunc (k *kernelLogWatcher) Watch() (\u003c-chan *logtypes.Log, error) {\n    if k.kmsgParser == nil {\n        // 初始化内核日志解析器\n        parser, err := kmsgparser.NewParser()\n        k.kmsgParser = parser\n    }\n    // 异步启动主监控循环\n    go k.watchLoop()\n    return k.logCh, nil\n}\n \n// 停止监控\nfunc (k *kernelLogWatcher) Stop() {\n    // 停止解析器\n    k.kmsgParser.Close()\n    // 发起停止信号，并等待主监控循环的通知\n    k.tomb.Stop()\n}\n \n// 主监控循环\nfunc (k *kernelLogWatcher) watchLoop() {\n    // 退出时关闭输出通道，并且通过Tomb告知清理结束，Stop方法可以返回了\n    defer func() {\n        close(k.logCh)\n        k.tomb.Done()\n    }()\n    // go-kmsg-parser项目提供的功能，获得一个可读通道，从中可以读取到内核消息\n    kmsgs := k.kmsgParser.Parse()\n \n    for {\n        select {\n        // 停止信号，清理\n        case \u003c-k.tomb.Stopping():\n            // 关闭内核消息解析器\n            if err := k.kmsgParser.Close(); err != nil {\n            }\n            return\n        // 获取内核消息\n        case msg := \u003c-kmsgs:\n            // 跳过空消息\n            if msg.Message == \"\" {\n                continue\n            }\n \n            // 对于过早的消息，丢弃\n            if msg.Timestamp.Before(k.startTime) {\n                continue\n            }\n            // 输出消息\n            k.logCh \u003c- \u0026logtypes.Log{\n                Message:   strings.TrimSpace(msg.Message),\n                Timestamp: msg.Timestamp,\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155130-9zjwk2l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330155130-9zjwk2l",
				"updated": "20230330155135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.9.2  SystemStatsMonitor"
				}
			]
		},
		{
			"ID": "20230330153921-hxa1z4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153921-hxa1z4a",
				"updated": "20230330153921"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此PD仅仅产生Metrics，而不报告Problem，因此其Start方法返回nil。它报告指标时调用的是OpenCensus的API。"
				}
			]
		},
		{
			"ID": "20230330153921-56mgzua",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330153921-56mgzua",
				"updated": "20230330153921"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要注意的是，NPD的Exporter是针对Problem的，Monitor可以产生，也可以不产生Problem（Status对象）。不产生Problem的Monitor和Exporter直接关系。"
				}
			]
		},
		{
			"ID": "20230330153951-5iussgz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330153951-5iussgz",
				"updated": "20230330153953"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "const SystemStatsMonitorName = \"system-stats-monitor\"\n \n// 注册\nfunc init() {\n    problemdaemon.Register(SystemStatsMonitorName, types.ProblemDaemonHandler{\n        CreateProblemDaemonOrDie: NewSystemStatsMonitorOrDie,\n        CmdOptionDescription:     \"Set to config file paths.\"})\n}\n \ntype systemStatsMonitor struct {\n    // 配置文件路径\n    configPath    string\n    // 从文件中读取到的配置\n    config        ssmtypes.SystemStatsConfig\n    // 统计信息收集器，目前仅仅支持磁盘、主机信息\n    diskCollector *diskCollector\n    hostCollector *hostCollector\n    // 生命周期控制\n    tomb          *tomb.Tomb\n}\n \n// 工厂\nfunc NewSystemStatsMonitorOrDie(configPath string) types.Monitor {\n    ssm := systemStatsMonitor{\n        configPath: configPath,\n        tomb:       tomb.NewTomb(),\n    }\n \n    // 读取、应用、验证配置\n    f, err := ioutil.ReadFile(configPath)\n    err = json.Unmarshal(f, \u0026ssm.config)\n    err = ssm.config.ApplyConfiguration()\n    err = ssm.config.Validate()\n \n    // 按需创建收集器\n    if len(ssm.config.DiskConfig.MetricsConfigs) \u003e 0 {\n        ssm.diskCollector = NewDiskCollectorOrDie(\u0026ssm.config.DiskConfig)\n    }\n    if len(ssm.config.HostConfig.MetricsConfigs) \u003e 0 {\n        ssm.hostCollector = NewHostCollectorOrDie(\u0026ssm.config.HostConfig)\n    }\n    return \u0026ssm\n}\n \n// 异步启动主循环\nfunc (ssm *systemStatsMonitor) Start() (\u003c-chan *types.Status, error) {\n    go ssm.monitorLoop()\n    return nil, nil\n}\n \nfunc (ssm *systemStatsMonitor) monitorLoop() {\n    // 通知Stop()调用者\n    defer ssm.tomb.Done()\n  \n    // 定时器\n    runTicker := time.NewTicker(ssm.config.InvokeInterval)\n    defer runTicker.Stop()\n \n    // 立即进行一次采集\n    select {\n    case \u003c-ssm.tomb.Stopping():\n        return\n    default:\n        ssm.diskCollector.collect()\n        ssm.hostCollector.collect()\n    }\n \n    // 定时采集\n    for {\n        select {\n        case \u003c-runTicker.C:\n            ssm.diskCollector.collect()\n            ssm.hostCollector.collect()\n        case \u003c-ssm.tomb.Stopping():\n            return\n        }\n    }\n}\n \nfunc (ssm *systemStatsMonitor) Stop() {\n    ssm.tomb.Stop()\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330154048-a3bifxd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330154048-a3bifxd",
				"updated": "20230330154048"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，此PD只是定期调用收集器的collect方法，并且不从此方法获取任何信息。"
				}
			]
		},
		{
			"ID": "20230330154048-ojhs6r4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330154048-ojhs6r4",
				"updated": "20230330154147"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目前Collector有两个，以DiskCollector为例，我们看一下它将收集的指标输出到何处了："
				}
			]
		},
		{
			"ID": "20230330154114-urnt6jo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330154114-urnt6jo",
				"updated": "20230330154144"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package systemstatsmonitor\n \nimport (\n    \"context\"\n    \"os/exec\"\n    \"strings\"\n    \"time\"\n \n    \"github.com/golang/glog\"\n    \"github.com/shirou/gopsutil/disk\"\n \n    ssmtypes \"k8s.io/node-problem-detector/pkg/systemstatsmonitor/types\"\n    \"k8s.io/node-problem-detector/pkg/util/metrics\"\n)\n \nconst deviceNameLabel = \"device_name\"\n \ntype diskCollector struct {\n    // IO时间\n    mIOTime      *metrics.Int64Metric\n    // 加权IO时间，此字段上次刷新以来，消耗在IO上的毫秒数 * 进行中的IO操作数量\n    mWeightedIO  *metrics.Int64Metric\n    // 平均队列长度\n    mAvgQueueLen *metrics.Float64Metric\n    // 配置信息\n    config *ssmtypes.DiskStatsConfig\n \n    // IO时间历时记录\n    historyIOTime     map[string]uint64\n    historyWeightedIO map[string]uint64\n}\n \n \n// 工厂函数\nfunc NewDiskCollectorOrDie(diskConfig *ssmtypes.DiskStatsConfig) *diskCollector {\n    dc := diskCollector{config: diskConfig}\n \n    var err error\n \n    // 创建NPD封装的Metrics对象\n    dc.mIOTime, err = metrics.NewInt64Metric(\n        metrics.DiskIOTimeID,\n        // displayName作为OpenCensus View名\n        diskConfig.MetricsConfigs[string(metrics.DiskIOTimeID)].DisplayName,\n        \"The IO time spent on the disk\",\n        \"second\",\n        // 求和聚合\n        metrics.Sum,\n        []string{deviceNameLabel})\n \n    dc.mWeightedIO, err = metrics.NewInt64Metric(\n        metrics.DiskWeightedIOID,\n        diskConfig.MetricsConfigs[string(metrics.DiskWeightedIOID)].DisplayName,\n        \"The weighted IO on the disk\",\n        \"second\",\n        metrics.Sum,\n        []string{deviceNameLabel})\n \n    dc.mAvgQueueLen, err = metrics.NewFloat64Metric(\n        metrics.DiskAvgQueueLenID,\n        diskConfig.MetricsConfigs[string(metrics.DiskAvgQueueLenID)].DisplayName,\n        \"The average queue length on the disk\",\n        \"second\",\n        metrics.LastValue,\n        []string{deviceNameLabel})\n \n    dc.historyIOTime = make(map[string]uint64)\n    dc.historyWeightedIO = make(map[string]uint64)\n \n    return \u0026dc\n}\n \nfunc (dc *diskCollector) collect() {\n    if dc == nil {\n        return\n    }\n \n    blks := []string{}\n    // 列出所有磁盘\n    // 列出所有非Slave非Holder磁盘\n    if dc.config.IncludeRootBlk {\n        blks = append(blks, listRootBlockDevices(dc.config.LsblkTimeout)...)\n    }\n    // 列出所有分区\n    if dc.config.IncludeAllAttachedBlk {\n        blks = append(blks, listAttachedBlockDevices()...)\n    }\n    // 调用gopsutil，此项目能够狂平台获取各种操作系统、硬件的指标\n    //                           总是递增\n    ioCountersStats, err := disk.IOCounters(blks...)\n    if err != nil {\n        return\n    }\n    // 迭代所有指标\n    for deviceName, ioCountersStat := range ioCountersStats {\n        // 根据上一次度量值计算平均队列长度\n        lastIOTime := dc.historyIOTime[deviceName]\n        lastWeightedIO := dc.historyWeightedIO[deviceName]\n \n        dc.historyIOTime[deviceName] = ioCountersStat.IoTime\n        dc.historyWeightedIO[deviceName] = ioCountersStat.WeightedIO\n        // 平均队列长度 = (上次加权IO耗时 - 本次加权IO超时) / (上次IO耗时 - 本次IO耗时)\n        //              = 平均队列长度 * (上次IO耗时 - 本次IO耗时) / (上次IO耗时 - 本次IO耗时)\n        avgQueueLen := float64(0.0)\n        if lastIOTime != ioCountersStat.IoTime {\n            avgQueueLen = float64(ioCountersStat.WeightedIO-lastWeightedIO) / float64(ioCountersStat.IoTime-lastIOTime)\n        }\n \n        // 为指标添加 {\"device_name\": deviceName} 标签\n        tags := map[string]string{deviceNameLabel: deviceName}\n        // 这里录制度量时，要使用增量值，因为对应度量已经设置了聚合方法为sum\n        if dc.mIOTime != nil {\n            dc.mIOTime.Record(tags, int64(ioCountersStat.IoTime-lastIOTime))\n        }\n        if dc.mWeightedIO != nil {\n            dc.mWeightedIO.Record(tags, int64(ioCountersStat.WeightedIO-lastWeightedIO))\n        }\n        if dc.mAvgQueueLen != nil {\n            dc.mAvgQueueLen.Record(tags, avgQueueLen)\n        }\n    }\n}\n \n// 调用lsblk命令列出磁盘\nfunc listRootBlockDevices(timeout time.Duration) []string {\n    ctx, cancel := context.WithTimeout(context.Background(), timeout)\n    defer cancel()\n \n    // 调用命令\n    cmd := exec.CommandContext(ctx, \"lsblk\", \"-d\", \"-n\", \"-o\", \"NAME\")\n    stdout, err := cmd.Output()\n    return strings.Split(strings.TrimSpace(string(stdout)), \"\\n\")\n}\n \n// 列出所有分区\nfunc listAttachedBlockDevices() []string {\n    blks := []string{}\n \n    partitions, err := disk.Partitions(false)\n    if err != nil {\n        glog.Errorf(\"Failed to retrieve the list of disk partitions: %v\", err)\n        return blks\n    }\n \n    for _, partition := range partitions {\n        blks = append(blks, partition.Device)\n    }\n    return blks\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330154226-lgvddh3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330154226-lgvddh3",
				"updated": "20230330155221"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.9.3 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "CustomPluginMonitor"
				}
			]
		},
		{
			"ID": "20230330155234-8szs54g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155234-8szs54g",
				"updated": "20230330155234"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此PD为NPD提供了一种插件化机制，允许基于任何语言来编写监控脚本，只需要这些脚本遵循NPD关于退出码和标准输出的规范。"
				}
			]
		},
		{
			"ID": "20230330155234-0g9cr4j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155234-0g9cr4j",
				"updated": "20230330155234"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此PD定义了以下类型 / 常量："
				}
			]
		},
		{
			"ID": "20230330155236-gop088e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330155236-gop088e",
				"updated": "20230330155253"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package types\n \nimport (\n    \"k8s.io/node-problem-detector/pkg/types\"\n    \"time\"\n)\n \ntype Status int\n \n// 自定义插件的返回码\nconst (\n    OK      Status = 0\n    NonOK   Status = 1\n    Unknown Status = 2\n)\n \n// 插件的检查结果\ntype Result struct {\n    // 提供入参\n    Rule       *CustomRule\n    // 插件状态\n    ExitStatus Status\n    // 标准输出\n    Message    string\n}\n \n// 自定义规则（插件），描述CPM如何调用插件，分析调用结果\ntype CustomRule struct {\n    // 报告永久还是临时问题\n    Type types.Type `json:\"type\"`\n    // 此问题触发哪种NodeCondition，仅当永久问题才设置此字段\n    Condition string `json:\"condition\"`\n    // 问题的简短原因，对于永久问题，通常描述NodeCondition的一个子类型\n    Reason string `json:\"reason\"`\n    // 自定义插件（脚本）的文件路径\n    Path string `json:\"path\"`\n    // 传递给自定义插件的参数\n    Args []string `json:\"args\"`\n    // 自定义插件执行超时\n    TimeoutString *string `json:\"timeout\"`\n    Timeout *time.Duration `json:\"-\"`\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155309-gl41hsx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155309-gl41hsx",
				"updated": "20230330155309"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于如何配置CPM，以及每个插件的代码："
				}
			]
		},
		{
			"ID": "20230330155311-gmzmdu2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330155311-gmzmdu2",
				"updated": "20230330155337"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package types\n \nimport (\n    \"fmt\"\n    \"os\"\n    \"time\"\n \n    \"k8s.io/node-problem-detector/pkg/types\"\n)\n \n// 配置参数默认值\nvar (\n    // 默认全局超时\n    defaultGlobalTimeout                     = 5 * time.Second\n    defaultGlobalTimeoutString               = defaultGlobalTimeout.String()\n    // 默认调用间隔\n    defaultInvokeInterval                    = 30 * time.Second\n    defaultInvokeIntervalString              = defaultInvokeInterval.String()\n    // 默认最大输出长度\n    defaultMaxOutputLength                   = 80\n    // 默认并发度\n    defaultConcurrency                       = 3\n    // 默认是否 状态消息变更导致Condition更新\n    defaultMessageChangeBasedConditionUpdate = false\n    // 默认是否启用指标报告\n    defaultEnableMetricsReporting            = true\n \n    customPluginName = \"custom\"\n)\n // 全局配置\ntype pluginGlobalConfig struct {\n    // 所有插件被调用的间隔\n    InvokeIntervalString *string `json:\"invoke_interval,omitempty\"`\n    // 全局插件执行超时\n    TimeoutString *string `json:\"timeout,omitempty\"`\n    InvokeInterval *time.Duration `json:\"-\"`\n    Timeout *time.Duration `json:\"-\"`\n    // 最大标准输出长度\n    MaxOutputLength *int `json:\"max_output_length,omitempty\"`\n    // 并发度\n    Concurrency *int `json:\"concurrency,omitempty\"`\n    // 状态消息变更是否导致Condition更新\n    EnableMessageChangeBasedConditionUpdate *bool `json:\"enable_message_change_based_condition_update,omitempty\"`\n}\n \n// 此PD的配置，结构上对应配置文件\ntype CustomPluginConfig struct {\n    // PD类型，必须为custom\n    Plugin string `json:\"plugin,omitempty\"`\n    // 全局配置\n    PluginGlobalConfig pluginGlobalConfig `json:\"pluginConfig,omitempty\"`\n    // 源名称\n    Source string `json:\"source\"`\n    // CPM需要处理的所有Condition的默认状态\n    DefaultConditions []types.Condition `json:\"conditions\"`\n    // 需要解析和执行的插件列表\n    Rules []*CustomRule `json:\"rules\"`\n    // 状态消息变更是否导致Condition更新\n    EnableMetricsReporting *bool `json:\"metricsReporting,omitempty\"`\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155342-s75t9n4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155342-s75t9n4",
				"updated": "20230330155342"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CPM的核心代码："
				}
			]
		},
		{
			"ID": "20230330155343-gur0b9a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330155343-gur0b9a",
				"updated": "20230330155514"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package custompluginmonitor\n \nimport (\n    \"encoding/json\"\n    \"io/ioutil\"\n    \"time\"\n \n    \"github.com/golang/glog\"\n \n    \"k8s.io/node-problem-detector/pkg/custompluginmonitor/plugin\"\n    cpmtypes \"k8s.io/node-problem-detector/pkg/custompluginmonitor/types\"\n    \"k8s.io/node-problem-detector/pkg/problemdaemon\"\n    \"k8s.io/node-problem-detector/pkg/problemmetrics\"\n    \"k8s.io/node-problem-detector/pkg/types\"\n    \"k8s.io/node-problem-detector/pkg/util\"\n    \"k8s.io/node-problem-detector/pkg/util/tomb\"\n)\n \n// 此PD的名称\nconst CustomPluginMonitorName = \"custom-plugin-monitor\"\n \nfunc init() {\n    problemdaemon.Register(\n        CustomPluginMonitorName,\n        types.ProblemDaemonHandler{\n            CreateProblemDaemonOrDie: NewCustomPluginMonitorOrDie,\n            CmdOptionDescription:     \"Set to config file paths.\"})\n}\n \n// CPM\ntype customPluginMonitor struct {\n    configPath string\n    config     cpmtypes.CustomPluginConfig\n    conditions []types.Condition\n    // 规则执行插件\n    plugin     *plugin.Plugin\n    // 插件执行结果的读通道\n    resultChan \u003c-chan cpmtypes.Result\n    // 向NPM报送状态的写通道\n    statusChan chan *types.Status\n    tomb       *tomb.Tomb\n}\n\n// 工厂函数\nfunc NewCustomPluginMonitorOrDie(configPath string) types.Monitor {\n    c := \u0026customPluginMonitor{\n        configPath: configPath,\n        tomb:       tomb.NewTomb(),\n    }\n    // 读取并校验配置\n    f, err := ioutil.ReadFile(configPath)\n    err = json.Unmarshal(f, \u0026c.config)\n    // Apply configurations\n    err = (\u0026c.config).ApplyConfiguration()\n    // Validate configurations\n    err = c.config.Validate()\n    // 创建插件对象\n    c.plugin = plugin.NewPlugin(c.config)\n    // 状态通道\n    c.statusChan = make(chan *types.Status, 1000)\n \n    if *c.config.EnableMetricsReporting {\n        initializeProblemMetricsOrDie(c.config.Rules)\n    }\n    return c\n}\n \n// 初始化问题指标\nfunc initializeProblemMetricsOrDie(rules []*cpmtypes.CustomRule) {\n    for _, rule := range rules {\n        if rule.Type == types.Perm {\n            err := problemmetrics.GlobalProblemMetricsManager.SetProblemGauge(rule.Condition, rule.Reason, false)\n        }\n        err := problemmetrics.GlobalProblemMetricsManager.IncrementProblemCounter(rule.Reason, 0)\n    }\n}\n \n// 启动\nfunc (c *customPluginMonitor) Start() (\u003c-chan *types.Status, error) {\n    // 启动插件\n    go c.plugin.Run()\n    // 启动主循环\n    go c.monitorLoop()\n    return c.statusChan, nil\n}\n \n// 停止\nfunc (c *customPluginMonitor) Stop() {\n    c.tomb.Stop()\n}\n \n// 主循环\nfunc (c *customPluginMonitor) monitorLoop() {\n    c.initializeStatus()\n    // 得到插件的结果通道\n    resultChan := c.plugin.GetResultChan()\n    // 循环遍历处理插件的结果\n    for {\n        select {\n        case result := \u003c-resultChan:\n            glog.V(3).Infof(\"Receive new plugin result for %s: %+v\", c.configPath, result)\n            // 将插件结果转换为Status\n            status := c.generateStatus(result)\n            glog.Infof(\"New status generated: %+v\", status)\n            // 输出到状态通道\n            c.statusChan \u003c- status\n        case \u003c-c.tomb.Stopping():\n            c.plugin.Stop()\n            glog.Infof(\"Custom plugin monitor stopped: %s\", c.configPath)\n            c.tomb.Done()\n            break\n        }\n    }\n}\n \n// 从插件检查结果生成状态\nfunc (c *customPluginMonitor) generateStatus(result cpmtypes.Result) *types.Status {\n    timestamp := time.Now()\n    var activeProblemEvents []types.Event\n    var inactiveProblemEvents []types.Event\n    if result.Rule.Type == types.Temp {\n        // 对于临时错误，如果插件检查结果非0则产生一个事件\n        if result.ExitStatus \u003e= cpmtypes.NonOK {\n            activeProblemEvents = append(activeProblemEvents, types.Event{\n                Severity:  types.Warn,\n                Timestamp: timestamp,\n                Reason:    result.Rule.Reason,\n                Message:   result.Message,\n            })\n        }\n    } else {\n        // 对于永久错误，如果插件检查结果非0则修改Condition\n        for i := range c.conditions {\n            condition := \u0026c.conditions[i]\n            if condition.Type == result.Rule.Condition {\n                // 规则中的Reason、结果中的Message表明了发生的问题\n                // 需要从配置中读取默认的Condition，以便在检查结果OK时恢复Condition\n                var defaultConditionReason string\n                var defaultConditionMessage string\n                for j := range c.config.DefaultConditions {\n                    defaultCondition := \u0026c.config.DefaultConditions[j]\n                    // conditions.type == rules[j].condition\n                    if defaultCondition.Type == result.Rule.Condition {\n                        defaultConditionReason = defaultCondition.Reason\n                        defaultConditionMessage = defaultCondition.Message\n                        break\n                    }\n                }\n \n                needToUpdateCondition := true\n                var newReason string\n                var newMessage string\n                // 如果检查结果为0则不处于Condition，为1则处于Condition，其它值则未知\n                status := toConditionStatus(result.ExitStatus)\n                if condition.Status == types.True \u0026\u0026 status != types.True {\n                    // Condtion从True转变为False/Unknown\n                    newReason = defaultConditionReason\n                    if newMessage == \"\" {\n                        newMessage = defaultConditionMessage\n                    } else {\n                        newMessage = result.Message\n                    }\n                } else if condition.Status != types.True \u0026\u0026 status == types.True {\n                    // Condtion从False/Unknown转变为True\n                    newReason = result.Rule.Reason\n                    newMessage = result.Message\n                } else if condition.Status != status {\n                    // Condtion在False和Unknown之间转换\n                    newReason = defaultConditionReason\n                    if newMessage == \"\" {\n                        newMessage = defaultConditionMessage\n                    } else {\n                        newMessage = result.Message\n                    }\n                } else if condition.Status == types.True \u0026\u0026 status == types.True \u0026\u0026\n                    (condition.Reason != result.Rule.Reason ||\n                        (*c.config.PluginGlobalConfig.EnableMessageChangeBasedConditionUpdate \u0026\u0026 condition.Message != result.Message)) {\n                    // Condtion没有改变，和上次一样是True\n                    newReason = result.Rule.Reason\n                    newMessage = result.Message\n                } else {\n                    // Condtion没有改变，和上次一样是False/Unknown\n                    needToUpdateCondition = false\n                }\n            \n                if needToUpdateCondition {\n                    condition.Transition = timestamp\n                    condition.Status = status\n                    condition.Reason = newReason\n                    condition.Message = newMessage\n \n                    updateEvent := util.GenerateConditionChangeEvent(\n                        condition.Type,\n                        status,\n                        newReason,\n                        timestamp,\n                    )\n \n                    if status == types.True {\n                        activeProblemEvents = append(activeProblemEvents, updateEvent)\n                    } else {\n                        inactiveProblemEvents = append(inactiveProblemEvents, updateEvent)\n                    }\n                }\n \n                break\n            }\n        }\n    }\n    // 报告指标\n    if *c.config.EnableMetricsReporting {\n        for _, event := range activeProblemEvents {\n            err := problemmetrics.GlobalProblemMetricsManager.IncrementProblemCounter( event.Reason, 1)\n        }\n        for _, condition := range c.conditions {\n            err := problemmetrics.GlobalProblemMetricsManager.SetProblemGauge(\n                condition.Type, condition.Reason, condition.Status == types.True)\n        }\n    }\n    // 发布Status\n    return \u0026types.Status{\n        Source: c.config.Source,\n        Events:     append(activeProblemEvents, inactiveProblemEvents...),\n        Conditions: c.conditions,\n    }\n}\n \n// 将插件退出码转换为Condtion.Status\nfunc toConditionStatus(s cpmtypes.Status) types.ConditionStatus {\n    switch s {\n    case cpmtypes.OK:\n        return types.False\n    case cpmtypes.NonOK:\n        return types.True\n    default:\n        return types.Unknown\n    }\n}\n \n// 初始化，报告默认状态\nfunc (c *customPluginMonitor) initializeStatus() {\n    c.conditions = initialConditions(c.config.DefaultConditions)\n    glog.Infof(\"Initialize condition generated: %+v\", c.conditions)\n    c.statusChan \u003c- \u0026types.Status{\n        Source:     c.config.Source,\n        Conditions: c.conditions,\n    }\n}\n \nfunc initialConditions(defaults []types.Condition) []types.Condition {\n    conditions := make([]types.Condition, len(defaults))\n    copy(conditions, defaults)\n    for i := range conditions {\n        conditions[i].Status = types.False\n        conditions[i].Transition = time.Now()\n    }\n    return conditions\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155531-7frya28",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155531-7frya28",
				"updated": "20230330155532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实际上执行监控脚本的工作，由Plugin这个结构负责，并且将每个脚本的执行结果通过通道传递给CPM："
				}
			]
		},
		{
			"ID": "20230330155634-d1801jl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330155634-d1801jl",
				"updated": "20230330155635"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package plugin\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"os/exec\"\n    \"strings\"\n    \"sync\"\n    \"syscall\"\n    \"time\"\n \n    \"github.com/golang/glog\"\n    cpmtypes \"k8s.io/node-problem-detector/pkg/custompluginmonitor/types\"\n    \"k8s.io/node-problem-detector/pkg/util/tomb\"\n)\n \ntype Plugin struct {\n    config     cpmtypes.CustomPluginConfig\n    // 此通道用于控制并发度\n    syncChan   chan struct{}\n    // 此通道用于输出结果\n    resultChan chan cpmtypes.Result\n    tomb       *tomb.Tomb\n    // 嵌入\n    sync.WaitGroup\n}\n \nfunc NewPlugin(config cpmtypes.CustomPluginConfig) *Plugin {\n    return \u0026Plugin{\n        config:   config,\n        // 限制通道大小为并发度\n        syncChan: make(chan struct{}, *config.PluginGlobalConfig.Concurrency),\n        resultChan: make(chan cpmtypes.Result, 1000),\n        tomb:       tomb.NewTomb(),\n    }\n}\n \nfunc (p *Plugin) GetResultChan() \u003c-chan cpmtypes.Result {\n    return p.resultChan\n}\n \n// 执行所有规则一遍\nfunc (p *Plugin) Run() {\n    defer func() {\n        glog.Info(\"Stopping plugin execution\")\n        p.tomb.Done()\n    }()\n \n    // 仅仅支持全局一致的调度间隔\n    runTicker := time.NewTicker(*p.config.PluginGlobalConfig.InvokeInterval)\n    defer runTicker.Stop()\n \n    runner := func() {\n        glog.Info(\"Start to run custom plugins\")\n \n        for _, rule := range p.config.Rules {\n            // 占据一个位置\n            p.syncChan \u003c- struct{}{}\n            // 增加一个等待量，在synChan基础上又要加等待组的原因是\n            // 防止遍历完毕后，Run方法过早退出\n            p.Add(1)\n            // 异步执行规则\n            go func(rule *cpmtypes.CustomRule) {\n                // 总是减少一个等待量\n                defer p.Done()\n                // 同时释放一个位置\n                defer func() {\n                    \u003c-p.syncChan\n                }()\n \n                start := time.Now()\n                // 执行规则\n                exitStatus, message := p.run(*rule)\n                end := time.Now()\n \n                glog.V(3).Infof(\"Rule: %+v. Start time: %v. End time: %v. Duration: %v\", rule, start, end, end.Sub(start))\n            \n                // 写入结果\n                result := cpmtypes.Result{\n                    Rule:       rule,\n                    ExitStatus: exitStatus,\n                    Message:    message,\n                }\n \n                p.resultChan \u003c- result\n \n                glog.Infof(\"Add check result %+v for rule %+v\", result, rule)\n            }(rule)\n        }\n        // 等待所有规则执行完毕，防止过早退出\n        p.Wait()\n        glog.Info(\"Finish running custom plugins\")\n    }\n    // 首次执行\n    select {\n    case \u003c-p.tomb.Stopping():\n        return\n    default:\n        runner()\n    }\n    // 循环执行\n    for {\n        select {\n        case \u003c-runTicker.C:\n            runner()\n        case \u003c-p.tomb.Stopping():\n            return\n        }\n    }\n}\n \n// 执行单个规则\nfunc (p *Plugin) run(rule cpmtypes.CustomRule) (exitStatus cpmtypes.Status, output string) {\n    var ctx context.Context\n    var cancel context.CancelFunc\n    // 使用全局、当前规则超时中更小的值\n    if rule.Timeout != nil \u0026\u0026 *rule.Timeout \u003c *p.config.PluginGlobalConfig.Timeout {\n        ctx, cancel = context.WithTimeout(context.Background(), *rule.Timeout)\n    } else {\n        ctx, cancel = context.WithTimeout(context.Background(), *p.config.PluginGlobalConfig.Timeout)\n    }\n    defer cancel()\n    // 执行系统命令\n    cmd := exec.CommandContext(ctx, rule.Path, rule.Args...)\n    stdout, err := cmd.Output()\n    // 如果出错，且退出码不是1则认为是Unknown\n    if err != nil {\n        if _, ok := err.(*exec.ExitError); !ok {\n            glog.Errorf(\"Error in running plugin %q: error - %v. output - %q\", rule.Path, err, string(stdout))\n            return cpmtypes.Unknown, \"Error in running plugin. Please check the error log\"\n        }\n    }\n \n    output = string(stdout)\n    output = strings.TrimSpace(output)\n \n    // 超时\n    if cmd.ProcessState.Sys().(syscall.WaitStatus).Signaled() {\n        output = fmt.Sprintf(\"Timeout when running plugin %q: state - %s. output - %q\", rule.Path, cmd.ProcessState.String(), output)\n    }\n \n    // 修剪标准输出\n    if len(output) \u003e *p.config.PluginGlobalConfig.MaxOutputLength {\n        output = output[:*p.config.PluginGlobalConfig.MaxOutputLength]\n    }\n \n    exitCode := cmd.ProcessState.Sys().(syscall.WaitStatus).ExitStatus()\n    switch exitCode {\n    case 0:\n        return cpmtypes.OK, output\n    case 1:\n        return cpmtypes.NonOK, output\n    default:\n        return cpmtypes.Unknown, output\n    }\n}\n \nfunc (p *Plugin) Stop() {\n    p.tomb.Stop()\n    glog.Info(\"Stop plugin execution\")\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330155739-nnfq7v9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155739-nnfq7v9",
				"updated": "20230330155740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意CPM这里的Plugin，和NPD配置中提到的Plugin，不是一个概念。"
				}
			]
		},
		{
			"ID": "20230330155751-stwmyo6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230330155751-stwmyo6",
				"updated": "20230330155804"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "cluster-autoscaler"
				}
			]
		},
		{
			"ID": "20230330155816-wxhwsnz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155816-wxhwsnz",
				"updated": "20230330155816"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "云提供者通常支持动态创建、销毁节点。当NPD检测到故障节点，且无法恢复时，“治愈”措施就是Drain节点。这导致集群规模的缩小，应当调用云提供者的接口，补充节点。"
				}
			]
		},
		{
			"ID": "20230330155816-85s4d0y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155816-85s4d0y",
				"updated": "20230330155816"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开源项目"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/kubernetes/autoscaler",
					"TextMarkTextContent": "autoscaler"
				},
				{
					"Type": "NodeText",
					"Data": "为K8S提供了若干额外的自动扩容组件："
				}
			]
		},
		{
			"ID": "20230330155816-nhlmgjh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330155816-nhlmgjh",
				"updated": "20230330155816"
			},
			"Children": [
				{
					"ID": "20230330155816-7ta0e6p",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330155816-7ta0e6p"
					},
					"Children": [
						{
							"ID": "20230330155816-msvy8v1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155816-msvy8v1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Cluster Autoscaler：能够自动对K8S节点数量进行扩缩，保证所有Pod有地方运行，且自动销毁空闲节点。支持GCP、AWS、Azure、阿里云、百度云，其它云环境需要自行扩展"
								}
							]
						}
					]
				},
				{
					"ID": "20230330155816-ny7dsss",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330155816-ny7dsss"
					},
					"Children": [
						{
							"ID": "20230330155816-2heye6t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155816-2heye6t"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Vertical Pod Autoscaler：一系列组件，能够自动调整Pod的CPU、内存请求。未来可能支持inplace-update，也就是说不需要删除Pod即可完成request值的修改"
								}
							]
						}
					]
				},
				{
					"ID": "20230330155816-6bxqtgq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330155816-6bxqtgq"
					},
					"Children": [
						{
							"ID": "20230330155816-2nvmcr2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155816-2nvmcr2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Addon Resizer：简化版的VPA，根据集群的节点规模，自动修改Deployment的request值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330155816-ccc0plz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155816-ccc0plz",
				"updated": "20230330155816"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和本文主题相关的是cluster-autoscaler，我们可以利用它来保证集群规模的稳定。"
				}
			]
		},
		{
			"ID": "20230330155844-bwk2b8m",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230330155844-bwk2b8m",
				"updated": "20230330160027"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5. velero"
				}
			]
		},
		{
			"ID": "20230330155918-mv9iyhh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155918-mv9iyhh",
				"updated": "20230330155918"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在灾难性故障中，K8S集群可能完全无法恢复，只能重建。那么，如何快速重建K8S集群就是关键技术问题。"
				}
			]
		},
		{
			"ID": "20230330155918-hqdrvmp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155918-hqdrvmp",
				"updated": "20230330155918"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://velero.io/",
					"TextMarkTextContent": "Velero"
				},
				{
					"Type": "NodeText",
					"Data": "（Heptio Ark）是一个能进行K8S集群备份、迁移的开源项目，特性包括："
				}
			]
		},
		{
			"ID": "20230330155918-n2dafm3",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330155918-n2dafm3",
				"updated": "20230330155918"
			},
			"Children": [
				{
					"ID": "20230330155918-ci2yrqx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330155918-ci2yrqx"
					},
					"Children": [
						{
							"ID": "20230330155918-gu6fphd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155918-gu6fphd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "集群备份：支持备份完整集群（的K8S资源以及持久卷），或者根据命名空间、标签选择器来备份集群的一部分"
								}
							]
						}
					]
				},
				{
					"ID": "20230330155918-lzbvviu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330155918-lzbvviu"
					},
					"Children": [
						{
							"ID": "20230330155918-9hqpzv7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155918-9hqpzv7"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "定期备份"
								}
							]
						}
					]
				},
				{
					"ID": "20230330155918-vagb77i",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330155918-vagb77i"
					},
					"Children": [
						{
							"ID": "20230330155918-5i8zm52",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155918-5i8zm52"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "备份钩子：在备份之前、之后执行指定的运维操作"
								}
							]
						}
					]
				},
				{
					"ID": "20230330155918-g7l3ave",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330155918-g7l3ave"
					},
					"Children": [
						{
							"ID": "20230330155918-ybts8xh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155918-ybts8xh"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "迁移：将K8S资源迁移到其它集群，例如将生产环境集群复制到开发环境"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330155918-6s0okxe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155918-6s0okxe",
				"updated": "20230330155918"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Velero由两个部分组成："
				}
			]
		},
		{
			"ID": "20230330155918-2ujdxi7",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330155918-2ujdxi7",
				"updated": "20230330155918"
			},
			"Children": [
				{
					"ID": "20230330155918-1yvmd6o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330155918-1yvmd6o"
					},
					"Children": [
						{
							"ID": "20230330155918-2v9qyq3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155918-2v9qyq3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "运行在K8S集群中的服务器端"
								}
							]
						}
					]
				},
				{
					"ID": "20230330155918-0mda41e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330155918-0mda41e"
					},
					"Children": [
						{
							"ID": "20230330155918-4ij652n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330155918-4ij652n"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "运行在客户机上的CLI"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330155918-vi1kfbr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330155918-vi1kfbr",
				"updated": "20230330155918"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可以在云提供者或者裸金属环境的K8S集群上运行Velero。Velero集成对流行厂商的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://velero.io/docs/v1.1.0/support-matrix/",
					"TextMarkTextContent": "存储服务"
				},
				{
					"Type": "NodeText",
					"Data": "的支持。"
				}
			]
		},
		{
			"ID": "20230330155954-n995tf3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330155954-n995tf3",
				"updated": "20230330160039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.1 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "存储要求"
				}
			]
		},
		{
			"ID": "20230330160043-tvura3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160043-tvura3h",
				"updated": "20230330160043"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你需要首先选择一个对象存储后端，用于存放备份的Etcd数据。Velero支持S3兼容的对象存储，例如Ceph Rados 12.2.7、Minio。"
				}
			]
		},
		{
			"ID": "20230330160049-uqseo9d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160049-uqseo9d",
				"updated": "20230330160049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要支持持久卷的备份，必须选择一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://velero.io/docs/v1.1.0/support-matrix/#volume-snapshot-providers",
					"TextMarkTextContent": "卷快照提供者"
				},
				{
					"Type": "NodeText",
					"Data": "，国内仅阿里云支持。裸金属集群要使用持久卷备份功能，可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/heptio/velero-plugin-example/",
					"TextMarkTextContent": "自行开发插件"
				},
				{
					"Type": "NodeText",
					"Data": "，或者使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/restic/restic",
					"TextMarkTextContent": "Restic"
				},
				{
					"Type": "NodeText",
					"Data": "等通用的存储备份工具，但是性能明显比卷快照差。Restic支持多种存储后端（用来存放它生成的备份），但是Velero+Restic仅仅支持S3兼容的对象存储。"
				}
			]
		},
		{
			"ID": "20230330160054-ltq4oqb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330160054-ltq4oqb",
				"updated": "20230330160154"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.1.1 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "提供者列表"
				}
			]
		},
		{
			"ID": "20230330160100-ckorwlm",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0,
				0
			],
			"Properties": {
				"id": "20230330160100-ckorwlm",
				"updated": "20230330160100"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 8,
									"TableCellContentMaxWidth": 8,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "提供者"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 10,
									"TableCellContentMaxWidth": 22,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "对象存储"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 15,
									"TableCellContentMaxWidth": 29,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "卷Snapshotter"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 10,
									"TableCellContentMaxWidth": 75,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "插件仓库"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 8,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AWS"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 8,
							"TableCellContentMaxWidth": 22,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AWS S3"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 9,
							"TableCellContentMaxWidth": 29,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AWS EBS"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 63,
							"TableCellContentMaxWidth": 75,
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.com/vmware-tanzu/velero-plugin-for-aws",
									"TextMarkTextContent": "地址"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 5,
							"TableCellContentMaxWidth": 8,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "GCP"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 22,
							"TableCellContentMaxWidth": 22,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Google Cloud Storage"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 29,
							"TableCellContentMaxWidth": 29,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Google Compute Engine Disks"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 63,
							"TableCellContentMaxWidth": 75,
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.com/vmware-tanzu/velero-plugin-for-gcp",
									"TextMarkTextContent": "地址"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 7,
							"TableCellContentMaxWidth": 8,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Azure"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 20,
							"TableCellContentMaxWidth": 22,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Azure Blob Storage"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 21,
							"TableCellContentMaxWidth": 29,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Azure Managed Disks"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 75,
							"TableCellContentMaxWidth": 75,
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.com/vmware-tanzu/velero-plugin-for-microsoft-azure",
									"TextMarkTextContent": "地址"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330160105-0l9ffvy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330160105-0l9ffvy",
				"updated": "20230330160145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.2 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Restic"
				}
			]
		},
		{
			"ID": "20230330160115-h0wkh32",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160115-h0wkh32",
				"updated": "20230330160115"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Restic是一个开源备份工具，Velero可以与之集成，实现任何类型的K8S持久卷备份。如果你的存储后端没有对应的Velero插件，或者使用了EFS、AzureFile、NFS、emptyDir、Local PV等没有快照概念的卷，可以考虑Restic。HostPath不被支持。"
				}
			]
		},
		{
			"ID": "20230330160206-o8o101f",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330160206-o8o101f",
				"updated": "20230330160211"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.2.1 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "自定义资源"
				}
			]
		},
		{
			"ID": "20230330160217-2gcwdc8",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20230330160217-2gcwdc8",
				"updated": "20230330160217"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 4,
									"TableCellContentMaxWidth": 18,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "CR"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellContentWidth": 6,
									"TableCellContentMaxWidth": 311,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 18,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ResticRepository"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 311,
							"TableCellContentMaxWidth": 311,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表示并管理Velero的Restic仓库的生命周期。在第一次针对某个命名空间的备份请求创建后，Velero为每个命名空间创建一个Restic仓库，此CR的控制器会调用Restic仓库的生命周期命令，例如restic init, restic check,  restic prune调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "velero"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "restic"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "repo"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "get"
								},
								{
									"Type": "NodeText",
									"Data": "可以获得Velero的Restic仓库的信息"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 17,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PodVolumeBackup"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 212,
							"TableCellContentMaxWidth": 311,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表示一个Pod中的一个卷的Restic备份，当发现被注解的Pod后，Velero备份主进程会创建一个或多个PodVolumeBackup对象集群中会运行一个Daemonset，这样每个节点上都会运行一个控制器，负责执行restic backup命令以备份Pod的卷数据"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 18,
							"TableCellContentMaxWidth": 18,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PodVolumeRestore"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellContentWidth": 170,
							"TableCellContentMaxWidth": 311,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表示一个Pod中的一个卷的Restic恢复，Velero主恢复进程发现Pod关联了Restic备份后，会创建一个或多个这种CR同样的，每个节点上运行的控制器负责执行restic restoure恢复本机Pod的卷"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330160244-jinth5y",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330160244-jinth5y",
				"updated": "20230330160256"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.2.2 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "限制条件"
				}
			]
		},
		{
			"ID": "20230330160301-4pcaq7o",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330160301-4pcaq7o",
				"updated": "20230330160301"
			},
			"Children": [
				{
					"ID": "20230330160301-tjpxzrw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330160301-tjpxzrw"
					},
					"Children": [
						{
							"ID": "20230330160301-ecqpp83",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160301-ecqpp83"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "要求K8S 1.10以上支持的挂载传播（MountPropagation） 特性，此特性允许同一个Pod之间的容器共享同一个卷"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160301-49uxax3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330160301-49uxax3"
					},
					"Children": [
						{
							"ID": "20230330160301-ski5x5j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160301-ski5x5j"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不支持HostPath类型的卷"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160301-vq09ekk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330160301-vq09ekk"
					},
					"Children": [
						{
							"ID": "20230330160301-6kx6d49",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160301-6kx6d49"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Restic会加密所有备份数据，目前Velero使用一个静态的、通用的密钥。这意味着潜在的安全风险，所有能够访问你的OSS桶的人都能够解密数据。未来Velero会提供更加完善的安全支持"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160301-gsfggql",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330160301-gsfggql"
					},
					"Children": [
						{
							"ID": "20230330160301-764lflf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160301-764lflf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "目前Velero基于Pod的名称来关联备份，这意味着Deployment的Pod删除重建后，会产生一个全新的，而非增量的备份"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160301-oineth2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230330160301-oineth2"
					},
					"Children": [
						{
							"ID": "20230330160301-ytmba2g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160301-ytmba2g"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Restic使用单线程扫描所有文件，如果需要备份的文件很大，例如数据库文件，扫描并去重的过程会很慢，即使实际差异很小"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330160353-yvvthh9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330160353-yvvthh9",
				"updated": "20230330160404"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.2.3 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "备份"
				}
			]
		},
		{
			"ID": "20230330160415-yvq4nat",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160415-yvq4nat",
				"updated": "20230330160415"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要备份K8S资源或卷的内容，您需要使用自定义资源Backup，针对该资源的有效操作是创建、删除，修改没有意义。"
				}
			]
		},
		{
			"ID": "20230330160415-178okhv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160415-178okhv",
				"updated": "20230330160415"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于K8S资源的备份，需要注意以下几点："
				}
			]
		},
		{
			"ID": "20230330160415-i27av81",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330160415-i27av81",
				"updated": "20230330160415"
			},
			"Children": [
				{
					"ID": "20230330160415-5jppucw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330160415-5jppucw"
					},
					"Children": [
						{
							"ID": "20230330160415-8e1d916",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-8e1d916"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "正在被删除的资源不会包含在备份中"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160415-kjqyas5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330160415-kjqyas5"
					},
					"Children": [
						{
							"ID": "20230330160415-diatjb3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-diatjb3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "您可以为任何资源添加标签exclude-from-backup，以禁止对它进行备份"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160415-f8mv8mn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330160415-f8mv8mn"
					},
					"Children": [
						{
							"ID": "20230330160415-9zos3cu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-9zos3cu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在配置Backup资源时，可以通过命名空间、资源类型、标签指定过滤器，不匹配的资源不会包含在备份中"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330160415-hukyin8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160415-hukyin8",
				"updated": "20230330160415"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于K8S卷的备份，需要注意以下几点："
				}
			]
		},
		{
			"ID": "20230330160415-psyrqj6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330160415-psyrqj6",
				"updated": "20230330160415"
			},
			"Children": [
				{
					"ID": "20230330160415-voprraw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330160415-voprraw"
					},
					"Children": [
						{
							"ID": "20230330160415-zkhig79",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-zkhig79"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "卷备份基于Restic实现，它的工作方式是找到Pod卷的挂载目录，并将其内容复制出来"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160415-cyluzk8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330160415-cyluzk8"
					},
					"Children": [
						{
							"ID": "20230330160415-65b3x7v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-65b3x7v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "卷备份是Pod备份的附加项。而持久卷还有另外一种备份机制，即快照"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160415-6xe48f0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330160415-6xe48f0"
					},
					"Children": [
						{
							"ID": "20230330160415-h0i4svn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-h0i4svn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于访问模式为ReadWriteMany的持久卷，如果有多个Pod挂载了它，则仅仅会备份一次"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330160415-3parktr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160415-3parktr",
				"updated": "20230330160415"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "非命名空间内资源的备份行为，受到includeClusterResources配置影响："
				}
			]
		},
		{
			"ID": "20230330160415-2jze7ll",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330160415-2jze7ll",
				"updated": "20230330160415"
			},
			"Children": [
				{
					"ID": "20230330160415-mlm9yaa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330160415-mlm9yaa"
					},
					"Children": [
						{
							"ID": "20230330160415-8hy1p25",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-8hy1p25"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "true：备份集群级别资源，具体行为受标签选择器、资源类型选择器影响"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160415-vplz8xa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330160415-vplz8xa"
					},
					"Children": [
						{
							"ID": "20230330160415-90nhmp9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-90nhmp9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "false：不备份集群级别资源"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160415-lc12fb6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330160415-lc12fb6"
					},
					"Children": [
						{
							"ID": "20230330160415-zcoaam1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160415-zcoaam1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "null/unset："
								}
							]
						},
						{
							"ID": "20230330160415-w1yv3rx",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230330160415-w1yv3rx"
							},
							"Children": [
								{
									"ID": "20230330160415-lsrti2t",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230330160415-lsrti2t"
									},
									"Children": [
										{
											"ID": "20230330160415-kgpbojo",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160415-kgpbojo"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果备份包含了所有命名空间则备份所有集群级别资源"
												}
											]
										}
									]
								},
								{
									"ID": "20230330160415-g8wu3dd",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230330160415-g8wu3dd"
									},
									"Children": [
										{
											"ID": "20230330160415-k7k3bgd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160415-k7k3bgd"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "否则，仅仅当备份包含的命名空间中的资源所关联的集群级别资源包含到备份中。例如PersistentVolumeClaim关联的PersistentVolume会包含到备份中"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330160454-zgpgs1b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330160454-zgpgs1b",
				"updated": "20230330160454"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "备份流程："
				}
			]
		},
		{
			"ID": "20230330160605-eb7wftd",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330160605-eb7wftd",
				"updated": "20230330160605"
			},
			"Children": [
				{
					"ID": "20230330160605-didg4zk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330160605-didg4zk"
					},
					"Children": [
						{
							"ID": "20230330160605-znyqw04",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160605-znyqw04"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主备份进程会检查每个它需要备份的Pod上的注解，如果有backup.velero.io/backup-volumes则意味着需要Restic备份"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160605-jwnrawg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330160605-jwnrawg"
					},
					"Children": [
						{
							"ID": "20230330160605-i14do22",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160605-i14do22"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Velero会确保Pod的命名空间的Restic仓库存在："
								}
							]
						},
						{
							"ID": "20230330160605-pmbk39v",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230330160605-pmbk39v"
							},
							"Children": [
								{
									"ID": "20230330160605-ucqzh4r",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230330160605-ucqzh4r"
									},
									"Children": [
										{
											"ID": "20230330160605-copqgxy",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160605-copqgxy"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "检查ResticRepository对象是否存在"
												}
											]
										}
									]
								},
								{
									"ID": "20230330160605-rx9lbit",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230330160605-rx9lbit"
									},
									"Children": [
										{
											"ID": "20230330160605-6hfpp80",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160605-6hfpp80"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果不存在，则创建一个新的，并等待ResticRepository控制器初始化、检查"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230330160605-u7y8m6x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330160605-u7y8m6x"
					},
					"Children": [
						{
							"ID": "20230330160605-4vsbcfm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160605-4vsbcfm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Velero为每个需要备份的卷（列为上述注解的值）创建PodVolumeBackup对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160605-qr449od",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330160605-qr449od"
					},
					"Children": [
						{
							"ID": "20230330160605-kxg9l2y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160605-kxg9l2y"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主备份进程等待PodVolumeBackup完成或失败"
								}
							]
						}
					]
				},
				{
					"ID": "20230330160605-vyx8mpl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230330160605-vyx8mpl"
					},
					"Children": [
						{
							"ID": "20230330160605-7w90xfr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160605-7w90xfr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与此同时，每个PodVolumeBackup被对应节点的控制器处理，此控制器："
								}
							]
						},
						{
							"ID": "20230330160605-6aef95n",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230330160605-6aef95n"
							},
							"Children": [
								{
									"ID": "20230330160605-mjjfimo",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230330160605-mjjfimo"
									},
									"Children": [
										{
											"ID": "20230330160605-m2e5b47",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160605-m2e5b47"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "具有一个HostPath挂载点，对应宿主机 /var/lib/kubelet/pods目录，以便访问Pod卷数据"
												}
											]
										}
									]
								},
								{
									"ID": "20230330160605-amke8cg",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230330160605-amke8cg"
									},
									"Children": [
										{
											"ID": "20230330160605-zkfejod",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160605-zkfejod"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在上述HostPath下找到Pod卷的子目录"
												}
											]
										}
									]
								},
								{
									"ID": "20230330160605-ztq0r69",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230330160605-ztq0r69"
									},
									"Children": [
										{
											"ID": "20230330160605-q7ap9ot",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160605-q7ap9ot"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "执行 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "restic"
												},
												{
													"Type": "NodeText",
													"Data": " "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "backup"
												}
											]
										}
									]
								},
								{
									"ID": "20230330160605-d7v7vun",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20230330160605-d7v7vun"
									},
									"Children": [
										{
											"ID": "20230330160605-1hksjj4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330160605-1hksjj4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "更新CR的状态为Completed或Failed"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230330160605-mu7ptmc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230330160605-mu7ptmc",
						"updated": "20230330160605"
					},
					"Children": [
						{
							"ID": "20230330160605-7ffv3fp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330160605-7ffv3fp",
								"updated": "20230330160605"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当所有PodVolumeBackup完成后，Velero主进程将这些CR添加到备份中，存放在名为BACKUPNAME-podvolumebackups.json.gz的文件中，并且上传到对象存储，Restic备份的Tar包同样会存放在对象存储中"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330161447-5ex2tl7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330161447-5ex2tl7",
				"updated": "20230330161447"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "操作步骤："
				}
			]
		},
		{
			"ID": "20230330161447-qbhhv19",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330161447-qbhhv19",
				"updated": "20230330161447"
			},
			"Children": [
				{
					"ID": "20230330161447-434a9s4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330161447-434a9s4",
						"updated": "20230330161447"
					},
					"Children": [
						{
							"ID": "20230330161447-6wt9xtf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161447-6wt9xtf",
								"updated": "20230330161447"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为Pod添加注解，指明哪些卷需要备份："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330161430-l5q2kru",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330161430-l5q2kru",
				"updated": "20230330161434"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl -n YOUR_POD_NAMESPACE annotate pod/YOUR_POD_NAME \\\n    backup.velero.io/backup-volumes=YOUR_VOLUME_NAME_1,YOUR_VOLUME_NAME_2,...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330161501-q0ha05y",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330161501-q0ha05y",
				"updated": "20230330161508"
			},
			"Children": [
				{
					"ID": "20230330161508-53emruo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330161508-53emruo"
					},
					"Children": [
						{
							"ID": "20230330161508-h028t1a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161508-h028t1a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "然后，创建一个Velero备份CR： "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "velero"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "backup"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "create"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "NAME"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "OPTIONS"
								},
								{
									"Type": "NodeText",
									"Data": "."
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "."
								},
								{
									"Type": "NodeText",
									"Data": "."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330161501-eawem2v",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330161501-eawem2v",
				"updated": "20230330161513"
			},
			"Children": [
				{
					"ID": "20230330161513-yzhwwbd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330161513-yzhwwbd"
					},
					"Children": [
						{
							"ID": "20230330161513-5sqbid4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161513-5sqbid4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当备份完成后，查看其信息： "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "velero"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "backup"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "describe"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "YOUR_BACKUP_NAME"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330161501-nhta01t",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330161501-nhta01t",
				"updated": "20230330161519"
			},
			"Children": [
				{
					"ID": "20230330161519-ffpqnut",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330161519-ffpqnut"
					},
					"Children": [
						{
							"ID": "20230330161519-19mpal9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161519-19mpal9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取卷备份对象："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330161522-smucgsd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330161522-smucgsd",
				"updated": "20230330161531"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl -n velero get podvolumebackups -l velero.io/backup-name=YOUR_BACKUP_NAME -o yaml\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330161538-r8vg550",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330161538-r8vg550",
				"updated": "20230330161612"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.2.4 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "恢复"
				}
			]
		},
		{
			"ID": "20230330161538-m4qj34f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330161538-m4qj34f",
				"updated": "20230330161538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "恢复流程："
				}
			]
		},
		{
			"ID": "20230330161601-hp7780f",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330161601-hp7780f",
				"updated": "20230330161601"
			},
			"Children": [
				{
					"ID": "20230330161601-syhhlii",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330161601-syhhlii"
					},
					"Children": [
						{
							"ID": "20230330161601-w398w4c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-w398w4c"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主Velero恢复进程检查所有PodVolumeBackup资源"
								}
							]
						}
					]
				},
				{
					"ID": "20230330161601-msyiorv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330161601-msyiorv"
					},
					"Children": [
						{
							"ID": "20230330161601-cg9q99i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-cg9q99i"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于每个PodVolumeBackup，Velero首先保证Restic仓库存在："
								}
							]
						},
						{
							"ID": "20230330161601-2sxk3t4",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230330161601-2sxk3t4"
							},
							"Children": [
								{
									"ID": "20230330161601-jda2vmk",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230330161601-jda2vmk"
									},
									"Children": [
										{
											"ID": "20230330161601-by2uzwp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-by2uzwp"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "检查ResticRepository资源是否存在于目标命名空间"
												}
											]
										}
									]
								},
								{
									"ID": "20230330161601-sv8vm58",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230330161601-sv8vm58"
									},
									"Children": [
										{
											"ID": "20230330161601-53832s2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-53832s2"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果不存在，则创建之，并且等待ResticRepository控制器完成Restic仓库的初始化和检查。在恢复时，真实的Restic仓库应该已经存在于对象存储中，因此实际上仅仅是检查其完整性"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230330161601-y45k3v8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330161601-y45k3v8"
					},
					"Children": [
						{
							"ID": "20230330161601-teju72u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-teju72u"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Velero为Pod添加初始化容器，其任务是等待此Pod所有卷恢复完成"
								}
							]
						}
					]
				},
				{
					"ID": "20230330161601-w039py5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330161601-w039py5"
					},
					"Children": [
						{
							"ID": "20230330161601-h1djj8y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-h1djj8y"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Velero将添加了初始化容器的Pod提交给K8S"
								}
							]
						}
					]
				},
				{
					"ID": "20230330161601-8mw7hsh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230330161601-8mw7hsh"
					},
					"Children": [
						{
							"ID": "20230330161601-psfxi4e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-psfxi4e"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于每个需要恢复的卷，创建PodVolumeRestore"
								}
							]
						}
					]
				},
				{
					"ID": "20230330161601-ap7wyw6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230330161601-ap7wyw6"
					},
					"Children": [
						{
							"ID": "20230330161601-xk2ii46",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-xk2ii46"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Velero主进程等待每个PodVolumeRestore完成或失败"
								}
							]
						}
					]
				},
				{
					"ID": "20230330161601-st33po7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20230330161601-st33po7"
					},
					"Children": [
						{
							"ID": "20230330161601-oi7a1w6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-oi7a1w6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与此同时，每个PodVolumeRestore会被恰当节点上的控制器处理，该控制器："
								}
							]
						},
						{
							"ID": "20230330161601-xxw5gxb",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230330161601-xxw5gxb"
							},
							"Children": [
								{
									"ID": "20230330161601-zcqcg65",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230330161601-zcqcg65"
									},
									"Children": [
										{
											"ID": "20230330161601-exrrdu4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-exrrdu4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "通过HostPath挂载 /var/lib/kubelet/pods，以便访问Pod卷数据"
												}
											]
										}
									]
								},
								{
									"ID": "20230330161601-fglrgv2",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230330161601-fglrgv2"
									},
									"Children": [
										{
											"ID": "20230330161601-7qcz9e8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-7qcz9e8"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "等待Pod运行Init容器"
												}
											]
										}
									]
								},
								{
									"ID": "20230330161601-3rejtoy",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230330161601-3rejtoy"
									},
									"Children": [
										{
											"ID": "20230330161601-3d8iti8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-3d8iti8"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "找到Init容器的卷子目录，这些卷和主容器是共享的"
												}
											]
										}
									]
								},
								{
									"ID": "20230330161601-5wn9qgr",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20230330161601-5wn9qgr"
									},
									"Children": [
										{
											"ID": "20230330161601-ipb9w1f",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-ipb9w1f"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "运行 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "restic"
												},
												{
													"Type": "NodeText",
													"Data": " "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "restore"
												}
											]
										}
									]
								},
								{
									"ID": "20230330161601-dypx7c4",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NS4=",
										"Num": 5
									},
									"Properties": {
										"id": "20230330161601-dypx7c4"
									},
									"Children": [
										{
											"ID": "20230330161601-rfoxwsj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-rfoxwsj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果恢复成，则在卷的.velero子目录中写入一个文件，文件名为当前Velero Restore的UID"
												}
											]
										}
									]
								},
								{
									"ID": "20230330161601-uyw5c7z",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Ni4=",
										"Num": 6
									},
									"Properties": {
										"id": "20230330161601-uyw5c7z"
									},
									"Children": [
										{
											"ID": "20230330161601-sq9nix7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230330161601-sq9nix7"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "更新PodVolumeRestore的状态为Completed或Failed"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230330161601-g5fbhtc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "OC4=",
						"Num": 8
					},
					"Properties": {
						"id": "20230330161601-g5fbhtc"
					},
					"Children": [
						{
							"ID": "20230330161601-04e7eue",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330161601-04e7eue"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "初始化容器等待，直到发现所有相关的卷的根目录下的.velero内有文件写入，其UID为本次Restore的UID。初始化容器退出，主容器开始运行"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330161601-wb1bkna",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330161601-wb1bkna",
				"updated": "20230330161601"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在执行Restic恢复时，Velero使用一个助手init容器。其镜像默认为gcr.io/heptio-images/velero-restic-restore-helper:VERSION，其中VERSION和Velero的版本一致。如果需要使用定制的镜像，可以在Velero的命名空间创建一个ConfigMap："
				}
			]
		},
		{
			"ID": "20230330161726-blg2tgf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330161726-blg2tgf",
				"updated": "20230330161728"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  # 名称无所谓，基于标签找到此ConfigMap\n  name: restic-restore-action-config\n  namespace: velero\n  labels:\n    # 下面的标签用于识别此ConfigMap是某个插件的配置信息\n    velero.io/plugin-config: \"\"\n    # 下面的标签说明插件的名称和类型\n    velero.io/restic: RestoreItemAction\ndata:\n  image: myregistry.io/my-custom-helper-image[:OPTIONAL_TAG]\n  cpuRequest: 200m\n  memRequest: 128Mi\n  cpuLimit: 200m\n  memLimit: 128Mi\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330161734-kiw1bwm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330161734-kiw1bwm",
				"updated": "20230330161744"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.3 安装"
				}
			]
		},
		{
			"ID": "20230330161751-8yyrb3t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330161751-8yyrb3t",
				"updated": "20230330162925"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.3.1 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "通过命令行"
				}
			]
		},
		{
			"ID": "20230330161751-366w7wa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330161751-366w7wa",
				"updated": "20230330161751"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://github.com/heptio/velero/releases/tag/v1.1.0",
					"TextMarkTextContent": "https://github.com/heptio/velero/releases/tag/v1.1.0"
				},
				{
					"Type": "NodeText",
					"Data": "下载最新版本的客户端，解压放到$PATH下。"
				}
			]
		},
		{
			"ID": "20230330161751-02scovr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330161751-02scovr",
				"updated": "20230330161751"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后，使用如下命令安装："
				}
			]
		},
		{
			"ID": "20230330161744-x18fhfo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330161744-x18fhfo",
				"updated": "20230330161810"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nvelero install \\\n    # 备份和卷存储的提供者名称\n    --provider \u003cYOUR_PROVIDER\u003e \\\n    # 对象存储桶的名字\n    --bucket \u003cYOUR_BUCKET\u003e \\\n    # Velero的IAM帐户的凭证文件，如果不支持，使用 --no-secret \n    --secret-file \u003cPATH_TO_FILE\u003e \\\n    --velero-pod-cpu-request \u003cCPU_REQUEST\u003e \\\n    --velero-pod-mem-request \u003cMEMORY_REQUEST\u003e \\\n    --velero-pod-cpu-limit \u003cCPU_LIMIT\u003e \\\n    --velero-pod-mem-limit \u003cMEMORY_LIMIT\u003e \\\n    # 启用Restic集成\n    [--use-restic] \\\n    [--restic-pod-cpu-request \u003cCPU_REQUEST\u003e] \\\n    [--restic-pod-mem-request \u003cMEMORY_REQUEST\u003e] \\\n    [--restic-pod-cpu-limit \u003cCPU_LIMIT\u003e] \\\n    [--restic-pod-mem-limit \u003cMEMORY_LIMIT\u003e]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330161815-gsmon97",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330161815-gsmon97",
				"updated": "20230330161815"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面是一个基于MinIO、不支持存储卷快照的例子："
				}
			]
		},
		{
			"ID": "20230330162643-9kxb5g5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330162643-9kxb5g5",
				"updated": "20230330162735"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "velero install \\\n    --provider aws \\\n    --bucket velero \\\n    --secret-file ./credentials-velero \\\n    --use-volume-snapshots=false \\\n    --backup-location-config region=minio,s3ForcePathStyle=\"true\",s3Url=https://minio.k8s.gmem.cc \\\n    # 启用Restic，等待部署完成\n    --use-restic --wait\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330162739-ol7uda0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330162739-ol7uda0",
				"updated": "20230330162740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中密钥文件的格式如下："
				}
			]
		},
		{
			"ID": "20230330162741-vfi3ufu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330162741-vfi3ufu",
				"updated": "20230330162750"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n[default]\naws_access_key_id = minio\naws_secret_access_key = minio123\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330162759-3boie9r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330162759-3boie9r",
				"updated": "20230330162759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要卸载Velero时，删除以下K8S资源即可："
				}
			]
		},
		{
			"ID": "20230330162804-sjjuinv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330162804-sjjuinv",
				"updated": "20230330162806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl delete namespace/velero clusterrolebinding/velero\nkubectl delete crds -l component=velero\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330162947-op3lm2j",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330162947-op3lm2j",
				"updated": "20230330162949"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "5.3. 2 通过Helm"
				}
			]
		},
		{
			"ID": "20230330162816-hzs21y3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330162816-hzs21y3",
				"updated": "20230330162819"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl create ns velero\nkubectl -n velero create sa velero-server\nkubectl get secrets gmemregsecret -o yaml --export | kubectl -n velero create -f -\n \n \nhelm install --namespace velero --name velero --set fullnameOverride=velero \\\n    --set configuration.provider=aws \\\n    --set-file credentials.secretContents.cloud=./credentials-velero \\\n    --set configuration.backupStorageLocation.name=aws \\\n    --set configuration.backupStorageLocation.bucket=velero \\\n    --set configuration.backupStorageLocation.config.region=minio \\\n    --set configuration.backupStorageLocation.config.s3ForcePathStyle=true \\\n    --set configuration.backupStorageLocation.config.s3Url=https://minio.k8s.gmem.cc \\\n    --set image.repository=docker.gmem.cc/velero/velero \\\n    --set image.tag=v1.1.0 \\\n    --set image.pullPolicy=IfNotPresent \\\n    --set serviceAccount.server.name=velero-server \\\n    --set serviceAccount.server.create=true \\\n    --set snapshotsEnabled=false \\\n    --set deployRestic=true \\\n    velero \n \nkubectl -n velero patch sa velero-server -p '{\"imagePullSecrets\": [{\"name\": \"gmemregsecret\"}]}'\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330162835-0x397p5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330162835-0x397p5",
				"updated": "20230330162836"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要删除，执行："
				}
			]
		},
		{
			"ID": "20230330162837-f8dwp6x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330162837-f8dwp6x",
				"updated": "20230330170000"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nhelm delete velero --purge \nkubectl delete crd backups.velero.io          \nkubectl delete crd backupstoragelocations.velero.io   \nkubectl delete crd deletebackuprequests.velero.io   \nkubectl delete crd downloadrequests.velero.io   \nkubectl delete crd podvolumebackups.velero.io   \nkubectl delete crd podvolumerestores.velero.io  \nkubectl delete crd resticrepositories.velero.io   \nkubectl delete crd restores.velero.io         \nkubectl delete crd schedules.velero.io        \nkubectl delete crd serverstatusrequests.velero.io   \nkubectl delete crd volumesnapshotlocations.velero.io\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330162957-gh5j9v5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330162957-gh5j9v5",
				"updated": "20230330163009"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.3.3 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Restic集成"
				}
			]
		},
		{
			"ID": "20230330163007-l9k3dhe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163007-l9k3dhe",
				"updated": "20230330163013"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即使在安装时没有启用Restic集成，后续你仍然可以随时调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "velero"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "install"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "--"
				},
				{
					"Type": "NodeText",
					"Data": "use"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "-"
				},
				{
					"Type": "NodeText",
					"Data": "restic启用Restic集成。"
				}
			]
		},
		{
			"ID": "20230330163022-dj9h5qr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330163022-dj9h5qr",
				"updated": "20230330163030"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.3.4 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "资源限制"
				}
			]
		},
		{
			"ID": "20230330163022-1yek220",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163022-1yek220",
				"updated": "20230330163022"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Velero可能产生两个Deployment，一个是Velero控制器，一个是Restic，前文包含定制它们的资源用量的参数"
				}
			]
		},
		{
			"ID": "20230330163040-q8968cl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330163040-q8968cl",
				"updated": "20230330163046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.3.5 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "多个对象存储位置"
				}
			]
		},
		{
			"ID": "20230330163040-7gzxy0r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-7gzxy0r",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可以为备份、卷快照指定多个存储位置。但是velero install时最多指定一个备份存储位置、一个卷快照存储位置。"
				}
			]
		},
		{
			"ID": "20230330163040-hv8opm8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-hv8opm8",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "后续你可以使用命令 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "velero"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "backup"
				},
				{
					"Type": "NodeText",
					"Data": "-"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "location"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "create"
				},
				{
					"Type": "NodeText",
					"Data": "、 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "velero"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "snapshot"
				},
				{
					"Type": "NodeText",
					"Data": "-"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "location"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "create"
				},
				{
					"Type": "NodeText",
					"Data": "添加新的存储位置。"
				}
			]
		},
		{
			"ID": "20230330163040-5ls195v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-5ls195v",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果在安装阶段不想提供默认的备份存储位置，可以指定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "--"
				},
				{
					"Type": "NodeText",
					"Data": "no"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "-"
				},
				{
					"Type": "NodeText",
					"Data": "default"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "-"
				},
				{
					"Type": "NodeText",
					"Data": "backup"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "-"
				},
				{
					"Type": "NodeText",
					"Data": "location，同时不指定--bucket、--provider。"
				}
			]
		},
		{
			"ID": "20230330163040-ni449sk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-ni449sk",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象存储位置映射为自定义资源BackupStorageLocation。它对应了一个桶，所有Velero数据都会存放在此桶的某个前缀下。一些供应商特定的字段（例如AWS区域、Azure存储帐户）也存放在此CR中。"
				}
			]
		},
		{
			"ID": "20230330163040-2issvik",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-2issvik",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用户可以预先配置多个对象存储位置、卷快照存储位置，并且在创建备份的时候选择使用哪个位置。"
				}
			]
		},
		{
			"ID": "20230330163040-esljk4m",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330163040-esljk4m",
				"updated": "20230330163102"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.3.6 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "额外的卷快照位置"
				}
			]
		},
		{
			"ID": "20230330163040-dv7bkw2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-dv7bkw2",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Velero支持通过插件方式来集成不同的卷快照提供者，你可以用AWS S3作为对象存储，而Portworx作为卷快照。"
				}
			]
		},
		{
			"ID": "20230330163040-toseojt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-toseojt",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是velero install仅仅支持配置单个提供者，同时用于对象存储、卷快照。"
				}
			]
		},
		{
			"ID": "20230330163040-rtvlxvl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163040-rtvlxvl",
				"updated": "20230330163040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了使用不同的卷快照提供者，你需要："
				}
			]
		},
		{
			"ID": "20230330163040-8it7gvy",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330163040-8it7gvy",
				"updated": "20230330163210"
			},
			"Children": [
				{
					"ID": "20230330163040-rmzgby5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330163040-rmzgby5"
					},
					"Children": [
						{
							"ID": "20230330163040-25f46hm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330163040-25f46hm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定合理的对象存储参数，安装Velero服务器组件"
								}
							]
						}
					]
				},
				{
					"ID": "20230330163040-2585or6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330163040-2585or6"
					},
					"Children": [
						{
							"ID": "20230330163040-ju5meom",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330163040-ju5meom"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将卷快照提供者插件添加到Velero"
								}
							]
						}
					]
				},
				{
					"ID": "20230330163040-p9gpvg8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330163040-p9gpvg8",
						"updated": "20230330163210"
					},
					"Children": [
						{
							"ID": "20230330163040-4qvj2ta",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330163040-4qvj2ta"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "添加卷快照位置"
								}
							]
						},
						{
							"ID": "20230330163207-o8d43av",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230330163207-o8d43av",
								"updated": "20230330163210"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "XA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "velero snapshot-location create \u003cNAME\u003e --provider \u003cPROVIDER-NAME\u003e [--config \u003cPROVIDER-CONFIG\u003e] \n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330163213-5kh60dk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330163213-5kh60dk",
				"updated": "20230330163218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "快照存储位置映射为自定义资源VolumeSnapshotLocation，其字段完全取决于具体供应商（例如AWS区域、Azure资源组、Portworx快照类型）。"
				}
			]
		},
		{
			"ID": "20230330163241-fqp22v9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330163241-fqp22v9",
				"updated": "20230330163245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.4 使用"
				}
			]
		},
		{
			"ID": "20230330163140-dtemrqz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330163140-dtemrqz",
				"updated": "20230330163257"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.4.1 备份"
				}
			]
		},
		{
			"ID": "20230330163333-1261qcc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330163333-1261qcc",
				"updated": "20230330163342"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 安装一个K8S应用\nkubectl apply -f examples/nginx-app/base.yaml\n \n# 备份指定命名空间\nvelero backup create nginx-backup --include-namespaces nginx-example\n \n# 使用选择器，仅仅备份匹配标签的对象\nvelero backup create nginx-backup --selector app=nginx\n# 反向选择器\nvelero backup create nginx-backup --selector 'backup notin (ignore)'\n \n \n# 查看备份\nvelero backup get nginx-backup\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330163144-fvot7uj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330163144-fvot7uj",
				"updated": "20230330163313"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.4.2 定期备份"
				}
			]
		},
		{
			"ID": "20230330163345-smr624v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330163345-smr624v",
				"updated": "20230330163354"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 使用Cron表达式\nvelero schedule create nginx-daily --schedule=\"0 1 * * *\" --selector app=nginx\n# 每天\nvelero schedule create nginx-daily --schedule=\"@daily\" --selector app=nginx \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330163313-3qrrj6v",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330163313-3qrrj6v",
				"updated": "20230330163318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.4.3 恢复"
				}
			]
		},
		{
			"ID": "20230330163400-cya1vnj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330163400-cya1vnj",
				"updated": "20230330163403"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 模拟灾难\nkubectl delete namespaces nginx-example\n# 动态分配的PV的默认回收策略是Delete，因此上述命令会导致Nginx的PV的后被存储被删除，注意此删除\n# 是异步的，因此，执行下一步之前，手工确认卷已经被删除\n \n# 恢复\nvelero restore create --from-backup nginx-backup\n \n# 查看恢复状态\nvelero restore get\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330163319-famceoa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230330163319-famceoa",
				"updated": "20230330163422"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5.4.4 清理"
				}
			]
		},
		{
			"ID": "20230330163409-p6h6v5t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330163409-p6h6v5t",
				"updated": "20230330163415"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n# 删除备份，包括对象存储、持久卷快照\nvelero backup delete BACKUP_NAME\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}